//------------------------------------------------------------------------------
// <auto-generated>
//     Denne kode blev oprettet ved hjælp af et værktøj.
//     Runtime-version:4.0.30319.42000
//
//     Ændringer af denne fil kan resultere i ukorrekt funktion, og ændringerne mistes, hvis
//     koden oprettes igen.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.Serialization;

[assembly: ProxyTypesAssembly()]


namespace XrmBedrock.SharedContext {
    
    
    public interface ICustomer : IEntity {
        
        Guid? Address1_AddressId {
            get;
            set;
        }
        
        string Address1_City {
            get;
            set;
        }
        
        string Address1_Composite {
            get;
        }
        
        string Address1_Country {
            get;
            set;
        }
        
        string Address1_County {
            get;
            set;
        }
        
        string Address1_Fax {
            get;
            set;
        }
        
        double? Address1_Latitude {
            get;
            set;
        }
        
        string Address1_Line1 {
            get;
            set;
        }
        
        string Address1_Line2 {
            get;
            set;
        }
        
        string Address1_Line3 {
            get;
            set;
        }
        
        double? Address1_Longitude {
            get;
            set;
        }
        
        string Address1_Name {
            get;
            set;
        }
        
        string Address1_PostalCode {
            get;
            set;
        }
        
        string Address1_PostOfficeBox {
            get;
            set;
        }
        
        string Address1_PrimaryContactName {
            get;
            set;
        }
        
        string Address1_StateOrProvince {
            get;
            set;
        }
        
        string Address1_Telephone1 {
            get;
            set;
        }
        
        string Address1_Telephone2 {
            get;
            set;
        }
        
        string Address1_Telephone3 {
            get;
            set;
        }
        
        string Address1_UPSZone {
            get;
            set;
        }
        
        int? Address1_UTCOffset {
            get;
            set;
        }
        
        Guid? Address2_AddressId {
            get;
            set;
        }
        
        string Address2_City {
            get;
            set;
        }
        
        string Address2_Composite {
            get;
        }
        
        string Address2_Country {
            get;
            set;
        }
        
        string Address2_County {
            get;
            set;
        }
        
        string Address2_Fax {
            get;
            set;
        }
        
        double? Address2_Latitude {
            get;
            set;
        }
        
        string Address2_Line1 {
            get;
            set;
        }
        
        string Address2_Line2 {
            get;
            set;
        }
        
        string Address2_Line3 {
            get;
            set;
        }
        
        double? Address2_Longitude {
            get;
            set;
        }
        
        string Address2_Name {
            get;
            set;
        }
        
        string Address2_PostalCode {
            get;
            set;
        }
        
        string Address2_PostOfficeBox {
            get;
            set;
        }
        
        string Address2_PrimaryContactName {
            get;
            set;
        }
        
        string Address2_StateOrProvince {
            get;
            set;
        }
        
        string Address2_Telephone1 {
            get;
            set;
        }
        
        string Address2_Telephone2 {
            get;
            set;
        }
        
        string Address2_Telephone3 {
            get;
            set;
        }
        
        string Address2_UPSZone {
            get;
            set;
        }
        
        int? Address2_UTCOffset {
            get;
            set;
        }
        
        string Adx_CreatedByIPAddress {
            get;
            set;
        }
        
        string Adx_CreatedByUsername {
            get;
            set;
        }
        
        string Adx_ModifiedByIPAddress {
            get;
            set;
        }
        
        string Adx_ModifiedByUsername {
            get;
            set;
        }
        
        decimal? Aging30 {
            get;
        }
        
        decimal? Aging30_Base {
            get;
        }
        
        decimal? Aging60 {
            get;
        }
        
        decimal? Aging60_Base {
            get;
        }
        
        decimal? Aging90 {
            get;
        }
        
        decimal? Aging90_Base {
            get;
        }
        
        EntityReference CreatedBy {
            get;
        }
        
        EntityReference CreatedByExternalParty {
            get;
        }
        
        DateTime? CreatedOn {
            get;
        }
        
        EntityReference CreatedOnBehalfBy {
            get;
        }
        
        decimal? CreditLimit {
            get;
            set;
        }
        
        decimal? CreditLimit_Base {
            get;
        }
        
        bool? CreditOnHold {
            get;
            set;
        }
        
        EntityReference DefaultPriceLevelId {
            get;
            set;
        }
        
        string Description {
            get;
            set;
        }
        
        bool? DoNotBulkEMail {
            get;
            set;
        }
        
        bool? DoNotBulkPostalMail {
            get;
            set;
        }
        
        bool? DoNotEMail {
            get;
            set;
        }
        
        bool? DoNotFax {
            get;
            set;
        }
        
        bool? DoNotPhone {
            get;
            set;
        }
        
        bool? DoNotPostalMail {
            get;
            set;
        }
        
        bool? DoNotSendMM {
            get;
            set;
        }
        
        string EMailAddress1 {
            get;
            set;
        }
        
        string EMailAddress2 {
            get;
            set;
        }
        
        string EMailAddress3 {
            get;
            set;
        }
        
        Guid? EntityImageId {
            get;
        }
        
        decimal? ExchangeRate {
            get;
        }
        
        string Fax {
            get;
            set;
        }
        
        bool? FollowEmail {
            get;
            set;
        }
        
        int? ImportSequenceNumber {
            get;
            set;
        }
        
        DateTime? LastOnHoldTime {
            get;
            set;
        }
        
        DateTime? LastUsedInCampaign {
            get;
            set;
        }
        
        bool? MarketingOnly {
            get;
            set;
        }
        
        EntityReference MasterId {
            get;
        }
        
        bool? Merged {
            get;
        }
        
        EntityReference ModifiedBy {
            get;
        }
        
        EntityReference ModifiedByExternalParty {
            get;
        }
        
        DateTime? ModifiedOn {
            get;
        }
        
        EntityReference ModifiedOnBehalfBy {
            get;
        }
        
        EntityReference msa_managingpartnerid {
            get;
            set;
        }
        
        bool? msdyn_gdproptout {
            get;
            set;
        }
        
        int? msdyn_PrimaryTimeZone {
            get;
            set;
        }
        
        EntityReference msdyn_segmentid {
            get;
            set;
        }
        
        int? OnHoldTime {
            get;
        }
        
        EntityReference OriginatingLeadId {
            get;
            set;
        }
        
        DateTime? OverriddenCreatedOn {
            get;
            set;
        }
        
        EntityReference OwnerId {
            get;
            set;
        }
        
        EntityReference OwningBusinessUnit {
            get;
        }
        
        EntityReference OwningTeam {
            get;
        }
        
        EntityReference OwningUser {
            get;
        }
        
        bool? ParticipatesInWorkflow {
            get;
            set;
        }
        
        EntityReference PreferredEquipmentId {
            get;
            set;
        }
        
        EntityReference PreferredServiceId {
            get;
            set;
        }
        
        EntityReference PreferredSystemUserId {
            get;
            set;
        }
        
        Guid? ProcessId {
            get;
            set;
        }
        
        EntityReference SLAId {
            get;
            set;
        }
        
        EntityReference SLAInvokedId {
            get;
        }
        
        Guid? StageId {
            get;
            set;
        }
        
        int? TeamsFollowed {
            get;
            set;
        }
        
        string Telephone1 {
            get;
            set;
        }
        
        string Telephone2 {
            get;
            set;
        }
        
        string Telephone3 {
            get;
            set;
        }
        
        string TimeSpentByMeOnEmailAndMeetings {
            get;
        }
        
        int? TimeZoneRuleVersionNumber {
            get;
            set;
        }
        
        EntityReference TransactionCurrencyId {
            get;
            set;
        }
        
        string TraversedPath {
            get;
            set;
        }
        
        int? UTCConversionTimeZoneCode {
            get;
            set;
        }
        
        long? VersionNumber {
            get;
        }
    }
    
    /// <summary>
    /// <para>Business that represents a customer or potential customer. The company that is billed in business transactions.</para>
    /// <para>Display Name: Account</para>
    /// </summary>
    [EntityLogicalName("account")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Account : ExtendedEntity<AccountState, Account_StatusCode>, ICustomer {
        
        public const string EntityLogicalName = "account";
        
        public const int EntityTypeCode = 1;
        
        public Account() : 
                base(EntityLogicalName) {
        }
        
        public Account(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("accountid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("accountid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the account.</para>
        /// <para>Display Name: Account</para>
        /// </summary>
        [AttributeLogicalName("accountid")]
        [DisplayName("Account")]
        public Guid? AccountId {
            get {
                return GetAttributeValue<Guid?>("accountid");
            }
            set {
                SetId("accountid", value);
            }
        }
        
        /// <summary>
        /// <para>Select a category to indicate whether the customer account is standard or preferred.</para>
        /// <para>Display Name: Category</para>
        /// </summary>
        [AttributeLogicalName("accountcategorycode")]
        [DisplayName("Category")]
        public Account_AccountCategoryCode? AccountCategoryCode {
            get {
                return GetOptionSetValue<Account_AccountCategoryCode>("accountcategorycode");
            }
            set {
                SetOptionSetValue("accountcategorycode", value);
            }
        }
        
        /// <summary>
        /// <para>Select a classification code to indicate the potential value of the customer account based on the projected return on investment, cooperation level, sales cycle length or other criteria.</para>
        /// <para>Display Name: Classification</para>
        /// </summary>
        [AttributeLogicalName("accountclassificationcode")]
        [DisplayName("Classification")]
        public Account_AccountClassificationCode? AccountClassificationCode {
            get {
                return GetOptionSetValue<Account_AccountClassificationCode>("accountclassificationcode");
            }
            set {
                SetOptionSetValue("accountclassificationcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type an ID number or code for the account to quickly search and identify the account in system views.</para>
        /// <para>Display Name: Account Number</para>
        /// </summary>
        [AttributeLogicalName("accountnumber")]
        [DisplayName("Account Number")]
        [MaxLength(20)]
        public string AccountNumber {
            get {
                return GetAttributeValue<string>("accountnumber");
            }
            set {
                SetAttributeValue("accountnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Select a rating to indicate the value of the customer account.</para>
        /// <para>Display Name: Account Rating</para>
        /// </summary>
        [AttributeLogicalName("accountratingcode")]
        [DisplayName("Account Rating")]
        public Account_AccountRatingCode? AccountRatingCode {
            get {
                return GetOptionSetValue<Account_AccountRatingCode>("accountratingcode");
            }
            set {
                SetOptionSetValue("accountratingcode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for address 1.</para>
        /// <para>Display Name: Address 1: ID</para>
        /// </summary>
        [AttributeLogicalName("address1_addressid")]
        [DisplayName("Address 1: ID")]
        public Guid? Address1_AddressId {
            get {
                return GetAttributeValue<Guid?>("address1_addressid");
            }
            set {
                SetAttributeValue("address1_addressid", value);
            }
        }
        
        /// <summary>
        /// <para>Select the primary address type.</para>
        /// <para>Display Name: Address 1: Address Type</para>
        /// </summary>
        [AttributeLogicalName("address1_addresstypecode")]
        [DisplayName("Address 1: Address Type")]
        public Account_Address1_AddressTypeCode? Address1_AddressTypeCode {
            get {
                return GetOptionSetValue<Account_Address1_AddressTypeCode>("address1_addresstypecode");
            }
            set {
                SetOptionSetValue("address1_addresstypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the city for the primary address.</para>
        /// <para>Display Name: Address 1: City</para>
        /// </summary>
        [AttributeLogicalName("address1_city")]
        [DisplayName("Address 1: City")]
        [MaxLength(80)]
        public string Address1_City {
            get {
                return GetAttributeValue<string>("address1_city");
            }
            set {
                SetAttributeValue("address1_city", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the complete primary address.</para>
        /// <para>Display Name: Address 1</para>
        /// </summary>
        [AttributeLogicalName("address1_composite")]
        [DisplayName("Address 1")]
        public string Address1_Composite {
            get {
                return GetAttributeValue<string>("address1_composite");
            }
        }
        
        /// <summary>
        /// <para>Type the country or region for the primary address.</para>
        /// <para>Display Name: Address 1: Country/Region</para>
        /// </summary>
        [AttributeLogicalName("address1_country")]
        [DisplayName("Address 1: Country/Region")]
        [MaxLength(80)]
        public string Address1_Country {
            get {
                return GetAttributeValue<string>("address1_country");
            }
            set {
                SetAttributeValue("address1_country", value);
            }
        }
        
        /// <summary>
        /// <para>Type the county for the primary address.</para>
        /// <para>Display Name: Address 1: County</para>
        /// </summary>
        [AttributeLogicalName("address1_county")]
        [DisplayName("Address 1: County")]
        [MaxLength(50)]
        public string Address1_County {
            get {
                return GetAttributeValue<string>("address1_county");
            }
            set {
                SetAttributeValue("address1_county", value);
            }
        }
        
        /// <summary>
        /// <para>Type the fax number associated with the primary address.</para>
        /// <para>Display Name: Address 1: Fax</para>
        /// </summary>
        [AttributeLogicalName("address1_fax")]
        [DisplayName("Address 1: Fax")]
        [MaxLength(50)]
        public string Address1_Fax {
            get {
                return GetAttributeValue<string>("address1_fax");
            }
            set {
                SetAttributeValue("address1_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Select the freight terms for the primary address to make sure shipping orders are processed correctly.</para>
        /// <para>Display Name: Address 1: Freight Terms</para>
        /// </summary>
        [AttributeLogicalName("address1_freighttermscode")]
        [DisplayName("Address 1: Freight Terms")]
        public Account_Address1_FreightTermsCode? Address1_FreightTermsCode {
            get {
                return GetOptionSetValue<Account_Address1_FreightTermsCode>("address1_freighttermscode");
            }
            set {
                SetOptionSetValue("address1_freighttermscode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the latitude value for the primary address for use in mapping and other applications.</para>
        /// <para>Display Name: Address 1: Latitude</para>
        /// </summary>
        [AttributeLogicalName("address1_latitude")]
        [DisplayName("Address 1: Latitude")]
        public double? Address1_Latitude {
            get {
                return GetAttributeValue<double?>("address1_latitude");
            }
            set {
                SetAttributeValue("address1_latitude", value);
            }
        }
        
        /// <summary>
        /// <para>Type the first line of the primary address.</para>
        /// <para>Display Name: Address 1: Street 1</para>
        /// </summary>
        [AttributeLogicalName("address1_line1")]
        [DisplayName("Address 1: Street 1")]
        [MaxLength(250)]
        public string Address1_Line1 {
            get {
                return GetAttributeValue<string>("address1_line1");
            }
            set {
                SetAttributeValue("address1_line1", value);
            }
        }
        
        /// <summary>
        /// <para>Type the second line of the primary address.</para>
        /// <para>Display Name: Address 1: Street 2</para>
        /// </summary>
        [AttributeLogicalName("address1_line2")]
        [DisplayName("Address 1: Street 2")]
        [MaxLength(250)]
        public string Address1_Line2 {
            get {
                return GetAttributeValue<string>("address1_line2");
            }
            set {
                SetAttributeValue("address1_line2", value);
            }
        }
        
        /// <summary>
        /// <para>Type the third line of the primary address.</para>
        /// <para>Display Name: Address 1: Street 3</para>
        /// </summary>
        [AttributeLogicalName("address1_line3")]
        [DisplayName("Address 1: Street 3")]
        [MaxLength(250)]
        public string Address1_Line3 {
            get {
                return GetAttributeValue<string>("address1_line3");
            }
            set {
                SetAttributeValue("address1_line3", value);
            }
        }
        
        /// <summary>
        /// <para>Type the longitude value for the primary address for use in mapping and other applications.</para>
        /// <para>Display Name: Address 1: Longitude</para>
        /// </summary>
        [AttributeLogicalName("address1_longitude")]
        [DisplayName("Address 1: Longitude")]
        public double? Address1_Longitude {
            get {
                return GetAttributeValue<double?>("address1_longitude");
            }
            set {
                SetAttributeValue("address1_longitude", value);
            }
        }
        
        /// <summary>
        /// <para>Type a descriptive name for the primary address, such as Corporate Headquarters.</para>
        /// <para>Display Name: Address 1: Name</para>
        /// </summary>
        [AttributeLogicalName("address1_name")]
        [DisplayName("Address 1: Name")]
        [MaxLength(200)]
        public string Address1_Name {
            get {
                return GetAttributeValue<string>("address1_name");
            }
            set {
                SetAttributeValue("address1_name", value);
            }
        }
        
        /// <summary>
        /// <para>Type the post office box number of the primary address.</para>
        /// <para>Display Name: Address 1: Post Office Box</para>
        /// </summary>
        [AttributeLogicalName("address1_postofficebox")]
        [DisplayName("Address 1: Post Office Box")]
        [MaxLength(20)]
        public string Address1_PostOfficeBox {
            get {
                return GetAttributeValue<string>("address1_postofficebox");
            }
            set {
                SetAttributeValue("address1_postofficebox", value);
            }
        }
        
        /// <summary>
        /// <para>Type the ZIP Code or postal code for the primary address.</para>
        /// <para>Display Name: Address 1: ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("address1_postalcode")]
        [DisplayName("Address 1: ZIP/Postal Code")]
        [MaxLength(20)]
        public string Address1_PostalCode {
            get {
                return GetAttributeValue<string>("address1_postalcode");
            }
            set {
                SetAttributeValue("address1_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the name of the main contact at the account's primary address.</para>
        /// <para>Display Name: Address 1: Primary Contact Name</para>
        /// </summary>
        [AttributeLogicalName("address1_primarycontactname")]
        [DisplayName("Address 1: Primary Contact Name")]
        [MaxLength(100)]
        public string Address1_PrimaryContactName {
            get {
                return GetAttributeValue<string>("address1_primarycontactname");
            }
            set {
                SetAttributeValue("address1_primarycontactname", value);
            }
        }
        
        /// <summary>
        /// <para>Select a shipping method for deliveries sent to this address.</para>
        /// <para>Display Name: Address 1: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("address1_shippingmethodcode")]
        [DisplayName("Address 1: Shipping Method")]
        public Account_Address1_ShippingMethodCode? Address1_ShippingMethodCode {
            get {
                return GetOptionSetValue<Account_Address1_ShippingMethodCode>("address1_shippingmethodcode");
            }
            set {
                SetOptionSetValue("address1_shippingmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the state or province of the primary address.</para>
        /// <para>Display Name: Address 1: State/Province</para>
        /// </summary>
        [AttributeLogicalName("address1_stateorprovince")]
        [DisplayName("Address 1: State/Province")]
        [MaxLength(50)]
        public string Address1_StateOrProvince {
            get {
                return GetAttributeValue<string>("address1_stateorprovince");
            }
            set {
                SetAttributeValue("address1_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>Type the main phone number associated with the primary address.</para>
        /// <para>Display Name: Address Phone</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone1")]
        [DisplayName("Address Phone")]
        [MaxLength(50)]
        public string Address1_Telephone1 {
            get {
                return GetAttributeValue<string>("address1_telephone1");
            }
            set {
                SetAttributeValue("address1_telephone1", value);
            }
        }
        
        /// <summary>
        /// <para>Type a second phone number associated with the primary address.</para>
        /// <para>Display Name: Address 1: Telephone 2</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone2")]
        [DisplayName("Address 1: Telephone 2")]
        [MaxLength(50)]
        public string Address1_Telephone2 {
            get {
                return GetAttributeValue<string>("address1_telephone2");
            }
            set {
                SetAttributeValue("address1_telephone2", value);
            }
        }
        
        /// <summary>
        /// <para>Type a third phone number associated with the primary address.</para>
        /// <para>Display Name: Address 1: Telephone 3</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone3")]
        [DisplayName("Address 1: Telephone 3")]
        [MaxLength(50)]
        public string Address1_Telephone3 {
            get {
                return GetAttributeValue<string>("address1_telephone3");
            }
            set {
                SetAttributeValue("address1_telephone3", value);
            }
        }
        
        /// <summary>
        /// <para>Type the UPS zone of the primary address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.</para>
        /// <para>Display Name: Address 1: UPS Zone</para>
        /// </summary>
        [AttributeLogicalName("address1_upszone")]
        [DisplayName("Address 1: UPS Zone")]
        [MaxLength(4)]
        public string Address1_UPSZone {
            get {
                return GetAttributeValue<string>("address1_upszone");
            }
            set {
                SetAttributeValue("address1_upszone", value);
            }
        }
        
        /// <summary>
        /// <para>Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.</para>
        /// <para>Display Name: Address 1: UTC Offset</para>
        /// </summary>
        [AttributeLogicalName("address1_utcoffset")]
        [DisplayName("Address 1: UTC Offset")]
        [Range(-1500, 1500)]
        public int? Address1_UTCOffset {
            get {
                return GetAttributeValue<int?>("address1_utcoffset");
            }
            set {
                SetAttributeValue("address1_utcoffset", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for address 2.</para>
        /// <para>Display Name: Address 2: ID</para>
        /// </summary>
        [AttributeLogicalName("address2_addressid")]
        [DisplayName("Address 2: ID")]
        public Guid? Address2_AddressId {
            get {
                return GetAttributeValue<Guid?>("address2_addressid");
            }
            set {
                SetAttributeValue("address2_addressid", value);
            }
        }
        
        /// <summary>
        /// <para>Select the secondary address type.</para>
        /// <para>Display Name: Address 2: Address Type</para>
        /// </summary>
        [AttributeLogicalName("address2_addresstypecode")]
        [DisplayName("Address 2: Address Type")]
        public Account_Address2_AddressTypeCode? Address2_AddressTypeCode {
            get {
                return GetOptionSetValue<Account_Address2_AddressTypeCode>("address2_addresstypecode");
            }
            set {
                SetOptionSetValue("address2_addresstypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the city for the secondary address.</para>
        /// <para>Display Name: Address 2: City</para>
        /// </summary>
        [AttributeLogicalName("address2_city")]
        [DisplayName("Address 2: City")]
        [MaxLength(80)]
        public string Address2_City {
            get {
                return GetAttributeValue<string>("address2_city");
            }
            set {
                SetAttributeValue("address2_city", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the complete secondary address.</para>
        /// <para>Display Name: Address 2</para>
        /// </summary>
        [AttributeLogicalName("address2_composite")]
        [DisplayName("Address 2")]
        public string Address2_Composite {
            get {
                return GetAttributeValue<string>("address2_composite");
            }
        }
        
        /// <summary>
        /// <para>Type the country or region for the secondary address.</para>
        /// <para>Display Name: Address 2: Country/Region</para>
        /// </summary>
        [AttributeLogicalName("address2_country")]
        [DisplayName("Address 2: Country/Region")]
        [MaxLength(80)]
        public string Address2_Country {
            get {
                return GetAttributeValue<string>("address2_country");
            }
            set {
                SetAttributeValue("address2_country", value);
            }
        }
        
        /// <summary>
        /// <para>Type the county for the secondary address.</para>
        /// <para>Display Name: Address 2: County</para>
        /// </summary>
        [AttributeLogicalName("address2_county")]
        [DisplayName("Address 2: County")]
        [MaxLength(50)]
        public string Address2_County {
            get {
                return GetAttributeValue<string>("address2_county");
            }
            set {
                SetAttributeValue("address2_county", value);
            }
        }
        
        /// <summary>
        /// <para>Type the fax number associated with the secondary address.</para>
        /// <para>Display Name: Address 2: Fax</para>
        /// </summary>
        [AttributeLogicalName("address2_fax")]
        [DisplayName("Address 2: Fax")]
        [MaxLength(50)]
        public string Address2_Fax {
            get {
                return GetAttributeValue<string>("address2_fax");
            }
            set {
                SetAttributeValue("address2_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Select the freight terms for the secondary address to make sure shipping orders are processed correctly.</para>
        /// <para>Display Name: Address 2: Freight Terms</para>
        /// </summary>
        [AttributeLogicalName("address2_freighttermscode")]
        [DisplayName("Address 2: Freight Terms")]
        public Account_Address2_FreightTermsCode? Address2_FreightTermsCode {
            get {
                return GetOptionSetValue<Account_Address2_FreightTermsCode>("address2_freighttermscode");
            }
            set {
                SetOptionSetValue("address2_freighttermscode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the latitude value for the secondary address for use in mapping and other applications.</para>
        /// <para>Display Name: Address 2: Latitude</para>
        /// </summary>
        [AttributeLogicalName("address2_latitude")]
        [DisplayName("Address 2: Latitude")]
        public double? Address2_Latitude {
            get {
                return GetAttributeValue<double?>("address2_latitude");
            }
            set {
                SetAttributeValue("address2_latitude", value);
            }
        }
        
        /// <summary>
        /// <para>Type the first line of the secondary address.</para>
        /// <para>Display Name: Address 2: Street 1</para>
        /// </summary>
        [AttributeLogicalName("address2_line1")]
        [DisplayName("Address 2: Street 1")]
        [MaxLength(250)]
        public string Address2_Line1 {
            get {
                return GetAttributeValue<string>("address2_line1");
            }
            set {
                SetAttributeValue("address2_line1", value);
            }
        }
        
        /// <summary>
        /// <para>Type the second line of the secondary address.</para>
        /// <para>Display Name: Address 2: Street 2</para>
        /// </summary>
        [AttributeLogicalName("address2_line2")]
        [DisplayName("Address 2: Street 2")]
        [MaxLength(250)]
        public string Address2_Line2 {
            get {
                return GetAttributeValue<string>("address2_line2");
            }
            set {
                SetAttributeValue("address2_line2", value);
            }
        }
        
        /// <summary>
        /// <para>Type the third line of the secondary address.</para>
        /// <para>Display Name: Address 2: Street 3</para>
        /// </summary>
        [AttributeLogicalName("address2_line3")]
        [DisplayName("Address 2: Street 3")]
        [MaxLength(250)]
        public string Address2_Line3 {
            get {
                return GetAttributeValue<string>("address2_line3");
            }
            set {
                SetAttributeValue("address2_line3", value);
            }
        }
        
        /// <summary>
        /// <para>Type the longitude value for the secondary address for use in mapping and other applications.</para>
        /// <para>Display Name: Address 2: Longitude</para>
        /// </summary>
        [AttributeLogicalName("address2_longitude")]
        [DisplayName("Address 2: Longitude")]
        public double? Address2_Longitude {
            get {
                return GetAttributeValue<double?>("address2_longitude");
            }
            set {
                SetAttributeValue("address2_longitude", value);
            }
        }
        
        /// <summary>
        /// <para>Type a descriptive name for the secondary address, such as Corporate Headquarters.</para>
        /// <para>Display Name: Address 2: Name</para>
        /// </summary>
        [AttributeLogicalName("address2_name")]
        [DisplayName("Address 2: Name")]
        [MaxLength(200)]
        public string Address2_Name {
            get {
                return GetAttributeValue<string>("address2_name");
            }
            set {
                SetAttributeValue("address2_name", value);
            }
        }
        
        /// <summary>
        /// <para>Type the post office box number of the secondary address.</para>
        /// <para>Display Name: Address 2: Post Office Box</para>
        /// </summary>
        [AttributeLogicalName("address2_postofficebox")]
        [DisplayName("Address 2: Post Office Box")]
        [MaxLength(20)]
        public string Address2_PostOfficeBox {
            get {
                return GetAttributeValue<string>("address2_postofficebox");
            }
            set {
                SetAttributeValue("address2_postofficebox", value);
            }
        }
        
        /// <summary>
        /// <para>Type the ZIP Code or postal code for the secondary address.</para>
        /// <para>Display Name: Address 2: ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("address2_postalcode")]
        [DisplayName("Address 2: ZIP/Postal Code")]
        [MaxLength(20)]
        public string Address2_PostalCode {
            get {
                return GetAttributeValue<string>("address2_postalcode");
            }
            set {
                SetAttributeValue("address2_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the name of the main contact at the account's secondary address.</para>
        /// <para>Display Name: Address 2: Primary Contact Name</para>
        /// </summary>
        [AttributeLogicalName("address2_primarycontactname")]
        [DisplayName("Address 2: Primary Contact Name")]
        [MaxLength(100)]
        public string Address2_PrimaryContactName {
            get {
                return GetAttributeValue<string>("address2_primarycontactname");
            }
            set {
                SetAttributeValue("address2_primarycontactname", value);
            }
        }
        
        /// <summary>
        /// <para>Select a shipping method for deliveries sent to this address.</para>
        /// <para>Display Name: Address 2: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("address2_shippingmethodcode")]
        [DisplayName("Address 2: Shipping Method")]
        public Account_Address2_ShippingMethodCode? Address2_ShippingMethodCode {
            get {
                return GetOptionSetValue<Account_Address2_ShippingMethodCode>("address2_shippingmethodcode");
            }
            set {
                SetOptionSetValue("address2_shippingmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the state or province of the secondary address.</para>
        /// <para>Display Name: Address 2: State/Province</para>
        /// </summary>
        [AttributeLogicalName("address2_stateorprovince")]
        [DisplayName("Address 2: State/Province")]
        [MaxLength(50)]
        public string Address2_StateOrProvince {
            get {
                return GetAttributeValue<string>("address2_stateorprovince");
            }
            set {
                SetAttributeValue("address2_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>Type the main phone number associated with the secondary address.</para>
        /// <para>Display Name: Address 2: Telephone 1</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone1")]
        [DisplayName("Address 2: Telephone 1")]
        [MaxLength(50)]
        public string Address2_Telephone1 {
            get {
                return GetAttributeValue<string>("address2_telephone1");
            }
            set {
                SetAttributeValue("address2_telephone1", value);
            }
        }
        
        /// <summary>
        /// <para>Type a second phone number associated with the secondary address.</para>
        /// <para>Display Name: Address 2: Telephone 2</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone2")]
        [DisplayName("Address 2: Telephone 2")]
        [MaxLength(50)]
        public string Address2_Telephone2 {
            get {
                return GetAttributeValue<string>("address2_telephone2");
            }
            set {
                SetAttributeValue("address2_telephone2", value);
            }
        }
        
        /// <summary>
        /// <para>Type a third phone number associated with the secondary address.</para>
        /// <para>Display Name: Address 2: Telephone 3</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone3")]
        [DisplayName("Address 2: Telephone 3")]
        [MaxLength(50)]
        public string Address2_Telephone3 {
            get {
                return GetAttributeValue<string>("address2_telephone3");
            }
            set {
                SetAttributeValue("address2_telephone3", value);
            }
        }
        
        /// <summary>
        /// <para>Type the UPS zone of the secondary address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.</para>
        /// <para>Display Name: Address 2: UPS Zone</para>
        /// </summary>
        [AttributeLogicalName("address2_upszone")]
        [DisplayName("Address 2: UPS Zone")]
        [MaxLength(4)]
        public string Address2_UPSZone {
            get {
                return GetAttributeValue<string>("address2_upszone");
            }
            set {
                SetAttributeValue("address2_upszone", value);
            }
        }
        
        /// <summary>
        /// <para>Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.</para>
        /// <para>Display Name: Address 2: UTC Offset</para>
        /// </summary>
        [AttributeLogicalName("address2_utcoffset")]
        [DisplayName("Address 2: UTC Offset")]
        [Range(-1500, 1500)]
        public int? Address2_UTCOffset {
            get {
                return GetAttributeValue<int?>("address2_utcoffset");
            }
            set {
                SetAttributeValue("address2_utcoffset", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Created By (IP Address)</para>
        /// </summary>
        [AttributeLogicalName("adx_createdbyipaddress")]
        [DisplayName("Created By (IP Address)")]
        [MaxLength(100)]
        public string Adx_CreatedByIPAddress {
            get {
                return GetAttributeValue<string>("adx_createdbyipaddress");
            }
            set {
                SetAttributeValue("adx_createdbyipaddress", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Created By (User Name)</para>
        /// </summary>
        [AttributeLogicalName("adx_createdbyusername")]
        [DisplayName("Created By (User Name)")]
        [MaxLength(100)]
        public string Adx_CreatedByUsername {
            get {
                return GetAttributeValue<string>("adx_createdbyusername");
            }
            set {
                SetAttributeValue("adx_createdbyusername", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Modified By (IP Address)</para>
        /// </summary>
        [AttributeLogicalName("adx_modifiedbyipaddress")]
        [DisplayName("Modified By (IP Address)")]
        [MaxLength(100)]
        public string Adx_ModifiedByIPAddress {
            get {
                return GetAttributeValue<string>("adx_modifiedbyipaddress");
            }
            set {
                SetAttributeValue("adx_modifiedbyipaddress", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Modified By (User Name)</para>
        /// </summary>
        [AttributeLogicalName("adx_modifiedbyusername")]
        [DisplayName("Modified By (User Name)")]
        [MaxLength(100)]
        public string Adx_ModifiedByUsername {
            get {
                return GetAttributeValue<string>("adx_modifiedbyusername");
            }
            set {
                SetAttributeValue("adx_modifiedbyusername", value);
            }
        }
        
        /// <summary>
        /// <para>For system use only.</para>
        /// <para>Display Name: Aging 30</para>
        /// </summary>
        [AttributeLogicalName("aging30")]
        [DisplayName("Aging 30")]
        public decimal? Aging30 {
            get {
                return GetMoneyValue("aging30");
            }
        }
        
        /// <summary>
        /// <para>The base currency equivalent of the aging 30 field.</para>
        /// <para>Display Name: Aging 30 (Base)</para>
        /// </summary>
        [AttributeLogicalName("aging30_base")]
        [DisplayName("Aging 30 (Base)")]
        public decimal? Aging30_Base {
            get {
                return GetMoneyValue("aging30_base");
            }
        }
        
        /// <summary>
        /// <para>For system use only.</para>
        /// <para>Display Name: Aging 60</para>
        /// </summary>
        [AttributeLogicalName("aging60")]
        [DisplayName("Aging 60")]
        public decimal? Aging60 {
            get {
                return GetMoneyValue("aging60");
            }
        }
        
        /// <summary>
        /// <para>The base currency equivalent of the aging 60 field.</para>
        /// <para>Display Name: Aging 60 (Base)</para>
        /// </summary>
        [AttributeLogicalName("aging60_base")]
        [DisplayName("Aging 60 (Base)")]
        public decimal? Aging60_Base {
            get {
                return GetMoneyValue("aging60_base");
            }
        }
        
        /// <summary>
        /// <para>For system use only.</para>
        /// <para>Display Name: Aging 90</para>
        /// </summary>
        [AttributeLogicalName("aging90")]
        [DisplayName("Aging 90")]
        public decimal? Aging90 {
            get {
                return GetMoneyValue("aging90");
            }
        }
        
        /// <summary>
        /// <para>The base currency equivalent of the aging 90 field.</para>
        /// <para>Display Name: Aging 90 (Base)</para>
        /// </summary>
        [AttributeLogicalName("aging90_base")]
        [DisplayName("Aging 90 (Base)")]
        public decimal? Aging90_Base {
            get {
                return GetMoneyValue("aging90_base");
            }
        }
        
        /// <summary>
        /// <para>Select the legal designation or other business type of the account for contracts or reporting purposes.</para>
        /// <para>Display Name: Business Type</para>
        /// </summary>
        [AttributeLogicalName("businesstypecode")]
        [DisplayName("Business Type")]
        public Account_BusinessTypeCode? BusinessTypeCode {
            get {
                return GetOptionSetValue<Account_BusinessTypeCode>("businesstypecode");
            }
            set {
                SetOptionSetValue("businesstypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        [DisplayName("Created By")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Shows the external party who created the record.</para>
        /// <para>Display Name: Created By (External Party)</para>
        /// </summary>
        [AttributeLogicalName("createdbyexternalparty")]
        [DisplayName("Created By (External Party)")]
        public EntityReference CreatedByExternalParty {
            get {
                return GetAttributeValue<EntityReference>("createdbyexternalparty");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        [DisplayName("Created On")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        [DisplayName("Created By (Delegate)")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Type the credit limit of the account. This is a useful reference when you address invoice and accounting issues with the customer.</para>
        /// <para>Display Name: Credit Limit</para>
        /// </summary>
        [AttributeLogicalName("creditlimit")]
        [DisplayName("Credit Limit")]
        public decimal? CreditLimit {
            get {
                return GetMoneyValue("creditlimit");
            }
            set {
                SetMoneyValue("creditlimit", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the credit limit converted to the system's default base currency for reporting purposes.</para>
        /// <para>Display Name: Credit Limit (Base)</para>
        /// </summary>
        [AttributeLogicalName("creditlimit_base")]
        [DisplayName("Credit Limit (Base)")]
        public decimal? CreditLimit_Base {
            get {
                return GetMoneyValue("creditlimit_base");
            }
        }
        
        /// <summary>
        /// <para>Select whether the credit for the account is on hold. This is a useful reference while addressing the invoice and accounting issues with the customer.</para>
        /// <para>Display Name: Credit Hold</para>
        /// </summary>
        [AttributeLogicalName("creditonhold")]
        [DisplayName("Credit Hold")]
        public bool? CreditOnHold {
            get {
                return GetAttributeValue<bool?>("creditonhold");
            }
            set {
                SetAttributeValue("creditonhold", value);
            }
        }
        
        /// <summary>
        /// <para>Select the size category or range of the account for segmentation and reporting purposes.</para>
        /// <para>Display Name: Customer Size</para>
        /// </summary>
        [AttributeLogicalName("customersizecode")]
        [DisplayName("Customer Size")]
        public Account_CustomerSizeCode? CustomerSizeCode {
            get {
                return GetOptionSetValue<Account_CustomerSizeCode>("customersizecode");
            }
            set {
                SetOptionSetValue("customersizecode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the category that best describes the relationship between the account and your organization.</para>
        /// <para>Display Name: Relationship Type</para>
        /// </summary>
        [AttributeLogicalName("customertypecode")]
        [DisplayName("Relationship Type")]
        public Account_CustomerTypeCode? CustomerTypeCode {
            get {
                return GetOptionSetValue<Account_CustomerTypeCode>("customertypecode");
            }
            set {
                SetOptionSetValue("customertypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the default price list associated with the account to make sure the correct product prices for this customer are applied in sales opportunities, quotes, and orders.</para>
        /// <para>Display Name: Price List</para>
        /// </summary>
        [AttributeLogicalName("defaultpricelevelid")]
        [DisplayName("Price List")]
        public EntityReference DefaultPriceLevelId {
            get {
                return GetAttributeValue<EntityReference>("defaultpricelevelid");
            }
            set {
                SetAttributeValue("defaultpricelevelid", value);
            }
        }
        
        /// <summary>
        /// <para>Type additional information to describe the account, such as an excerpt from the company's website.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        [DisplayName("Description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the account allows bulk email sent through campaigns. If Do Not Allow is selected, the account can be added to marketing lists, but is excluded from email.</para>
        /// <para>Display Name: Do not allow Bulk Emails</para>
        /// </summary>
        [AttributeLogicalName("donotbulkemail")]
        [DisplayName("Do not allow Bulk Emails")]
        public bool? DoNotBulkEMail {
            get {
                return GetAttributeValue<bool?>("donotbulkemail");
            }
            set {
                SetAttributeValue("donotbulkemail", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the account allows bulk postal mail sent through marketing campaigns or quick campaigns. If Do Not Allow is selected, the account can be added to marketing lists, but will be excluded from the postal mail.</para>
        /// <para>Display Name: Do not allow Bulk Mails</para>
        /// </summary>
        [AttributeLogicalName("donotbulkpostalmail")]
        [DisplayName("Do not allow Bulk Mails")]
        public bool? DoNotBulkPostalMail {
            get {
                return GetAttributeValue<bool?>("donotbulkpostalmail");
            }
            set {
                SetAttributeValue("donotbulkpostalmail", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the account allows direct email sent from Microsoft Dynamics 365.</para>
        /// <para>Display Name: Do not allow Emails</para>
        /// </summary>
        [AttributeLogicalName("donotemail")]
        [DisplayName("Do not allow Emails")]
        public bool? DoNotEMail {
            get {
                return GetAttributeValue<bool?>("donotemail");
            }
            set {
                SetAttributeValue("donotemail", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the account allows faxes. If Do Not Allow is selected, the account will be excluded from fax activities distributed in marketing campaigns.</para>
        /// <para>Display Name: Do not allow Faxes</para>
        /// </summary>
        [AttributeLogicalName("donotfax")]
        [DisplayName("Do not allow Faxes")]
        public bool? DoNotFax {
            get {
                return GetAttributeValue<bool?>("donotfax");
            }
            set {
                SetAttributeValue("donotfax", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the account allows phone calls. If Do Not Allow is selected, the account will be excluded from phone call activities distributed in marketing campaigns.</para>
        /// <para>Display Name: Do not allow Phone Calls</para>
        /// </summary>
        [AttributeLogicalName("donotphone")]
        [DisplayName("Do not allow Phone Calls")]
        public bool? DoNotPhone {
            get {
                return GetAttributeValue<bool?>("donotphone");
            }
            set {
                SetAttributeValue("donotphone", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the account allows direct mail. If Do Not Allow is selected, the account will be excluded from letter activities distributed in marketing campaigns.</para>
        /// <para>Display Name: Do not allow Mails</para>
        /// </summary>
        [AttributeLogicalName("donotpostalmail")]
        [DisplayName("Do not allow Mails")]
        public bool? DoNotPostalMail {
            get {
                return GetAttributeValue<bool?>("donotpostalmail");
            }
            set {
                SetAttributeValue("donotpostalmail", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the account accepts marketing materials, such as brochures or catalogs.</para>
        /// <para>Display Name: Send Marketing Materials</para>
        /// </summary>
        [AttributeLogicalName("donotsendmm")]
        [DisplayName("Send Marketing Materials")]
        public bool? DoNotSendMM {
            get {
                return GetAttributeValue<bool?>("donotsendmm");
            }
            set {
                SetAttributeValue("donotsendmm", value);
            }
        }
        
        /// <summary>
        /// <para>Type the primary email address for the account.</para>
        /// <para>Display Name: Email</para>
        /// </summary>
        [AttributeLogicalName("emailaddress1")]
        [DisplayName("Email")]
        [MaxLength(100)]
        public string EMailAddress1 {
            get {
                return GetAttributeValue<string>("emailaddress1");
            }
            set {
                SetAttributeValue("emailaddress1", value);
            }
        }
        
        /// <summary>
        /// <para>Type the secondary email address for the account.</para>
        /// <para>Display Name: Email Address 2</para>
        /// </summary>
        [AttributeLogicalName("emailaddress2")]
        [DisplayName("Email Address 2")]
        [MaxLength(100)]
        public string EMailAddress2 {
            get {
                return GetAttributeValue<string>("emailaddress2");
            }
            set {
                SetAttributeValue("emailaddress2", value);
            }
        }
        
        /// <summary>
        /// <para>Type an alternate email address for the account.</para>
        /// <para>Display Name: Email Address 3</para>
        /// </summary>
        [AttributeLogicalName("emailaddress3")]
        [DisplayName("Email Address 3")]
        [MaxLength(100)]
        public string EMailAddress3 {
            get {
                return GetAttributeValue<string>("emailaddress3");
            }
            set {
                SetAttributeValue("emailaddress3", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Entity Image Id</para>
        /// </summary>
        [AttributeLogicalName("entityimageid")]
        [DisplayName("Entity Image Id")]
        public Guid? EntityImageId {
            get {
                return GetAttributeValue<Guid?>("entityimageid");
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        [DisplayName("Exchange Rate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Type the fax number for the account.</para>
        /// <para>Display Name: Fax</para>
        /// </summary>
        [AttributeLogicalName("fax")]
        [DisplayName("Fax")]
        [MaxLength(50)]
        public string Fax {
            get {
                return GetAttributeValue<string>("fax");
            }
            set {
                SetAttributeValue("fax", value);
            }
        }
        
        /// <summary>
        /// <para>Information about whether to allow following email activity like opens, attachment views and link clicks for emails sent to the account.</para>
        /// <para>Display Name: Follow Email Activity</para>
        /// </summary>
        [AttributeLogicalName("followemail")]
        [DisplayName("Follow Email Activity")]
        public bool? FollowEmail {
            get {
                return GetAttributeValue<bool?>("followemail");
            }
            set {
                SetAttributeValue("followemail", value);
            }
        }
        
        /// <summary>
        /// <para>Type the URL for the account's FTP site to enable users to access data and share documents.</para>
        /// <para>Display Name: FTP Site</para>
        /// </summary>
        [AttributeLogicalName("ftpsiteurl")]
        [DisplayName("FTP Site")]
        [MaxLength(200)]
        public string FtpSiteURL {
            get {
                return GetAttributeValue<string>("ftpsiteurl");
            }
            set {
                SetAttributeValue("ftpsiteurl", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        [DisplayName("Import Sequence Number")]
        [Range(-2147483648, 2147483647)]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Select the account's primary industry for use in marketing segmentation and demographic analysis.</para>
        /// <para>Display Name: Industry</para>
        /// </summary>
        [AttributeLogicalName("industrycode")]
        [DisplayName("Industry")]
        public Account_IndustryCode? IndustryCode {
            get {
                return GetOptionSetValue<Account_IndustryCode>("industrycode");
            }
            set {
                SetOptionSetValue("industrycode", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the date and time stamp of the last on hold time.</para>
        /// <para>Display Name: Last On Hold Time</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        [DisplayName("Last On Hold Time")]
        public DateTime? LastOnHoldTime {
            get {
                return GetAttributeValue<DateTime?>("lastonholdtime");
            }
            set {
                SetAttributeValue("lastonholdtime", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date when the account was last included in a marketing campaign or quick campaign.</para>
        /// <para>Display Name: Last Date Included in Campaign</para>
        /// </summary>
        [AttributeLogicalName("lastusedincampaign")]
        [DisplayName("Last Date Included in Campaign")]
        public DateTime? LastUsedInCampaign {
            get {
                return GetAttributeValue<DateTime?>("lastusedincampaign");
            }
            set {
                SetAttributeValue("lastusedincampaign", value);
            }
        }
        
        /// <summary>
        /// <para>Type the market capitalization of the account to identify the company's equity, used as an indicator in financial performance analysis.</para>
        /// <para>Display Name: Market Capitalization</para>
        /// </summary>
        [AttributeLogicalName("marketcap")]
        [DisplayName("Market Capitalization")]
        public decimal? MarketCap {
            get {
                return GetMoneyValue("marketcap");
            }
            set {
                SetMoneyValue("marketcap", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the market capitalization converted to the system's default base currency.</para>
        /// <para>Display Name: Market Capitalization (Base)</para>
        /// </summary>
        [AttributeLogicalName("marketcap_base")]
        [DisplayName("Market Capitalization (Base)")]
        public decimal? MarketCap_Base {
            get {
                return GetMoneyValue("marketcap_base");
            }
        }
        
        /// <summary>
        /// <para>Whether is only for marketing</para>
        /// <para>Display Name: Marketing Only</para>
        /// </summary>
        [AttributeLogicalName("marketingonly")]
        [DisplayName("Marketing Only")]
        public bool? MarketingOnly {
            get {
                return GetAttributeValue<bool?>("marketingonly");
            }
            set {
                SetAttributeValue("marketingonly", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the master account that the account was merged with.</para>
        /// <para>Display Name: Master ID</para>
        /// </summary>
        [AttributeLogicalName("masterid")]
        [DisplayName("Master ID")]
        public EntityReference MasterId {
            get {
                return GetAttributeValue<EntityReference>("masterid");
            }
        }
        
        /// <summary>
        /// <para>Shows whether the account has been merged with another account.</para>
        /// <para>Display Name: Merged</para>
        /// </summary>
        [AttributeLogicalName("merged")]
        [DisplayName("Merged")]
        public bool? Merged {
            get {
                return GetAttributeValue<bool?>("merged");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        [DisplayName("Modified By")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Shows the external party who modified the record.</para>
        /// <para>Display Name: Modified By (External Party)</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyexternalparty")]
        [DisplayName("Modified By (External Party)")]
        public EntityReference ModifiedByExternalParty {
            get {
                return GetAttributeValue<EntityReference>("modifiedbyexternalparty");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        [DisplayName("Modified On")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        [DisplayName("Modified By (Delegate)")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Type the company or business name.</para>
        /// <para>Display Name: Account Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        [DisplayName("Account Name")]
        [MaxLength(160)]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Type the number of employees that work at the account for use in marketing segmentation and demographic analysis.</para>
        /// <para>Display Name: Number of Employees</para>
        /// </summary>
        [AttributeLogicalName("numberofemployees")]
        [DisplayName("Number of Employees")]
        [Range(0, 1000000000)]
        public int? NumberOfEmployees {
            get {
                return GetAttributeValue<int?>("numberofemployees");
            }
            set {
                SetAttributeValue("numberofemployees", value);
            }
        }
        
        /// <summary>
        /// <para>Shows how long, in minutes, that the record was on hold.</para>
        /// <para>Display Name: On Hold Time (Minutes)</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        [DisplayName("On Hold Time (Minutes)")]
        [Range(-2147483648, 2147483647)]
        public int? OnHoldTime {
            get {
                return GetAttributeValue<int?>("onholdtime");
            }
        }
        
        /// <summary>
        /// <para>Number of open opportunities against an account and its child accounts.</para>
        /// <para>Display Name: Open Deals</para>
        /// </summary>
        [AttributeLogicalName("opendeals")]
        [DisplayName("Open Deals")]
        [Range(-2147483648, 2147483647)]
        public int? OpenDeals {
            get {
                return GetAttributeValue<int?>("opendeals");
            }
        }
        
        /// <summary>
        /// <para>Last Updated time of rollup field Open Deals.</para>
        /// <para>Display Name: Open Deals (Last Updated On)</para>
        /// </summary>
        [AttributeLogicalName("opendeals_date")]
        [DisplayName("Open Deals (Last Updated On)")]
        public DateTime? OpenDeals_Date {
            get {
                return GetAttributeValue<DateTime?>("opendeals_date");
            }
        }
        
        /// <summary>
        /// <para>State of rollup field Open Deals.</para>
        /// <para>Display Name: Open Deals (State)</para>
        /// </summary>
        [AttributeLogicalName("opendeals_state")]
        [DisplayName("Open Deals (State)")]
        [Range(-2147483648, 2147483647)]
        public int? OpenDeals_State {
            get {
                return GetAttributeValue<int?>("opendeals_state");
            }
        }
        
        /// <summary>
        /// <para>Sum of open revenue against an account and its child accounts.</para>
        /// <para>Display Name: Open Revenue</para>
        /// </summary>
        [AttributeLogicalName("openrevenue")]
        [DisplayName("Open Revenue")]
        public decimal? OpenRevenue {
            get {
                return GetMoneyValue("openrevenue");
            }
        }
        
        /// <summary>
        /// <para>Value of the Open Revenue in base currency.</para>
        /// <para>Display Name: Open Revenue (Base)</para>
        /// </summary>
        [AttributeLogicalName("openrevenue_base")]
        [DisplayName("Open Revenue (Base)")]
        public decimal? OpenRevenue_Base {
            get {
                return GetMoneyValue("openrevenue_base");
            }
        }
        
        /// <summary>
        /// <para>Last Updated time of rollup field Open Revenue.</para>
        /// <para>Display Name: Open Revenue (Last Updated On)</para>
        /// </summary>
        [AttributeLogicalName("openrevenue_date")]
        [DisplayName("Open Revenue (Last Updated On)")]
        public DateTime? OpenRevenue_Date {
            get {
                return GetAttributeValue<DateTime?>("openrevenue_date");
            }
        }
        
        /// <summary>
        /// <para>State of rollup field Open Revenue.</para>
        /// <para>Display Name: Open Revenue (State)</para>
        /// </summary>
        [AttributeLogicalName("openrevenue_state")]
        [DisplayName("Open Revenue (State)")]
        [Range(-2147483648, 2147483647)]
        public int? OpenRevenue_State {
            get {
                return GetAttributeValue<int?>("openrevenue_state");
            }
        }
        
        /// <summary>
        /// <para>Shows the lead that the account was created from if the account was created by converting a lead in Microsoft Dynamics 365. This is used to relate the account to data on the originating lead for use in reporting and analytics.</para>
        /// <para>Display Name: Originating Lead</para>
        /// </summary>
        [AttributeLogicalName("originatingleadid")]
        [DisplayName("Originating Lead")]
        public EntityReference OriginatingLeadId {
            get {
                return GetAttributeValue<EntityReference>("originatingleadid");
            }
            set {
                SetAttributeValue("originatingleadid", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        [DisplayName("Record Created On")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        [DisplayName("Owner")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Select the account's ownership structure, such as public or private.</para>
        /// <para>Display Name: Ownership</para>
        /// </summary>
        [AttributeLogicalName("ownershipcode")]
        [DisplayName("Ownership")]
        public Account_OwnershipCode? OwnershipCode {
            get {
                return GetOptionSetValue<Account_OwnershipCode>("ownershipcode");
            }
            set {
                SetOptionSetValue("ownershipcode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the business unit that the record owner belongs to.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        [DisplayName("Owning Business Unit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team who owns the account.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        [DisplayName("Owning Team")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who owns the account.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        [DisplayName("Owning User")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Choose the parent account associated with this account to show parent and child businesses in reporting and analytics.</para>
        /// <para>Display Name: Parent Account</para>
        /// </summary>
        [AttributeLogicalName("parentaccountid")]
        [DisplayName("Parent Account")]
        public EntityReference ParentAccountId {
            get {
                return GetAttributeValue<EntityReference>("parentaccountid");
            }
            set {
                SetAttributeValue("parentaccountid", value);
            }
        }
        
        /// <summary>
        /// <para>For system use only. Legacy Microsoft Dynamics CRM 3.0 workflow data.</para>
        /// <para>Display Name: Participates in Workflow</para>
        /// </summary>
        [AttributeLogicalName("participatesinworkflow")]
        [DisplayName("Participates in Workflow")]
        public bool? ParticipatesInWorkflow {
            get {
                return GetAttributeValue<bool?>("participatesinworkflow");
            }
            set {
                SetAttributeValue("participatesinworkflow", value);
            }
        }
        
        /// <summary>
        /// <para>Select the payment terms to indicate when the customer needs to pay the total amount.</para>
        /// <para>Display Name: Payment Terms</para>
        /// </summary>
        [AttributeLogicalName("paymenttermscode")]
        [DisplayName("Payment Terms")]
        public Account_PaymentTermsCode? PaymentTermsCode {
            get {
                return GetOptionSetValue<Account_PaymentTermsCode>("paymenttermscode");
            }
            set {
                SetOptionSetValue("paymenttermscode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the preferred day of the week for service appointments.</para>
        /// <para>Display Name: Preferred Day</para>
        /// </summary>
        [AttributeLogicalName("preferredappointmentdaycode")]
        [DisplayName("Preferred Day")]
        public Account_PreferredAppointmentDayCode? PreferredAppointmentDayCode {
            get {
                return GetOptionSetValue<Account_PreferredAppointmentDayCode>("preferredappointmentdaycode");
            }
            set {
                SetOptionSetValue("preferredappointmentdaycode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the preferred time of day for service appointments.</para>
        /// <para>Display Name: Preferred Time</para>
        /// </summary>
        [AttributeLogicalName("preferredappointmenttimecode")]
        [DisplayName("Preferred Time")]
        public Account_PreferredAppointmentTimeCode? PreferredAppointmentTimeCode {
            get {
                return GetOptionSetValue<Account_PreferredAppointmentTimeCode>("preferredappointmenttimecode");
            }
            set {
                SetOptionSetValue("preferredappointmenttimecode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the preferred method of contact.</para>
        /// <para>Display Name: Preferred Method of Contact</para>
        /// </summary>
        [AttributeLogicalName("preferredcontactmethodcode")]
        [DisplayName("Preferred Method of Contact")]
        public Account_PreferredContactMethodCode? PreferredContactMethodCode {
            get {
                return GetOptionSetValue<Account_PreferredContactMethodCode>("preferredcontactmethodcode");
            }
            set {
                SetOptionSetValue("preferredcontactmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the account's preferred service facility or equipment to make sure services are scheduled correctly for the customer.</para>
        /// <para>Display Name: Preferred Facility/Equipment</para>
        /// </summary>
        [AttributeLogicalName("preferredequipmentid")]
        [DisplayName("Preferred Facility/Equipment")]
        public EntityReference PreferredEquipmentId {
            get {
                return GetAttributeValue<EntityReference>("preferredequipmentid");
            }
            set {
                SetAttributeValue("preferredequipmentid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the account's preferred service for reference when you schedule service activities.</para>
        /// <para>Display Name: Preferred Service</para>
        /// </summary>
        [AttributeLogicalName("preferredserviceid")]
        [DisplayName("Preferred Service")]
        public EntityReference PreferredServiceId {
            get {
                return GetAttributeValue<EntityReference>("preferredserviceid");
            }
            set {
                SetAttributeValue("preferredserviceid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the preferred service representative for reference when you schedule service activities for the account.</para>
        /// <para>Display Name: Preferred User</para>
        /// </summary>
        [AttributeLogicalName("preferredsystemuserid")]
        [DisplayName("Preferred User")]
        public EntityReference PreferredSystemUserId {
            get {
                return GetAttributeValue<EntityReference>("preferredsystemuserid");
            }
            set {
                SetAttributeValue("preferredsystemuserid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the primary contact for the account to provide quick access to contact details.</para>
        /// <para>Display Name: Primary Contact</para>
        /// </summary>
        [AttributeLogicalName("primarycontactid")]
        [DisplayName("Primary Contact")]
        public EntityReference PrimaryContactId {
            get {
                return GetAttributeValue<EntityReference>("primarycontactid");
            }
            set {
                SetAttributeValue("primarycontactid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the company or business name.</para>
        /// <para>Display Name: Account Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        [DisplayName("Account Name")]
        [MaxLength(160)]
        public string PrimaryNameField {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Primary Satori ID for Account</para>
        /// <para>Display Name: Primary Satori ID</para>
        /// </summary>
        [AttributeLogicalName("primarysatoriid")]
        [DisplayName("Primary Satori ID")]
        [MaxLength(200)]
        public string PrimarySatoriId {
            get {
                return GetAttributeValue<string>("primarysatoriid");
            }
            set {
                SetAttributeValue("primarysatoriid", value);
            }
        }
        
        /// <summary>
        /// <para>Primary Twitter ID for Account</para>
        /// <para>Display Name: Primary Twitter ID</para>
        /// </summary>
        [AttributeLogicalName("primarytwitterid")]
        [DisplayName("Primary Twitter ID")]
        [MaxLength(128)]
        public string PrimaryTwitterId {
            get {
                return GetAttributeValue<string>("primarytwitterid");
            }
            set {
                SetAttributeValue("primarytwitterid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        [DisplayName("Process")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the annual revenue for the account, used as an indicator in financial performance analysis.</para>
        /// <para>Display Name: Annual Revenue</para>
        /// </summary>
        [AttributeLogicalName("revenue")]
        [DisplayName("Annual Revenue")]
        public decimal? Revenue {
            get {
                return GetMoneyValue("revenue");
            }
            set {
                SetMoneyValue("revenue", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the annual revenue converted to the system's default base currency. The calculations use the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Annual Revenue (Base)</para>
        /// </summary>
        [AttributeLogicalName("revenue_base")]
        [DisplayName("Annual Revenue (Base)")]
        public decimal? Revenue_Base {
            get {
                return GetMoneyValue("revenue_base");
            }
        }
        
        /// <summary>
        /// <para>Type the Standard Industrial Classification (SIC) code that indicates the account's primary industry of business, for use in marketing segmentation and demographic analysis.</para>
        /// <para>Display Name: SIC Code</para>
        /// </summary>
        [AttributeLogicalName("sic")]
        [DisplayName("SIC Code")]
        [MaxLength(20)]
        public string SIC {
            get {
                return GetAttributeValue<string>("sic");
            }
            set {
                SetAttributeValue("sic", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the service level agreement (SLA) that you want to apply to the Account record.</para>
        /// <para>Display Name: SLA</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        [DisplayName("SLA")]
        public EntityReference SLAId {
            get {
                return GetAttributeValue<EntityReference>("slaid");
            }
            set {
                SetAttributeValue("slaid", value);
            }
        }
        
        /// <summary>
        /// <para>Last SLA that was applied to this case. This field is for internal use only.</para>
        /// <para>Display Name: Last SLA applied</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        [DisplayName("Last SLA applied")]
        public EntityReference SLAInvokedId {
            get {
                return GetAttributeValue<EntityReference>("slainvokedid");
            }
        }
        
        /// <summary>
        /// <para>Type the number of shares available to the public for the account. This number is used as an indicator in financial performance analysis.</para>
        /// <para>Display Name: Shares Outstanding</para>
        /// </summary>
        [AttributeLogicalName("sharesoutstanding")]
        [DisplayName("Shares Outstanding")]
        [Range(0, 1000000000)]
        public int? SharesOutstanding {
            get {
                return GetAttributeValue<int?>("sharesoutstanding");
            }
            set {
                SetAttributeValue("sharesoutstanding", value);
            }
        }
        
        /// <summary>
        /// <para>Select a shipping method for deliveries sent to the account's address to designate the preferred carrier or other delivery option.</para>
        /// <para>Display Name: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("shippingmethodcode")]
        [DisplayName("Shipping Method")]
        public Account_ShippingMethodCode? ShippingMethodCode {
            get {
                return GetOptionSetValue<Account_ShippingMethodCode>("shippingmethodcode");
            }
            set {
                SetOptionSetValue("shippingmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Display Name: (Deprecated) Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        [DisplayName("(Deprecated) Process Stage")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the account is active or inactive. Inactive accounts are read-only and can't be edited unless they are reactivated.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        [DisplayName("Status")]
        public AccountState? StateCode {
            get {
                return GetOptionSetValue<AccountState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the account's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        [DisplayName("Status Reason")]
        public Account_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<Account_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the stock exchange at which the account is listed to track their stock and financial performance of the company.</para>
        /// <para>Display Name: Stock Exchange</para>
        /// </summary>
        [AttributeLogicalName("stockexchange")]
        [DisplayName("Stock Exchange")]
        [MaxLength(20)]
        public string StockExchange {
            get {
                return GetAttributeValue<string>("stockexchange");
            }
            set {
                SetAttributeValue("stockexchange", value);
            }
        }
        
        /// <summary>
        /// <para>Number of users or conversations followed the record</para>
        /// <para>Display Name: TeamsFollowed</para>
        /// </summary>
        [AttributeLogicalName("teamsfollowed")]
        [DisplayName("TeamsFollowed")]
        [Range(-2147483648, 2147483647)]
        public int? TeamsFollowed {
            get {
                return GetAttributeValue<int?>("teamsfollowed");
            }
            set {
                SetAttributeValue("teamsfollowed", value);
            }
        }
        
        /// <summary>
        /// <para>Type the main phone number for this account.</para>
        /// <para>Display Name: Main Phone</para>
        /// </summary>
        [AttributeLogicalName("telephone1")]
        [DisplayName("Main Phone")]
        [MaxLength(50)]
        public string Telephone1 {
            get {
                return GetAttributeValue<string>("telephone1");
            }
            set {
                SetAttributeValue("telephone1", value);
            }
        }
        
        /// <summary>
        /// <para>Type a second phone number for this account.</para>
        /// <para>Display Name: Other Phone</para>
        /// </summary>
        [AttributeLogicalName("telephone2")]
        [DisplayName("Other Phone")]
        [MaxLength(50)]
        public string Telephone2 {
            get {
                return GetAttributeValue<string>("telephone2");
            }
            set {
                SetAttributeValue("telephone2", value);
            }
        }
        
        /// <summary>
        /// <para>Type a third phone number for this account.</para>
        /// <para>Display Name: Telephone 3</para>
        /// </summary>
        [AttributeLogicalName("telephone3")]
        [DisplayName("Telephone 3")]
        [MaxLength(50)]
        public string Telephone3 {
            get {
                return GetAttributeValue<string>("telephone3");
            }
            set {
                SetAttributeValue("telephone3", value);
            }
        }
        
        /// <summary>
        /// <para>Select a region or territory for the account for use in segmentation and analysis.</para>
        /// <para>Display Name: Territory Code</para>
        /// </summary>
        [AttributeLogicalName("territorycode")]
        [DisplayName("Territory Code")]
        public Account_TerritoryCode? TerritoryCode {
            get {
                return GetOptionSetValue<Account_TerritoryCode>("territorycode");
            }
            set {
                SetOptionSetValue("territorycode", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the sales region or territory for the account to make sure the account is assigned to the correct representative and for use in segmentation and analysis.</para>
        /// <para>Display Name: Territory</para>
        /// </summary>
        [AttributeLogicalName("territoryid")]
        [DisplayName("Territory")]
        public EntityReference TerritoryId {
            get {
                return GetAttributeValue<EntityReference>("territoryid");
            }
            set {
                SetAttributeValue("territoryid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the stock exchange symbol for the account to track financial performance of the company. You can click the code entered in this field to access the latest trading information from MSN Money.</para>
        /// <para>Display Name: Ticker Symbol</para>
        /// </summary>
        [AttributeLogicalName("tickersymbol")]
        [DisplayName("Ticker Symbol")]
        [MaxLength(10)]
        public string TickerSymbol {
            get {
                return GetAttributeValue<string>("tickersymbol");
            }
            set {
                SetAttributeValue("tickersymbol", value);
            }
        }
        
        /// <summary>
        /// <para>Total time spent for emails (read and write) and meetings by me in relation to account record.</para>
        /// <para>Display Name: Time Spent by me</para>
        /// </summary>
        [AttributeLogicalName("timespentbymeonemailandmeetings")]
        [DisplayName("Time Spent by me")]
        [MaxLength(1250)]
        public string TimeSpentByMeOnEmailAndMeetings {
            get {
                return GetAttributeValue<string>("timespentbymeonemailandmeetings");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        [DisplayName("Time Zone Rule Version Number")]
        [Range(-1, 2147483647)]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        [DisplayName("Currency")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: (Deprecated) Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        [DisplayName("(Deprecated) Traversed Path")]
        [MaxLength(1250)]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        [DisplayName("UTC Conversion Time Zone Code")]
        [Range(-1, 2147483647)]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Version number of the account.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        [DisplayName("Version Number")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Type the account's website URL to get quick details about the company profile.</para>
        /// <para>Display Name: Website</para>
        /// </summary>
        [AttributeLogicalName("websiteurl")]
        [DisplayName("Website")]
        [MaxLength(200)]
        public string WebSiteURL {
            get {
                return GetAttributeValue<string>("websiteurl");
            }
            set {
                SetAttributeValue("websiteurl", value);
            }
        }
        
        /// <summary>
        /// <para>Type the phonetic spelling of the company name, if specified in Japanese, to make sure the name is pronounced correctly in phone calls and other communications.</para>
        /// <para>Display Name: Yomi Account Name</para>
        /// </summary>
        [AttributeLogicalName("yominame")]
        [DisplayName("Yomi Account Name")]
        [MaxLength(160)]
        public string YomiName {
            get {
                return GetAttributeValue<string>("yominame");
            }
            set {
                SetAttributeValue("yominame", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for Account associated with Account.</para>
        /// <para>Display Name: Managing Partner</para>
        /// </summary>
        [AttributeLogicalName("msa_managingpartnerid")]
        [DisplayName("Managing Partner")]
        public EntityReference msa_managingpartnerid {
            get {
                return GetAttributeValue<EntityReference>("msa_managingpartnerid");
            }
            set {
                SetAttributeValue("msa_managingpartnerid", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates the primary time zone that the client works on.</para>
        /// <para>Display Name: Primary Time Zone</para>
        /// </summary>
        [AttributeLogicalName("msdyn_primarytimezone")]
        [DisplayName("Primary Time Zone")]
        [Range(-1500, 1500)]
        public int? msdyn_PrimaryTimeZone {
            get {
                return GetAttributeValue<int?>("msdyn_primarytimezone");
            }
            set {
                SetAttributeValue("msdyn_primarytimezone", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: KPI</para>
        /// </summary>
        [AttributeLogicalName("msdyn_accountkpiid")]
        [DisplayName("KPI")]
        public EntityReference msdyn_accountkpiid {
            get {
                return GetAttributeValue<EntityReference>("msdyn_accountkpiid");
            }
            set {
                SetAttributeValue("msdyn_accountkpiid", value);
            }
        }
        
        /// <summary>
        /// <para>Describes whether account is opted out or not</para>
        /// <para>Display Name: GDPR Optout</para>
        /// </summary>
        [AttributeLogicalName("msdyn_gdproptout")]
        [DisplayName("GDPR Optout")]
        public bool? msdyn_gdproptout {
            get {
                return GetAttributeValue<bool?>("msdyn_gdproptout");
            }
            set {
                SetAttributeValue("msdyn_gdproptout", value);
            }
        }
        
        /// <summary>
        /// <para>Sales Acceleration Insights ID</para>
        /// <para>Display Name: Sales Acceleration Insights ID</para>
        /// </summary>
        [AttributeLogicalName("msdyn_salesaccelerationinsightid")]
        [DisplayName("Sales Acceleration Insights ID")]
        public EntityReference msdyn_salesaccelerationinsightid {
            get {
                return GetAttributeValue<EntityReference>("msdyn_salesaccelerationinsightid");
            }
            set {
                SetAttributeValue("msdyn_salesaccelerationinsightid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for Segment associated with account.</para>
        /// <para>Display Name: Segment Id</para>
        /// </summary>
        [AttributeLogicalName("msdyn_segmentid")]
        [DisplayName("Segment Id")]
        public EntityReference msdyn_segmentid {
            get {
                return GetAttributeValue<EntityReference>("msdyn_segmentid");
            }
            set {
                SetAttributeValue("msdyn_segmentid", value);
            }
        }
        
        [RelationshipSchemaName("Account_Annotation")]
        public IEnumerable<Annotation> Account_Annotation {
            get {
                return GetRelatedEntities<Annotation>("Account_Annotation", null);
            }
            set {
                SetRelatedEntities("Account_Annotation", null, value);
            }
        }
        
        [RelationshipSchemaName("Account_Tasks")]
        public IEnumerable<Task> Account_Tasks {
            get {
                return GetRelatedEntities<Task>("Account_Tasks", null);
            }
            set {
                SetRelatedEntities("Account_Tasks", null, value);
            }
        }
        
        [RelationshipSchemaName("account_master_account", EntityRole.Referenced)]
        public IEnumerable<Account> Referencedaccount_master_account {
            get {
                return GetRelatedEntities<Account>("account_master_account", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("account_master_account", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("account_parent_account", EntityRole.Referenced)]
        public IEnumerable<Account> Referencedaccount_parent_account {
            get {
                return GetRelatedEntities<Account>("account_parent_account", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("account_parent_account", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("msa_account_managingpartner", EntityRole.Referenced)]
        public IEnumerable<Account> Referencedmsa_account_managingpartner {
            get {
                return GetRelatedEntities<Account>("msa_account_managingpartner", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("msa_account_managingpartner", EntityRole.Referenced, value);
            }
        }
        
        [AttributeLogicalName("masterid")]
        [RelationshipSchemaName("account_master_account", EntityRole.Referencing)]
        public Account Referencingaccount_master_account {
            get {
                return GetRelatedEntity<Account>("account_master_account", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("account_master_account", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("parentaccountid")]
        [RelationshipSchemaName("account_parent_account", EntityRole.Referencing)]
        public Account Referencingaccount_parent_account {
            get {
                return GetRelatedEntity<Account>("account_parent_account", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("account_parent_account", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("msa_managingpartnerid")]
        [RelationshipSchemaName("msa_account_managingpartner", EntityRole.Referencing)]
        public Account Referencingmsa_account_managingpartner {
            get {
                return GetRelatedEntity<Account>("msa_account_managingpartner", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("msa_account_managingpartner", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("primarycontactid")]
        [RelationshipSchemaName("account_primary_contact")]
        public Contact account_primary_contact {
            get {
                return GetRelatedEntity<Contact>("account_primary_contact", null);
            }
            set {
                SetRelatedEntity("account_primary_contact", null, value);
            }
        }
        
        [RelationshipSchemaName("contact_customer_accounts")]
        public IEnumerable<Contact> contact_customer_accounts {
            get {
                return GetRelatedEntities<Contact>("contact_customer_accounts", null);
            }
            set {
                SetRelatedEntities("contact_customer_accounts", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_accountbase_createdby")]
        public SystemUser lk_accountbase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_accountbase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_accountbase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_accountbase_createdonbehalfby")]
        public SystemUser lk_accountbase_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_accountbase_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_accountbase_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_accountbase_modifiedby")]
        public SystemUser lk_accountbase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_accountbase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_accountbase_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_accountbase_modifiedonbehalfby")]
        public SystemUser lk_accountbase_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_accountbase_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_accountbase_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("msa_contact_managingpartner")]
        public IEnumerable<Contact> msa_contact_managingpartner {
            get {
                return GetRelatedEntities<Contact>("msa_contact_managingpartner", null);
            }
            set {
                SetRelatedEntities("msa_contact_managingpartner", null, value);
            }
        }
        
        [AttributeLogicalName("preferredsystemuserid")]
        [RelationshipSchemaName("system_user_accounts")]
        public SystemUser system_user_accounts {
            get {
                return GetRelatedEntity<SystemUser>("system_user_accounts", null);
            }
            set {
                SetRelatedEntity("system_user_accounts", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_accounts")]
        public SystemUser user_accounts {
            get {
                return GetRelatedEntity<SystemUser>("user_accounts", null);
            }
            set {
                SetRelatedEntity("user_accounts", null, value);
            }
        }
        
        public static Account Retrieve(IOrganizationService service, Guid id, params Expression<Func<Account,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Note that is attached to one or more objects, including other notes.</para>
    /// <para>Display Name: Note</para>
    /// </summary>
    [EntityLogicalName("annotation")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Annotation : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "annotation";
        
        public const int EntityTypeCode = 5;
        
        public Annotation() : 
                base(EntityLogicalName) {
        }
        
        public Annotation(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("subject");
            }
        }
        
        [AttributeLogicalName("annotationid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("annotationid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the note.</para>
        /// <para>Display Name: Note</para>
        /// </summary>
        [AttributeLogicalName("annotationid")]
        [DisplayName("Note")]
        public Guid? AnnotationId {
            get {
                return GetAttributeValue<Guid?>("annotationid");
            }
            set {
                SetId("annotationid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the note.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        [DisplayName("Created By")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the note was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        [DisplayName("Created On")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the annotation.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        [DisplayName("Created By (Delegate)")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Contents of the note's attachment.</para>
        /// <para>Display Name: Document</para>
        /// </summary>
        [AttributeLogicalName("documentbody")]
        [DisplayName("Document")]
        [MaxLength(1073741823)]
        public string DocumentBody {
            get {
                return GetAttributeValue<string>("documentbody");
            }
            set {
                SetAttributeValue("documentbody", value);
            }
        }
        
        /// <summary>
        /// <para>File name of the note.</para>
        /// <para>Display Name: File Name</para>
        /// </summary>
        [AttributeLogicalName("filename")]
        [DisplayName("File Name")]
        [MaxLength(255)]
        public string FileName {
            get {
                return GetAttributeValue<string>("filename");
            }
            set {
                SetAttributeValue("filename", value);
            }
        }
        
        /// <summary>
        /// <para>File size of the note.</para>
        /// <para>Display Name: File Size (Bytes)</para>
        /// </summary>
        [AttributeLogicalName("filesize")]
        [DisplayName("File Size (Bytes)")]
        [Range(0, 1000000000)]
        public int? FileSize {
            get {
                return GetAttributeValue<int?>("filesize");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        [DisplayName("Import Sequence Number")]
        [Range(-2147483648, 2147483647)]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Specifies whether the note is an attachment.</para>
        /// <para>Display Name: Is Document</para>
        /// </summary>
        [AttributeLogicalName("isdocument")]
        [DisplayName("Is Document")]
        public bool? IsDocument {
            get {
                return GetAttributeValue<bool?>("isdocument");
            }
            set {
                SetAttributeValue("isdocument", value);
            }
        }
        
        /// <summary>
        /// <para>Language identifier for the note.</para>
        /// <para>Display Name: Language ID</para>
        /// </summary>
        [AttributeLogicalName("langid")]
        [DisplayName("Language ID")]
        [MaxLength(2)]
        public string LangId {
            get {
                return GetAttributeValue<string>("langid");
            }
            set {
                SetAttributeValue("langid", value);
            }
        }
        
        /// <summary>
        /// <para>MIME type of the note's attachment.</para>
        /// <para>Display Name: Mime Type</para>
        /// </summary>
        [AttributeLogicalName("mimetype")]
        [DisplayName("Mime Type")]
        [MaxLength(256)]
        public string MimeType {
            get {
                return GetAttributeValue<string>("mimetype");
            }
            set {
                SetAttributeValue("mimetype", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who last modified the note.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        [DisplayName("Modified By")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the note was last modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        [DisplayName("Modified On")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who last modified the annotation.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        [DisplayName("Modified By (Delegate)")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Text of the note.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("notetext")]
        [DisplayName("Description")]
        public string NoteText {
            get {
                return GetAttributeValue<string>("notetext");
            }
            set {
                SetAttributeValue("notetext", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the object with which the note is associated.</para>
        /// <para>Display Name: Regarding</para>
        /// </summary>
        [AttributeLogicalName("objectid")]
        [DisplayName("Regarding")]
        public EntityReference ObjectId {
            get {
                return GetAttributeValue<EntityReference>("objectid");
            }
            set {
                SetAttributeValue("objectid", value);
            }
        }
        
        /// <summary>
        /// <para>Type of entity with which the note is associated.</para>
        /// <para>Display Name: Object Type </para>
        /// </summary>
        [AttributeLogicalName("objecttypecode")]
        [DisplayName("Object Type ")]
        public string ObjectTypeCode {
            get {
                return GetAttributeValue<string>("objecttypecode");
            }
            set {
                SetAttributeValue("objecttypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        [DisplayName("Record Created On")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the note.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        [DisplayName("Owner")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit that owns the note.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        [DisplayName("Owning Business Unit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team who owns the note.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        [DisplayName("Owning Team")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who owns the note.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        [DisplayName("Owning User")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Prefix of the file pointer in blob storage.</para>
        /// <para>Display Name: Prefix</para>
        /// </summary>
        [AttributeLogicalName("prefix")]
        [DisplayName("Prefix")]
        [MaxLength(10)]
        public string Prefix {
            get {
                return GetAttributeValue<string>("prefix");
            }
        }
        
        /// <summary>
        /// <para>Subject associated with the note.</para>
        /// <para>Display Name: Title</para>
        /// </summary>
        [AttributeLogicalName("subject")]
        [DisplayName("Title")]
        [MaxLength(500)]
        public string PrimaryNameField {
            get {
                return GetAttributeValue<string>("subject");
            }
            set {
                SetAttributeValue("subject", value);
            }
        }
        
        /// <summary>
        /// <para>workflow step id associated with the note.</para>
        /// <para>Display Name: Step Id</para>
        /// </summary>
        [AttributeLogicalName("stepid")]
        [DisplayName("Step Id")]
        [MaxLength(32)]
        public string StepId {
            get {
                return GetAttributeValue<string>("stepid");
            }
            set {
                SetAttributeValue("stepid", value);
            }
        }
        
        /// <summary>
        /// <para>Subject associated with the note.</para>
        /// <para>Display Name: Title</para>
        /// </summary>
        [AttributeLogicalName("subject")]
        [DisplayName("Title")]
        [MaxLength(500)]
        public string Subject {
            get {
                return GetAttributeValue<string>("subject");
            }
            set {
                SetAttributeValue("subject", value);
            }
        }
        
        /// <summary>
        /// <para>Version number of the note.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        [DisplayName("Version Number")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Determines whether annotation record was autonomously created on conversation wrap up for the linked case record.</para>
        /// <para>Display Name: Is autonomously created</para>
        /// </summary>
        [AttributeLogicalName("isautonomouslycreated")]
        [DisplayName("Is autonomously created")]
        public bool? isAutonomouslyCreated {
            get {
                return GetAttributeValue<bool?>("isautonomouslycreated");
            }
            set {
                SetAttributeValue("isautonomouslycreated", value);
            }
        }
        
        [AttributeLogicalName("objectid")]
        [RelationshipSchemaName("Account_Annotation")]
        public Account Account_Annotation {
            get {
                return GetRelatedEntity<Account>("Account_Annotation", null);
            }
            set {
                SetRelatedEntity("Account_Annotation", null, value);
            }
        }
        
        [AttributeLogicalName("objectid")]
        [RelationshipSchemaName("Contact_Annotation")]
        public Contact Contact_Annotation {
            get {
                return GetRelatedEntity<Contact>("Contact_Annotation", null);
            }
            set {
                SetRelatedEntity("Contact_Annotation", null, value);
            }
        }
        
        [AttributeLogicalName("objectid")]
        [RelationshipSchemaName("DuplicateRule_Annotation")]
        public DuplicateRule DuplicateRule_Annotation {
            get {
                return GetRelatedEntity<DuplicateRule>("DuplicateRule_Annotation", null);
            }
            set {
                SetRelatedEntity("DuplicateRule_Annotation", null, value);
            }
        }
        
        [AttributeLogicalName("objectid")]
        [RelationshipSchemaName("Task_Annotation")]
        public Task Task_Annotation {
            get {
                return GetRelatedEntity<Task>("Task_Annotation", null);
            }
            set {
                SetRelatedEntity("Task_Annotation", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("annotation_owning_user")]
        public SystemUser annotation_owning_user {
            get {
                return GetRelatedEntity<SystemUser>("annotation_owning_user", null);
            }
            set {
                SetRelatedEntity("annotation_owning_user", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_annotationbase_createdby")]
        public SystemUser lk_annotationbase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_annotationbase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_annotationbase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_annotationbase_createdonbehalfby")]
        public SystemUser lk_annotationbase_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_annotationbase_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_annotationbase_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_annotationbase_modifiedby")]
        public SystemUser lk_annotationbase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_annotationbase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_annotationbase_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_annotationbase_modifiedonbehalfby")]
        public SystemUser lk_annotationbase_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_annotationbase_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_annotationbase_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("objectid")]
        [RelationshipSchemaName("mgs_invoice_Annotations")]
        public mgs_Invoice mgs_invoice_Annotations {
            get {
                return GetRelatedEntity<mgs_Invoice>("mgs_invoice_Annotations", null);
            }
            set {
                SetRelatedEntity("mgs_invoice_Annotations", null, value);
            }
        }
        
        [AttributeLogicalName("objectid")]
        [RelationshipSchemaName("mgs_transaction_Annotations")]
        public mgs_Transaction mgs_transaction_Annotations {
            get {
                return GetRelatedEntity<mgs_Transaction>("mgs_transaction_Annotations", null);
            }
            set {
                SetRelatedEntity("mgs_transaction_Annotations", null, value);
            }
        }
        
        public static Annotation Retrieve(IOrganizationService service, Guid id, params Expression<Func<Annotation,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Person with whom a business unit has a relationship, such as customer, supplier, and colleague.</para>
    /// <para>Display Name: Contact</para>
    /// </summary>
    [EntityLogicalName("contact")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Contact : ExtendedEntity<ContactState, Contact_StatusCode>, ICustomer {
        
        public const string EntityLogicalName = "contact";
        
        public const int EntityTypeCode = 2;
        
        public Contact() : 
                base(EntityLogicalName) {
        }
        
        public Contact(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("fullname");
            }
        }
        
        [AttributeLogicalName("contactid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("contactid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the contact.</para>
        /// <para>Display Name: Contact</para>
        /// </summary>
        [AttributeLogicalName("contactid")]
        [DisplayName("Contact")]
        public Guid? ContactId {
            get {
                return GetAttributeValue<Guid?>("contactid");
            }
            set {
                SetId("contactid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the account with which the contact is associated.</para>
        /// <para>Display Name: Account</para>
        /// </summary>
        [AttributeLogicalName("accountid")]
        [DisplayName("Account")]
        public EntityReference AccountId {
            get {
                return GetAttributeValue<EntityReference>("accountid");
            }
        }
        
        /// <summary>
        /// <para>Select the contact's role within the company or sales process, such as decision maker, employee, or influencer.</para>
        /// <para>Display Name: Role</para>
        /// </summary>
        [AttributeLogicalName("accountrolecode")]
        [DisplayName("Role")]
        public Contact_AccountRoleCode? AccountRoleCode {
            get {
                return GetOptionSetValue<Contact_AccountRoleCode>("accountrolecode");
            }
            set {
                SetOptionSetValue("accountrolecode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for address 1.</para>
        /// <para>Display Name: Address 1: ID</para>
        /// </summary>
        [AttributeLogicalName("address1_addressid")]
        [DisplayName("Address 1: ID")]
        public Guid? Address1_AddressId {
            get {
                return GetAttributeValue<Guid?>("address1_addressid");
            }
            set {
                SetAttributeValue("address1_addressid", value);
            }
        }
        
        /// <summary>
        /// <para>Select the primary address type.</para>
        /// <para>Display Name: Address 1: Address Type</para>
        /// </summary>
        [AttributeLogicalName("address1_addresstypecode")]
        [DisplayName("Address 1: Address Type")]
        public Contact_Address1_AddressTypeCode? Address1_AddressTypeCode {
            get {
                return GetOptionSetValue<Contact_Address1_AddressTypeCode>("address1_addresstypecode");
            }
            set {
                SetOptionSetValue("address1_addresstypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the city for the primary address.</para>
        /// <para>Display Name: Address 1: City</para>
        /// </summary>
        [AttributeLogicalName("address1_city")]
        [DisplayName("Address 1: City")]
        [MaxLength(80)]
        public string Address1_City {
            get {
                return GetAttributeValue<string>("address1_city");
            }
            set {
                SetAttributeValue("address1_city", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the complete primary address.</para>
        /// <para>Display Name: Address 1</para>
        /// </summary>
        [AttributeLogicalName("address1_composite")]
        [DisplayName("Address 1")]
        public string Address1_Composite {
            get {
                return GetAttributeValue<string>("address1_composite");
            }
        }
        
        /// <summary>
        /// <para>Type the country or region for the primary address.</para>
        /// <para>Display Name: Address 1: Country/Region</para>
        /// </summary>
        [AttributeLogicalName("address1_country")]
        [DisplayName("Address 1: Country/Region")]
        [MaxLength(80)]
        public string Address1_Country {
            get {
                return GetAttributeValue<string>("address1_country");
            }
            set {
                SetAttributeValue("address1_country", value);
            }
        }
        
        /// <summary>
        /// <para>Type the county for the primary address.</para>
        /// <para>Display Name: Address 1: County</para>
        /// </summary>
        [AttributeLogicalName("address1_county")]
        [DisplayName("Address 1: County")]
        [MaxLength(50)]
        public string Address1_County {
            get {
                return GetAttributeValue<string>("address1_county");
            }
            set {
                SetAttributeValue("address1_county", value);
            }
        }
        
        /// <summary>
        /// <para>Type the fax number associated with the primary address.</para>
        /// <para>Display Name: Address 1: Fax</para>
        /// </summary>
        [AttributeLogicalName("address1_fax")]
        [DisplayName("Address 1: Fax")]
        [MaxLength(50)]
        public string Address1_Fax {
            get {
                return GetAttributeValue<string>("address1_fax");
            }
            set {
                SetAttributeValue("address1_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Select the freight terms for the primary address to make sure shipping orders are processed correctly.</para>
        /// <para>Display Name: Address 1: Freight Terms</para>
        /// </summary>
        [AttributeLogicalName("address1_freighttermscode")]
        [DisplayName("Address 1: Freight Terms")]
        public Contact_Address1_FreightTermsCode? Address1_FreightTermsCode {
            get {
                return GetOptionSetValue<Contact_Address1_FreightTermsCode>("address1_freighttermscode");
            }
            set {
                SetOptionSetValue("address1_freighttermscode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the latitude value for the primary address for use in mapping and other applications.</para>
        /// <para>Display Name: Address 1: Latitude</para>
        /// </summary>
        [AttributeLogicalName("address1_latitude")]
        [DisplayName("Address 1: Latitude")]
        public double? Address1_Latitude {
            get {
                return GetAttributeValue<double?>("address1_latitude");
            }
            set {
                SetAttributeValue("address1_latitude", value);
            }
        }
        
        /// <summary>
        /// <para>Type the first line of the primary address.</para>
        /// <para>Display Name: Address 1: Street 1</para>
        /// </summary>
        [AttributeLogicalName("address1_line1")]
        [DisplayName("Address 1: Street 1")]
        [MaxLength(250)]
        public string Address1_Line1 {
            get {
                return GetAttributeValue<string>("address1_line1");
            }
            set {
                SetAttributeValue("address1_line1", value);
            }
        }
        
        /// <summary>
        /// <para>Type the second line of the primary address.</para>
        /// <para>Display Name: Address 1: Street 2</para>
        /// </summary>
        [AttributeLogicalName("address1_line2")]
        [DisplayName("Address 1: Street 2")]
        [MaxLength(250)]
        public string Address1_Line2 {
            get {
                return GetAttributeValue<string>("address1_line2");
            }
            set {
                SetAttributeValue("address1_line2", value);
            }
        }
        
        /// <summary>
        /// <para>Type the third line of the primary address.</para>
        /// <para>Display Name: Address 1: Street 3</para>
        /// </summary>
        [AttributeLogicalName("address1_line3")]
        [DisplayName("Address 1: Street 3")]
        [MaxLength(250)]
        public string Address1_Line3 {
            get {
                return GetAttributeValue<string>("address1_line3");
            }
            set {
                SetAttributeValue("address1_line3", value);
            }
        }
        
        /// <summary>
        /// <para>Type the longitude value for the primary address for use in mapping and other applications.</para>
        /// <para>Display Name: Address 1: Longitude</para>
        /// </summary>
        [AttributeLogicalName("address1_longitude")]
        [DisplayName("Address 1: Longitude")]
        public double? Address1_Longitude {
            get {
                return GetAttributeValue<double?>("address1_longitude");
            }
            set {
                SetAttributeValue("address1_longitude", value);
            }
        }
        
        /// <summary>
        /// <para>Type a descriptive name for the primary address, such as Corporate Headquarters.</para>
        /// <para>Display Name: Address 1: Name</para>
        /// </summary>
        [AttributeLogicalName("address1_name")]
        [DisplayName("Address 1: Name")]
        [MaxLength(200)]
        public string Address1_Name {
            get {
                return GetAttributeValue<string>("address1_name");
            }
            set {
                SetAttributeValue("address1_name", value);
            }
        }
        
        /// <summary>
        /// <para>Type the post office box number of the primary address.</para>
        /// <para>Display Name: Address 1: Post Office Box</para>
        /// </summary>
        [AttributeLogicalName("address1_postofficebox")]
        [DisplayName("Address 1: Post Office Box")]
        [MaxLength(20)]
        public string Address1_PostOfficeBox {
            get {
                return GetAttributeValue<string>("address1_postofficebox");
            }
            set {
                SetAttributeValue("address1_postofficebox", value);
            }
        }
        
        /// <summary>
        /// <para>Type the ZIP Code or postal code for the primary address.</para>
        /// <para>Display Name: Address 1: ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("address1_postalcode")]
        [DisplayName("Address 1: ZIP/Postal Code")]
        [MaxLength(20)]
        public string Address1_PostalCode {
            get {
                return GetAttributeValue<string>("address1_postalcode");
            }
            set {
                SetAttributeValue("address1_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the name of the main contact at the account's primary address.</para>
        /// <para>Display Name: Address 1: Primary Contact Name</para>
        /// </summary>
        [AttributeLogicalName("address1_primarycontactname")]
        [DisplayName("Address 1: Primary Contact Name")]
        [MaxLength(100)]
        public string Address1_PrimaryContactName {
            get {
                return GetAttributeValue<string>("address1_primarycontactname");
            }
            set {
                SetAttributeValue("address1_primarycontactname", value);
            }
        }
        
        /// <summary>
        /// <para>Select a shipping method for deliveries sent to this address.</para>
        /// <para>Display Name: Address 1: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("address1_shippingmethodcode")]
        [DisplayName("Address 1: Shipping Method")]
        public Contact_Address1_ShippingMethodCode? Address1_ShippingMethodCode {
            get {
                return GetOptionSetValue<Contact_Address1_ShippingMethodCode>("address1_shippingmethodcode");
            }
            set {
                SetOptionSetValue("address1_shippingmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the state or province of the primary address.</para>
        /// <para>Display Name: Address 1: State/Province</para>
        /// </summary>
        [AttributeLogicalName("address1_stateorprovince")]
        [DisplayName("Address 1: State/Province")]
        [MaxLength(50)]
        public string Address1_StateOrProvince {
            get {
                return GetAttributeValue<string>("address1_stateorprovince");
            }
            set {
                SetAttributeValue("address1_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>Type the main phone number associated with the primary address.</para>
        /// <para>Display Name: Address 1: Phone</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone1")]
        [DisplayName("Address 1: Phone")]
        [MaxLength(50)]
        public string Address1_Telephone1 {
            get {
                return GetAttributeValue<string>("address1_telephone1");
            }
            set {
                SetAttributeValue("address1_telephone1", value);
            }
        }
        
        /// <summary>
        /// <para>Type a second phone number associated with the primary address.</para>
        /// <para>Display Name: Address 1: Telephone 2</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone2")]
        [DisplayName("Address 1: Telephone 2")]
        [MaxLength(50)]
        public string Address1_Telephone2 {
            get {
                return GetAttributeValue<string>("address1_telephone2");
            }
            set {
                SetAttributeValue("address1_telephone2", value);
            }
        }
        
        /// <summary>
        /// <para>Type a third phone number associated with the primary address.</para>
        /// <para>Display Name: Address 1: Telephone 3</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone3")]
        [DisplayName("Address 1: Telephone 3")]
        [MaxLength(50)]
        public string Address1_Telephone3 {
            get {
                return GetAttributeValue<string>("address1_telephone3");
            }
            set {
                SetAttributeValue("address1_telephone3", value);
            }
        }
        
        /// <summary>
        /// <para>Type the UPS zone of the primary address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.</para>
        /// <para>Display Name: Address 1: UPS Zone</para>
        /// </summary>
        [AttributeLogicalName("address1_upszone")]
        [DisplayName("Address 1: UPS Zone")]
        [MaxLength(4)]
        public string Address1_UPSZone {
            get {
                return GetAttributeValue<string>("address1_upszone");
            }
            set {
                SetAttributeValue("address1_upszone", value);
            }
        }
        
        /// <summary>
        /// <para>Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.</para>
        /// <para>Display Name: Address 1: UTC Offset</para>
        /// </summary>
        [AttributeLogicalName("address1_utcoffset")]
        [DisplayName("Address 1: UTC Offset")]
        [Range(-1500, 1500)]
        public int? Address1_UTCOffset {
            get {
                return GetAttributeValue<int?>("address1_utcoffset");
            }
            set {
                SetAttributeValue("address1_utcoffset", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for address 2.</para>
        /// <para>Display Name: Address 2: ID</para>
        /// </summary>
        [AttributeLogicalName("address2_addressid")]
        [DisplayName("Address 2: ID")]
        public Guid? Address2_AddressId {
            get {
                return GetAttributeValue<Guid?>("address2_addressid");
            }
            set {
                SetAttributeValue("address2_addressid", value);
            }
        }
        
        /// <summary>
        /// <para>Select the secondary address type.</para>
        /// <para>Display Name: Address 2: Address Type</para>
        /// </summary>
        [AttributeLogicalName("address2_addresstypecode")]
        [DisplayName("Address 2: Address Type")]
        public Contact_Address2_AddressTypeCode? Address2_AddressTypeCode {
            get {
                return GetOptionSetValue<Contact_Address2_AddressTypeCode>("address2_addresstypecode");
            }
            set {
                SetOptionSetValue("address2_addresstypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the city for the secondary address.</para>
        /// <para>Display Name: Address 2: City</para>
        /// </summary>
        [AttributeLogicalName("address2_city")]
        [DisplayName("Address 2: City")]
        [MaxLength(80)]
        public string Address2_City {
            get {
                return GetAttributeValue<string>("address2_city");
            }
            set {
                SetAttributeValue("address2_city", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the complete secondary address.</para>
        /// <para>Display Name: Address 2</para>
        /// </summary>
        [AttributeLogicalName("address2_composite")]
        [DisplayName("Address 2")]
        public string Address2_Composite {
            get {
                return GetAttributeValue<string>("address2_composite");
            }
        }
        
        /// <summary>
        /// <para>Type the country or region for the secondary address.</para>
        /// <para>Display Name: Address 2: Country/Region</para>
        /// </summary>
        [AttributeLogicalName("address2_country")]
        [DisplayName("Address 2: Country/Region")]
        [MaxLength(80)]
        public string Address2_Country {
            get {
                return GetAttributeValue<string>("address2_country");
            }
            set {
                SetAttributeValue("address2_country", value);
            }
        }
        
        /// <summary>
        /// <para>Type the county for the secondary address.</para>
        /// <para>Display Name: Address 2: County</para>
        /// </summary>
        [AttributeLogicalName("address2_county")]
        [DisplayName("Address 2: County")]
        [MaxLength(50)]
        public string Address2_County {
            get {
                return GetAttributeValue<string>("address2_county");
            }
            set {
                SetAttributeValue("address2_county", value);
            }
        }
        
        /// <summary>
        /// <para>Type the fax number associated with the secondary address.</para>
        /// <para>Display Name: Address 2: Fax</para>
        /// </summary>
        [AttributeLogicalName("address2_fax")]
        [DisplayName("Address 2: Fax")]
        [MaxLength(50)]
        public string Address2_Fax {
            get {
                return GetAttributeValue<string>("address2_fax");
            }
            set {
                SetAttributeValue("address2_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Select the freight terms for the secondary address to make sure shipping orders are processed correctly.</para>
        /// <para>Display Name: Address 2: Freight Terms</para>
        /// </summary>
        [AttributeLogicalName("address2_freighttermscode")]
        [DisplayName("Address 2: Freight Terms")]
        public Contact_Address2_FreightTermsCode? Address2_FreightTermsCode {
            get {
                return GetOptionSetValue<Contact_Address2_FreightTermsCode>("address2_freighttermscode");
            }
            set {
                SetOptionSetValue("address2_freighttermscode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the latitude value for the secondary address for use in mapping and other applications.</para>
        /// <para>Display Name: Address 2: Latitude</para>
        /// </summary>
        [AttributeLogicalName("address2_latitude")]
        [DisplayName("Address 2: Latitude")]
        public double? Address2_Latitude {
            get {
                return GetAttributeValue<double?>("address2_latitude");
            }
            set {
                SetAttributeValue("address2_latitude", value);
            }
        }
        
        /// <summary>
        /// <para>Type the first line of the secondary address.</para>
        /// <para>Display Name: Address 2: Street 1</para>
        /// </summary>
        [AttributeLogicalName("address2_line1")]
        [DisplayName("Address 2: Street 1")]
        [MaxLength(250)]
        public string Address2_Line1 {
            get {
                return GetAttributeValue<string>("address2_line1");
            }
            set {
                SetAttributeValue("address2_line1", value);
            }
        }
        
        /// <summary>
        /// <para>Type the second line of the secondary address.</para>
        /// <para>Display Name: Address 2: Street 2</para>
        /// </summary>
        [AttributeLogicalName("address2_line2")]
        [DisplayName("Address 2: Street 2")]
        [MaxLength(250)]
        public string Address2_Line2 {
            get {
                return GetAttributeValue<string>("address2_line2");
            }
            set {
                SetAttributeValue("address2_line2", value);
            }
        }
        
        /// <summary>
        /// <para>Type the third line of the secondary address.</para>
        /// <para>Display Name: Address 2: Street 3</para>
        /// </summary>
        [AttributeLogicalName("address2_line3")]
        [DisplayName("Address 2: Street 3")]
        [MaxLength(250)]
        public string Address2_Line3 {
            get {
                return GetAttributeValue<string>("address2_line3");
            }
            set {
                SetAttributeValue("address2_line3", value);
            }
        }
        
        /// <summary>
        /// <para>Type the longitude value for the secondary address for use in mapping and other applications.</para>
        /// <para>Display Name: Address 2: Longitude</para>
        /// </summary>
        [AttributeLogicalName("address2_longitude")]
        [DisplayName("Address 2: Longitude")]
        public double? Address2_Longitude {
            get {
                return GetAttributeValue<double?>("address2_longitude");
            }
            set {
                SetAttributeValue("address2_longitude", value);
            }
        }
        
        /// <summary>
        /// <para>Type a descriptive name for the secondary address, such as Corporate Headquarters.</para>
        /// <para>Display Name: Address 2: Name</para>
        /// </summary>
        [AttributeLogicalName("address2_name")]
        [DisplayName("Address 2: Name")]
        [MaxLength(100)]
        public string Address2_Name {
            get {
                return GetAttributeValue<string>("address2_name");
            }
            set {
                SetAttributeValue("address2_name", value);
            }
        }
        
        /// <summary>
        /// <para>Type the post office box number of the secondary address.</para>
        /// <para>Display Name: Address 2: Post Office Box</para>
        /// </summary>
        [AttributeLogicalName("address2_postofficebox")]
        [DisplayName("Address 2: Post Office Box")]
        [MaxLength(20)]
        public string Address2_PostOfficeBox {
            get {
                return GetAttributeValue<string>("address2_postofficebox");
            }
            set {
                SetAttributeValue("address2_postofficebox", value);
            }
        }
        
        /// <summary>
        /// <para>Type the ZIP Code or postal code for the secondary address.</para>
        /// <para>Display Name: Address 2: ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("address2_postalcode")]
        [DisplayName("Address 2: ZIP/Postal Code")]
        [MaxLength(20)]
        public string Address2_PostalCode {
            get {
                return GetAttributeValue<string>("address2_postalcode");
            }
            set {
                SetAttributeValue("address2_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the name of the main contact at the account's secondary address.</para>
        /// <para>Display Name: Address 2: Primary Contact Name</para>
        /// </summary>
        [AttributeLogicalName("address2_primarycontactname")]
        [DisplayName("Address 2: Primary Contact Name")]
        [MaxLength(100)]
        public string Address2_PrimaryContactName {
            get {
                return GetAttributeValue<string>("address2_primarycontactname");
            }
            set {
                SetAttributeValue("address2_primarycontactname", value);
            }
        }
        
        /// <summary>
        /// <para>Select a shipping method for deliveries sent to this address.</para>
        /// <para>Display Name: Address 2: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("address2_shippingmethodcode")]
        [DisplayName("Address 2: Shipping Method")]
        public Contact_Address2_ShippingMethodCode? Address2_ShippingMethodCode {
            get {
                return GetOptionSetValue<Contact_Address2_ShippingMethodCode>("address2_shippingmethodcode");
            }
            set {
                SetOptionSetValue("address2_shippingmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the state or province of the secondary address.</para>
        /// <para>Display Name: Address 2: State/Province</para>
        /// </summary>
        [AttributeLogicalName("address2_stateorprovince")]
        [DisplayName("Address 2: State/Province")]
        [MaxLength(50)]
        public string Address2_StateOrProvince {
            get {
                return GetAttributeValue<string>("address2_stateorprovince");
            }
            set {
                SetAttributeValue("address2_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>Type the main phone number associated with the secondary address.</para>
        /// <para>Display Name: Address 2: Telephone 1</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone1")]
        [DisplayName("Address 2: Telephone 1")]
        [MaxLength(50)]
        public string Address2_Telephone1 {
            get {
                return GetAttributeValue<string>("address2_telephone1");
            }
            set {
                SetAttributeValue("address2_telephone1", value);
            }
        }
        
        /// <summary>
        /// <para>Type a second phone number associated with the secondary address.</para>
        /// <para>Display Name: Address 2: Telephone 2</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone2")]
        [DisplayName("Address 2: Telephone 2")]
        [MaxLength(50)]
        public string Address2_Telephone2 {
            get {
                return GetAttributeValue<string>("address2_telephone2");
            }
            set {
                SetAttributeValue("address2_telephone2", value);
            }
        }
        
        /// <summary>
        /// <para>Type a third phone number associated with the secondary address.</para>
        /// <para>Display Name: Address 2: Telephone 3</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone3")]
        [DisplayName("Address 2: Telephone 3")]
        [MaxLength(50)]
        public string Address2_Telephone3 {
            get {
                return GetAttributeValue<string>("address2_telephone3");
            }
            set {
                SetAttributeValue("address2_telephone3", value);
            }
        }
        
        /// <summary>
        /// <para>Type the UPS zone of the secondary address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.</para>
        /// <para>Display Name: Address 2: UPS Zone</para>
        /// </summary>
        [AttributeLogicalName("address2_upszone")]
        [DisplayName("Address 2: UPS Zone")]
        [MaxLength(4)]
        public string Address2_UPSZone {
            get {
                return GetAttributeValue<string>("address2_upszone");
            }
            set {
                SetAttributeValue("address2_upszone", value);
            }
        }
        
        /// <summary>
        /// <para>Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.</para>
        /// <para>Display Name: Address 2: UTC Offset</para>
        /// </summary>
        [AttributeLogicalName("address2_utcoffset")]
        [DisplayName("Address 2: UTC Offset")]
        [Range(-1500, 1500)]
        public int? Address2_UTCOffset {
            get {
                return GetAttributeValue<int?>("address2_utcoffset");
            }
            set {
                SetAttributeValue("address2_utcoffset", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for address 3.</para>
        /// <para>Display Name: Address 3: ID</para>
        /// </summary>
        [AttributeLogicalName("address3_addressid")]
        [DisplayName("Address 3: ID")]
        public Guid? Address3_AddressId {
            get {
                return GetAttributeValue<Guid?>("address3_addressid");
            }
            set {
                SetAttributeValue("address3_addressid", value);
            }
        }
        
        /// <summary>
        /// <para>Select the third address type.</para>
        /// <para>Display Name: Address 3: Address Type</para>
        /// </summary>
        [AttributeLogicalName("address3_addresstypecode")]
        [DisplayName("Address 3: Address Type")]
        public Contact_Address3_AddressTypeCode? Address3_AddressTypeCode {
            get {
                return GetOptionSetValue<Contact_Address3_AddressTypeCode>("address3_addresstypecode");
            }
            set {
                SetOptionSetValue("address3_addresstypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the city for the 3rd address.</para>
        /// <para>Display Name: Address 3: City</para>
        /// </summary>
        [AttributeLogicalName("address3_city")]
        [DisplayName("Address 3: City")]
        [MaxLength(80)]
        public string Address3_City {
            get {
                return GetAttributeValue<string>("address3_city");
            }
            set {
                SetAttributeValue("address3_city", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the complete third address.</para>
        /// <para>Display Name: Address 3</para>
        /// </summary>
        [AttributeLogicalName("address3_composite")]
        [DisplayName("Address 3")]
        public string Address3_Composite {
            get {
                return GetAttributeValue<string>("address3_composite");
            }
        }
        
        /// <summary>
        /// <para>the country or region for the 3rd address.</para>
        /// <para>Display Name: Address3: Country/Region</para>
        /// </summary>
        [AttributeLogicalName("address3_country")]
        [DisplayName("Address3: Country/Region")]
        [MaxLength(80)]
        public string Address3_Country {
            get {
                return GetAttributeValue<string>("address3_country");
            }
            set {
                SetAttributeValue("address3_country", value);
            }
        }
        
        /// <summary>
        /// <para>Type the county for the third address.</para>
        /// <para>Display Name: Address 3: County</para>
        /// </summary>
        [AttributeLogicalName("address3_county")]
        [DisplayName("Address 3: County")]
        [MaxLength(50)]
        public string Address3_County {
            get {
                return GetAttributeValue<string>("address3_county");
            }
            set {
                SetAttributeValue("address3_county", value);
            }
        }
        
        /// <summary>
        /// <para>Type the fax number associated with the third address.</para>
        /// <para>Display Name: Address 3: Fax</para>
        /// </summary>
        [AttributeLogicalName("address3_fax")]
        [DisplayName("Address 3: Fax")]
        [MaxLength(50)]
        public string Address3_Fax {
            get {
                return GetAttributeValue<string>("address3_fax");
            }
            set {
                SetAttributeValue("address3_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Select the freight terms for the third address to make sure shipping orders are processed correctly.</para>
        /// <para>Display Name: Address 3: Freight Terms</para>
        /// </summary>
        [AttributeLogicalName("address3_freighttermscode")]
        [DisplayName("Address 3: Freight Terms")]
        public Contact_Address3_FreightTermsCode? Address3_FreightTermsCode {
            get {
                return GetOptionSetValue<Contact_Address3_FreightTermsCode>("address3_freighttermscode");
            }
            set {
                SetOptionSetValue("address3_freighttermscode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the latitude value for the third address for use in mapping and other applications.</para>
        /// <para>Display Name: Address 3: Latitude</para>
        /// </summary>
        [AttributeLogicalName("address3_latitude")]
        [DisplayName("Address 3: Latitude")]
        public double? Address3_Latitude {
            get {
                return GetAttributeValue<double?>("address3_latitude");
            }
            set {
                SetAttributeValue("address3_latitude", value);
            }
        }
        
        /// <summary>
        /// <para>the first line of the 3rd address.</para>
        /// <para>Display Name: Address3: Street 1</para>
        /// </summary>
        [AttributeLogicalName("address3_line1")]
        [DisplayName("Address3: Street 1")]
        [MaxLength(250)]
        public string Address3_Line1 {
            get {
                return GetAttributeValue<string>("address3_line1");
            }
            set {
                SetAttributeValue("address3_line1", value);
            }
        }
        
        /// <summary>
        /// <para>the second line of the 3rd address.</para>
        /// <para>Display Name: Address3: Street 2</para>
        /// </summary>
        [AttributeLogicalName("address3_line2")]
        [DisplayName("Address3: Street 2")]
        [MaxLength(250)]
        public string Address3_Line2 {
            get {
                return GetAttributeValue<string>("address3_line2");
            }
            set {
                SetAttributeValue("address3_line2", value);
            }
        }
        
        /// <summary>
        /// <para>the third line of the 3rd address.</para>
        /// <para>Display Name: Address3: Street 3</para>
        /// </summary>
        [AttributeLogicalName("address3_line3")]
        [DisplayName("Address3: Street 3")]
        [MaxLength(250)]
        public string Address3_Line3 {
            get {
                return GetAttributeValue<string>("address3_line3");
            }
            set {
                SetAttributeValue("address3_line3", value);
            }
        }
        
        /// <summary>
        /// <para>Type the longitude value for the third address for use in mapping and other applications.</para>
        /// <para>Display Name: Address 3: Longitude</para>
        /// </summary>
        [AttributeLogicalName("address3_longitude")]
        [DisplayName("Address 3: Longitude")]
        public double? Address3_Longitude {
            get {
                return GetAttributeValue<double?>("address3_longitude");
            }
            set {
                SetAttributeValue("address3_longitude", value);
            }
        }
        
        /// <summary>
        /// <para>Type a descriptive name for the third address, such as Corporate Headquarters.</para>
        /// <para>Display Name: Address 3: Name</para>
        /// </summary>
        [AttributeLogicalName("address3_name")]
        [DisplayName("Address 3: Name")]
        [MaxLength(200)]
        public string Address3_Name {
            get {
                return GetAttributeValue<string>("address3_name");
            }
            set {
                SetAttributeValue("address3_name", value);
            }
        }
        
        /// <summary>
        /// <para>the post office box number of the 3rd address.</para>
        /// <para>Display Name: Address 3: Post Office Box</para>
        /// </summary>
        [AttributeLogicalName("address3_postofficebox")]
        [DisplayName("Address 3: Post Office Box")]
        [MaxLength(20)]
        public string Address3_PostOfficeBox {
            get {
                return GetAttributeValue<string>("address3_postofficebox");
            }
            set {
                SetAttributeValue("address3_postofficebox", value);
            }
        }
        
        /// <summary>
        /// <para>the ZIP Code or postal code for the 3rd address.</para>
        /// <para>Display Name: Address3: ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("address3_postalcode")]
        [DisplayName("Address3: ZIP/Postal Code")]
        [MaxLength(20)]
        public string Address3_PostalCode {
            get {
                return GetAttributeValue<string>("address3_postalcode");
            }
            set {
                SetAttributeValue("address3_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the name of the main contact at the account's third address.</para>
        /// <para>Display Name: Address 3: Primary Contact Name</para>
        /// </summary>
        [AttributeLogicalName("address3_primarycontactname")]
        [DisplayName("Address 3: Primary Contact Name")]
        [MaxLength(100)]
        public string Address3_PrimaryContactName {
            get {
                return GetAttributeValue<string>("address3_primarycontactname");
            }
            set {
                SetAttributeValue("address3_primarycontactname", value);
            }
        }
        
        /// <summary>
        /// <para>Select a shipping method for deliveries sent to this address.</para>
        /// <para>Display Name: Address 3: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("address3_shippingmethodcode")]
        [DisplayName("Address 3: Shipping Method")]
        public Contact_Address3_ShippingMethodCode? Address3_ShippingMethodCode {
            get {
                return GetOptionSetValue<Contact_Address3_ShippingMethodCode>("address3_shippingmethodcode");
            }
            set {
                SetOptionSetValue("address3_shippingmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>the state or province of the third address.</para>
        /// <para>Display Name: Address3: State/Province</para>
        /// </summary>
        [AttributeLogicalName("address3_stateorprovince")]
        [DisplayName("Address3: State/Province")]
        [MaxLength(50)]
        public string Address3_StateOrProvince {
            get {
                return GetAttributeValue<string>("address3_stateorprovince");
            }
            set {
                SetAttributeValue("address3_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>Type the main phone number associated with the third address.</para>
        /// <para>Display Name: Address 3: Telephone1</para>
        /// </summary>
        [AttributeLogicalName("address3_telephone1")]
        [DisplayName("Address 3: Telephone1")]
        [MaxLength(50)]
        public string Address3_Telephone1 {
            get {
                return GetAttributeValue<string>("address3_telephone1");
            }
            set {
                SetAttributeValue("address3_telephone1", value);
            }
        }
        
        /// <summary>
        /// <para>Type a second phone number associated with the third address.</para>
        /// <para>Display Name: Address 3: Telephone2</para>
        /// </summary>
        [AttributeLogicalName("address3_telephone2")]
        [DisplayName("Address 3: Telephone2")]
        [MaxLength(50)]
        public string Address3_Telephone2 {
            get {
                return GetAttributeValue<string>("address3_telephone2");
            }
            set {
                SetAttributeValue("address3_telephone2", value);
            }
        }
        
        /// <summary>
        /// <para>Type a third phone number associated with the primary address.</para>
        /// <para>Display Name: Address 3: Telephone3</para>
        /// </summary>
        [AttributeLogicalName("address3_telephone3")]
        [DisplayName("Address 3: Telephone3")]
        [MaxLength(50)]
        public string Address3_Telephone3 {
            get {
                return GetAttributeValue<string>("address3_telephone3");
            }
            set {
                SetAttributeValue("address3_telephone3", value);
            }
        }
        
        /// <summary>
        /// <para>Type the UPS zone of the third address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.</para>
        /// <para>Display Name: Address 3: UPS Zone</para>
        /// </summary>
        [AttributeLogicalName("address3_upszone")]
        [DisplayName("Address 3: UPS Zone")]
        [MaxLength(4)]
        public string Address3_UPSZone {
            get {
                return GetAttributeValue<string>("address3_upszone");
            }
            set {
                SetAttributeValue("address3_upszone", value);
            }
        }
        
        /// <summary>
        /// <para>Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.</para>
        /// <para>Display Name: Address 3: UTC Offset</para>
        /// </summary>
        [AttributeLogicalName("address3_utcoffset")]
        [DisplayName("Address 3: UTC Offset")]
        [Range(-1500, 1500)]
        public int? Address3_UTCOffset {
            get {
                return GetAttributeValue<int?>("address3_utcoffset");
            }
            set {
                SetAttributeValue("address3_utcoffset", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Created By IP Address</para>
        /// </summary>
        [AttributeLogicalName("adx_createdbyipaddress")]
        [DisplayName("Created By IP Address")]
        [MaxLength(100)]
        public string Adx_CreatedByIPAddress {
            get {
                return GetAttributeValue<string>("adx_createdbyipaddress");
            }
            set {
                SetAttributeValue("adx_createdbyipaddress", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Created By Username</para>
        /// </summary>
        [AttributeLogicalName("adx_createdbyusername")]
        [DisplayName("Created By Username")]
        [MaxLength(100)]
        public string Adx_CreatedByUsername {
            get {
                return GetAttributeValue<string>("adx_createdbyusername");
            }
            set {
                SetAttributeValue("adx_createdbyusername", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Modified By IP Address</para>
        /// </summary>
        [AttributeLogicalName("adx_modifiedbyipaddress")]
        [DisplayName("Modified By IP Address")]
        [MaxLength(100)]
        public string Adx_ModifiedByIPAddress {
            get {
                return GetAttributeValue<string>("adx_modifiedbyipaddress");
            }
            set {
                SetAttributeValue("adx_modifiedbyipaddress", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Modified By Username</para>
        /// </summary>
        [AttributeLogicalName("adx_modifiedbyusername")]
        [DisplayName("Modified By Username")]
        [MaxLength(100)]
        public string Adx_ModifiedByUsername {
            get {
                return GetAttributeValue<string>("adx_modifiedbyusername");
            }
            set {
                SetAttributeValue("adx_modifiedbyusername", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Organization Name</para>
        /// </summary>
        [AttributeLogicalName("adx_organizationname")]
        [DisplayName("Organization Name")]
        [MaxLength(250)]
        public string Adx_OrganizationName {
            get {
                return GetAttributeValue<string>("adx_organizationname");
            }
            set {
                SetAttributeValue("adx_organizationname", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Profile Is Anonymous</para>
        /// </summary>
        [AttributeLogicalName("adx_profileisanonymous")]
        [DisplayName("Profile Is Anonymous")]
        public bool? Adx_ProfileIsAnonymous {
            get {
                return GetAttributeValue<bool?>("adx_profileisanonymous");
            }
            set {
                SetAttributeValue("adx_profileisanonymous", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Profile Last Activity</para>
        /// </summary>
        [AttributeLogicalName("adx_profilelastactivity")]
        [DisplayName("Profile Last Activity")]
        public DateTime? Adx_ProfileLastActivity {
            get {
                return GetAttributeValue<DateTime?>("adx_profilelastactivity");
            }
            set {
                SetAttributeValue("adx_profilelastactivity", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Time Zone</para>
        /// </summary>
        [AttributeLogicalName("adx_timezone")]
        [DisplayName("Time Zone")]
        [Range(-1500, 1500)]
        public int? Adx_TimeZone {
            get {
                return GetAttributeValue<int?>("adx_timezone");
            }
            set {
                SetAttributeValue("adx_timezone", value);
            }
        }
        
        /// <summary>
        /// <para>For system use only.</para>
        /// <para>Display Name: Aging 30</para>
        /// </summary>
        [AttributeLogicalName("aging30")]
        [DisplayName("Aging 30")]
        public decimal? Aging30 {
            get {
                return GetMoneyValue("aging30");
            }
        }
        
        /// <summary>
        /// <para>Shows the Aging 30 field converted to the system's default base currency. The calculations use the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Aging 30 (Base)</para>
        /// </summary>
        [AttributeLogicalName("aging30_base")]
        [DisplayName("Aging 30 (Base)")]
        public decimal? Aging30_Base {
            get {
                return GetMoneyValue("aging30_base");
            }
        }
        
        /// <summary>
        /// <para>For system use only.</para>
        /// <para>Display Name: Aging 60</para>
        /// </summary>
        [AttributeLogicalName("aging60")]
        [DisplayName("Aging 60")]
        public decimal? Aging60 {
            get {
                return GetMoneyValue("aging60");
            }
        }
        
        /// <summary>
        /// <para>Shows the Aging 60 field converted to the system's default base currency. The calculations use the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Aging 60 (Base)</para>
        /// </summary>
        [AttributeLogicalName("aging60_base")]
        [DisplayName("Aging 60 (Base)")]
        public decimal? Aging60_Base {
            get {
                return GetMoneyValue("aging60_base");
            }
        }
        
        /// <summary>
        /// <para>For system use only.</para>
        /// <para>Display Name: Aging 90</para>
        /// </summary>
        [AttributeLogicalName("aging90")]
        [DisplayName("Aging 90")]
        public decimal? Aging90 {
            get {
                return GetMoneyValue("aging90");
            }
        }
        
        /// <summary>
        /// <para>Shows the Aging 90 field converted to the system's default base currency. The calculations use the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Aging 90 (Base)</para>
        /// </summary>
        [AttributeLogicalName("aging90_base")]
        [DisplayName("Aging 90 (Base)")]
        public decimal? Aging90_Base {
            get {
                return GetMoneyValue("aging90_base");
            }
        }
        
        /// <summary>
        /// <para>Enter the date of the contact's wedding or service anniversary for use in customer gift programs or other communications.</para>
        /// <para>Display Name: Anniversary</para>
        /// </summary>
        [AttributeLogicalName("anniversary")]
        [DisplayName("Anniversary")]
        public DateTime? Anniversary {
            get {
                return GetAttributeValue<DateTime?>("anniversary");
            }
            set {
                SetAttributeValue("anniversary", value);
            }
        }
        
        /// <summary>
        /// <para>Type the contact's annual income for use in profiling and financial analysis.</para>
        /// <para>Display Name: Annual Income</para>
        /// </summary>
        [AttributeLogicalName("annualincome")]
        [DisplayName("Annual Income")]
        public decimal? AnnualIncome {
            get {
                return GetMoneyValue("annualincome");
            }
            set {
                SetMoneyValue("annualincome", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Annual Income field converted to the system's default base currency. The calculations use the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Annual Income (Base)</para>
        /// </summary>
        [AttributeLogicalName("annualincome_base")]
        [DisplayName("Annual Income (Base)")]
        public decimal? AnnualIncome_Base {
            get {
                return GetMoneyValue("annualincome_base");
            }
        }
        
        /// <summary>
        /// <para>Type the name of the contact's assistant.</para>
        /// <para>Display Name: Assistant</para>
        /// </summary>
        [AttributeLogicalName("assistantname")]
        [DisplayName("Assistant")]
        [MaxLength(100)]
        public string AssistantName {
            get {
                return GetAttributeValue<string>("assistantname");
            }
            set {
                SetAttributeValue("assistantname", value);
            }
        }
        
        /// <summary>
        /// <para>Type the phone number for the contact's assistant.</para>
        /// <para>Display Name: Assistant Phone</para>
        /// </summary>
        [AttributeLogicalName("assistantphone")]
        [DisplayName("Assistant Phone")]
        [MaxLength(50)]
        public string AssistantPhone {
            get {
                return GetAttributeValue<string>("assistantphone");
            }
            set {
                SetAttributeValue("assistantphone", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the contact's birthday for use in customer gift programs or other communications.</para>
        /// <para>Display Name: Birthday</para>
        /// </summary>
        [AttributeLogicalName("birthdate")]
        [DisplayName("Birthday")]
        public DateTime? BirthDate {
            get {
                return GetAttributeValue<DateTime?>("birthdate");
            }
            set {
                SetAttributeValue("birthdate", value);
            }
        }
        
        /// <summary>
        /// <para>Type a second business phone number for this contact.</para>
        /// <para>Display Name: Business Phone 2</para>
        /// </summary>
        [AttributeLogicalName("business2")]
        [DisplayName("Business Phone 2")]
        [MaxLength(50)]
        public string Business2 {
            get {
                return GetAttributeValue<string>("business2");
            }
            set {
                SetAttributeValue("business2", value);
            }
        }
        
        /// <summary>
        /// <para>Stores Image of the Business Card</para>
        /// <para>Display Name: Business Card</para>
        /// </summary>
        [AttributeLogicalName("businesscard")]
        [DisplayName("Business Card")]
        public string BusinessCard {
            get {
                return GetAttributeValue<string>("businesscard");
            }
            set {
                SetAttributeValue("businesscard", value);
            }
        }
        
        /// <summary>
        /// <para>Stores Business Card Control Properties.</para>
        /// <para>Display Name: BusinessCardAttributes</para>
        /// </summary>
        [AttributeLogicalName("businesscardattributes")]
        [DisplayName("BusinessCardAttributes")]
        [MaxLength(4000)]
        public string BusinessCardAttributes {
            get {
                return GetAttributeValue<string>("businesscardattributes");
            }
            set {
                SetAttributeValue("businesscardattributes", value);
            }
        }
        
        /// <summary>
        /// <para>Type a callback phone number for this contact.</para>
        /// <para>Display Name: Callback Number</para>
        /// </summary>
        [AttributeLogicalName("callback")]
        [DisplayName("Callback Number")]
        [MaxLength(50)]
        public string Callback {
            get {
                return GetAttributeValue<string>("callback");
            }
            set {
                SetAttributeValue("callback", value);
            }
        }
        
        /// <summary>
        /// <para>Type the names of the contact's children for reference in communications and client programs.</para>
        /// <para>Display Name: Children's Names</para>
        /// </summary>
        [AttributeLogicalName("childrensnames")]
        [DisplayName("Children\'s Names")]
        [MaxLength(255)]
        public string ChildrensNames {
            get {
                return GetAttributeValue<string>("childrensnames");
            }
            set {
                SetAttributeValue("childrensnames", value);
            }
        }
        
        /// <summary>
        /// <para>Type the company phone of the contact.</para>
        /// <para>Display Name: Company Phone</para>
        /// </summary>
        [AttributeLogicalName("company")]
        [DisplayName("Company Phone")]
        [MaxLength(50)]
        public string Company {
            get {
                return GetAttributeValue<string>("company");
            }
            set {
                SetAttributeValue("company", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        [DisplayName("Created By")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Shows the external party who created the record.</para>
        /// <para>Display Name: Created By (External Party)</para>
        /// </summary>
        [AttributeLogicalName("createdbyexternalparty")]
        [DisplayName("Created By (External Party)")]
        public EntityReference CreatedByExternalParty {
            get {
                return GetAttributeValue<EntityReference>("createdbyexternalparty");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        [DisplayName("Created On")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        [DisplayName("Created By (Delegate)")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Type the credit limit of the contact for reference when you address invoice and accounting issues with the customer.</para>
        /// <para>Display Name: Credit Limit</para>
        /// </summary>
        [AttributeLogicalName("creditlimit")]
        [DisplayName("Credit Limit")]
        public decimal? CreditLimit {
            get {
                return GetMoneyValue("creditlimit");
            }
            set {
                SetMoneyValue("creditlimit", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Credit Limit field converted to the system's default base currency for reporting purposes. The calculations use the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Credit Limit (Base)</para>
        /// </summary>
        [AttributeLogicalName("creditlimit_base")]
        [DisplayName("Credit Limit (Base)")]
        public decimal? CreditLimit_Base {
            get {
                return GetMoneyValue("creditlimit_base");
            }
        }
        
        /// <summary>
        /// <para>Select whether the contact is on a credit hold, for reference when addressing invoice and accounting issues.</para>
        /// <para>Display Name: Credit Hold</para>
        /// </summary>
        [AttributeLogicalName("creditonhold")]
        [DisplayName("Credit Hold")]
        public bool? CreditOnHold {
            get {
                return GetAttributeValue<bool?>("creditonhold");
            }
            set {
                SetAttributeValue("creditonhold", value);
            }
        }
        
        /// <summary>
        /// <para>Select the size of the contact's company for segmentation and reporting purposes.</para>
        /// <para>Display Name: Customer Size</para>
        /// </summary>
        [AttributeLogicalName("customersizecode")]
        [DisplayName("Customer Size")]
        public Contact_CustomerSizeCode? CustomerSizeCode {
            get {
                return GetOptionSetValue<Contact_CustomerSizeCode>("customersizecode");
            }
            set {
                SetOptionSetValue("customersizecode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the category that best describes the relationship between the contact and your organization.</para>
        /// <para>Display Name: Relationship Type</para>
        /// </summary>
        [AttributeLogicalName("customertypecode")]
        [DisplayName("Relationship Type")]
        public Contact_CustomerTypeCode? CustomerTypeCode {
            get {
                return GetOptionSetValue<Contact_CustomerTypeCode>("customertypecode");
            }
            set {
                SetOptionSetValue("customertypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the default price list associated with the contact to make sure the correct product prices for this customer are applied in sales opportunities, quotes, and orders.</para>
        /// <para>Display Name: Price List</para>
        /// </summary>
        [AttributeLogicalName("defaultpricelevelid")]
        [DisplayName("Price List")]
        public EntityReference DefaultPriceLevelId {
            get {
                return GetAttributeValue<EntityReference>("defaultpricelevelid");
            }
            set {
                SetAttributeValue("defaultpricelevelid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the department or business unit where the contact works in the parent company or business.</para>
        /// <para>Display Name: Department</para>
        /// </summary>
        [AttributeLogicalName("department")]
        [DisplayName("Department")]
        [MaxLength(100)]
        public string Department {
            get {
                return GetAttributeValue<string>("department");
            }
            set {
                SetAttributeValue("department", value);
            }
        }
        
        /// <summary>
        /// <para>Type additional information to describe the contact, such as an excerpt from the company's website.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        [DisplayName("Description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the contact accepts bulk email sent through marketing campaigns or quick campaigns. If Do Not Allow is selected, the contact can be added to marketing lists, but will be excluded from the email.</para>
        /// <para>Display Name: Do not allow Bulk Emails</para>
        /// </summary>
        [AttributeLogicalName("donotbulkemail")]
        [DisplayName("Do not allow Bulk Emails")]
        public bool? DoNotBulkEMail {
            get {
                return GetAttributeValue<bool?>("donotbulkemail");
            }
            set {
                SetAttributeValue("donotbulkemail", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the contact accepts bulk postal mail sent through marketing campaigns or quick campaigns. If Do Not Allow is selected, the contact can be added to marketing lists, but will be excluded from the letters.</para>
        /// <para>Display Name: Do not allow Bulk Mails</para>
        /// </summary>
        [AttributeLogicalName("donotbulkpostalmail")]
        [DisplayName("Do not allow Bulk Mails")]
        public bool? DoNotBulkPostalMail {
            get {
                return GetAttributeValue<bool?>("donotbulkpostalmail");
            }
            set {
                SetAttributeValue("donotbulkpostalmail", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the contact allows direct email sent from Microsoft Dynamics 365. If Do Not Allow is selected, Microsoft Dynamics 365 will not send the email.</para>
        /// <para>Display Name: Do not allow Emails</para>
        /// </summary>
        [AttributeLogicalName("donotemail")]
        [DisplayName("Do not allow Emails")]
        public bool? DoNotEMail {
            get {
                return GetAttributeValue<bool?>("donotemail");
            }
            set {
                SetAttributeValue("donotemail", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the contact allows faxes. If Do Not Allow is selected, the contact will be excluded from any fax activities distributed in marketing campaigns.</para>
        /// <para>Display Name: Do not allow Faxes</para>
        /// </summary>
        [AttributeLogicalName("donotfax")]
        [DisplayName("Do not allow Faxes")]
        public bool? DoNotFax {
            get {
                return GetAttributeValue<bool?>("donotfax");
            }
            set {
                SetAttributeValue("donotfax", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the contact accepts phone calls. If Do Not Allow is selected, the contact will be excluded from any phone call activities distributed in marketing campaigns.</para>
        /// <para>Display Name: Do not allow Phone Calls</para>
        /// </summary>
        [AttributeLogicalName("donotphone")]
        [DisplayName("Do not allow Phone Calls")]
        public bool? DoNotPhone {
            get {
                return GetAttributeValue<bool?>("donotphone");
            }
            set {
                SetAttributeValue("donotphone", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the contact allows direct mail. If Do Not Allow is selected, the contact will be excluded from letter activities distributed in marketing campaigns.</para>
        /// <para>Display Name: Do not allow Mails</para>
        /// </summary>
        [AttributeLogicalName("donotpostalmail")]
        [DisplayName("Do not allow Mails")]
        public bool? DoNotPostalMail {
            get {
                return GetAttributeValue<bool?>("donotpostalmail");
            }
            set {
                SetAttributeValue("donotpostalmail", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the contact accepts marketing materials, such as brochures or catalogs. Contacts that opt out can be excluded from marketing initiatives.</para>
        /// <para>Display Name: Send Marketing Materials</para>
        /// </summary>
        [AttributeLogicalName("donotsendmm")]
        [DisplayName("Send Marketing Materials")]
        public bool? DoNotSendMM {
            get {
                return GetAttributeValue<bool?>("donotsendmm");
            }
            set {
                SetAttributeValue("donotsendmm", value);
            }
        }
        
        /// <summary>
        /// <para>Type the primary email address for the contact.</para>
        /// <para>Display Name: Email</para>
        /// </summary>
        [AttributeLogicalName("emailaddress1")]
        [DisplayName("Email")]
        [MaxLength(100)]
        public string EMailAddress1 {
            get {
                return GetAttributeValue<string>("emailaddress1");
            }
            set {
                SetAttributeValue("emailaddress1", value);
            }
        }
        
        /// <summary>
        /// <para>Type the secondary email address for the contact.</para>
        /// <para>Display Name: Email Address 2</para>
        /// </summary>
        [AttributeLogicalName("emailaddress2")]
        [DisplayName("Email Address 2")]
        [MaxLength(100)]
        public string EMailAddress2 {
            get {
                return GetAttributeValue<string>("emailaddress2");
            }
            set {
                SetAttributeValue("emailaddress2", value);
            }
        }
        
        /// <summary>
        /// <para>Type an alternate email address for the contact.</para>
        /// <para>Display Name: Email Address 3</para>
        /// </summary>
        [AttributeLogicalName("emailaddress3")]
        [DisplayName("Email Address 3")]
        [MaxLength(100)]
        public string EMailAddress3 {
            get {
                return GetAttributeValue<string>("emailaddress3");
            }
            set {
                SetAttributeValue("emailaddress3", value);
            }
        }
        
        /// <summary>
        /// <para>Select the contact's highest level of education for use in segmentation and analysis.</para>
        /// <para>Display Name: Education</para>
        /// </summary>
        [AttributeLogicalName("educationcode")]
        [DisplayName("Education")]
        public Contact_EducationCode? EducationCode {
            get {
                return GetOptionSetValue<Contact_EducationCode>("educationcode");
            }
            set {
                SetOptionSetValue("educationcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the employee ID or number for the contact for reference in orders, service cases, or other communications with the contact's organization.</para>
        /// <para>Display Name: Employee</para>
        /// </summary>
        [AttributeLogicalName("employeeid")]
        [DisplayName("Employee")]
        [MaxLength(50)]
        public string EmployeeId {
            get {
                return GetAttributeValue<string>("employeeid");
            }
            set {
                SetAttributeValue("employeeid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Entity Image Id</para>
        /// </summary>
        [AttributeLogicalName("entityimageid")]
        [DisplayName("Entity Image Id")]
        public Guid? EntityImageId {
            get {
                return GetAttributeValue<Guid?>("entityimageid");
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        [DisplayName("Exchange Rate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Identifier for an external user.</para>
        /// <para>Display Name: External User Identifier</para>
        /// </summary>
        [AttributeLogicalName("externaluseridentifier")]
        [DisplayName("External User Identifier")]
        [MaxLength(50)]
        public string ExternalUserIdentifier {
            get {
                return GetAttributeValue<string>("externaluseridentifier");
            }
            set {
                SetAttributeValue("externaluseridentifier", value);
            }
        }
        
        /// <summary>
        /// <para>Select the marital status of the contact for reference in follow-up phone calls and other communications.</para>
        /// <para>Display Name: Marital Status</para>
        /// </summary>
        [AttributeLogicalName("familystatuscode")]
        [DisplayName("Marital Status")]
        public Contact_FamilyStatusCode? FamilyStatusCode {
            get {
                return GetOptionSetValue<Contact_FamilyStatusCode>("familystatuscode");
            }
            set {
                SetOptionSetValue("familystatuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the fax number for the contact.</para>
        /// <para>Display Name: Fax</para>
        /// </summary>
        [AttributeLogicalName("fax")]
        [DisplayName("Fax")]
        [MaxLength(50)]
        public string Fax {
            get {
                return GetAttributeValue<string>("fax");
            }
            set {
                SetAttributeValue("fax", value);
            }
        }
        
        /// <summary>
        /// <para>Type the contact's first name to make sure the contact is addressed correctly in sales calls, email, and marketing campaigns.</para>
        /// <para>Display Name: First Name</para>
        /// </summary>
        [AttributeLogicalName("firstname")]
        [DisplayName("First Name")]
        [MaxLength(50)]
        public string FirstName {
            get {
                return GetAttributeValue<string>("firstname");
            }
            set {
                SetAttributeValue("firstname", value);
            }
        }
        
        /// <summary>
        /// <para>Information about whether to allow following email activity like opens, attachment views and link clicks for emails sent to the contact.</para>
        /// <para>Display Name: Follow Email Activity</para>
        /// </summary>
        [AttributeLogicalName("followemail")]
        [DisplayName("Follow Email Activity")]
        public bool? FollowEmail {
            get {
                return GetAttributeValue<bool?>("followemail");
            }
            set {
                SetAttributeValue("followemail", value);
            }
        }
        
        /// <summary>
        /// <para>Type the URL for the contact's FTP site to enable users to access data and share documents.</para>
        /// <para>Display Name: FTP Site</para>
        /// </summary>
        [AttributeLogicalName("ftpsiteurl")]
        [DisplayName("FTP Site")]
        [MaxLength(200)]
        public string FtpSiteUrl {
            get {
                return GetAttributeValue<string>("ftpsiteurl");
            }
            set {
                SetAttributeValue("ftpsiteurl", value);
            }
        }
        
        /// <summary>
        /// <para>Combines and shows the contact's first and last names so that the full name can be displayed in views and reports.</para>
        /// <para>Display Name: Full Name</para>
        /// </summary>
        [AttributeLogicalName("fullname")]
        [DisplayName("Full Name")]
        [MaxLength(160)]
        public string FullName {
            get {
                return GetAttributeValue<string>("fullname");
            }
        }
        
        /// <summary>
        /// <para>Select the contact's gender to make sure the contact is addressed correctly in sales calls, email, and marketing campaigns.</para>
        /// <para>Display Name: Gender</para>
        /// </summary>
        [AttributeLogicalName("gendercode")]
        [DisplayName("Gender")]
        public Contact_GenderCode? GenderCode {
            get {
                return GetOptionSetValue<Contact_GenderCode>("gendercode");
            }
            set {
                SetOptionSetValue("gendercode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the passport number or other government ID for the contact for use in documents or reports.</para>
        /// <para>Display Name: Government</para>
        /// </summary>
        [AttributeLogicalName("governmentid")]
        [DisplayName("Government")]
        [MaxLength(50)]
        public string GovernmentId {
            get {
                return GetAttributeValue<string>("governmentid");
            }
            set {
                SetAttributeValue("governmentid", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the contact has any children for reference in follow-up phone calls and other communications.</para>
        /// <para>Display Name: Has Children</para>
        /// </summary>
        [AttributeLogicalName("haschildrencode")]
        [DisplayName("Has Children")]
        public Contact_HasChildrenCode? HasChildrenCode {
            get {
                return GetOptionSetValue<Contact_HasChildrenCode>("haschildrencode");
            }
            set {
                SetOptionSetValue("haschildrencode", value);
            }
        }
        
        /// <summary>
        /// <para>Type a second home phone number for this contact.</para>
        /// <para>Display Name: Home Phone 2</para>
        /// </summary>
        [AttributeLogicalName("home2")]
        [DisplayName("Home Phone 2")]
        [MaxLength(50)]
        public string Home2 {
            get {
                return GetAttributeValue<string>("home2");
            }
            set {
                SetAttributeValue("home2", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        [DisplayName("Import Sequence Number")]
        [Range(-2147483648, 2147483647)]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the contact exists in a separate accounting or other system, such as Microsoft Dynamics GP or another ERP database, for use in integration processes.</para>
        /// <para>Display Name: Back Office Customer</para>
        /// </summary>
        [AttributeLogicalName("isbackofficecustomer")]
        [DisplayName("Back Office Customer")]
        public bool? IsBackofficeCustomer {
            get {
                return GetAttributeValue<bool?>("isbackofficecustomer");
            }
            set {
                SetAttributeValue("isbackofficecustomer", value);
            }
        }
        
        /// <summary>
        /// <para>Type the job title of the contact to make sure the contact is addressed correctly in sales calls, email, and marketing campaigns.</para>
        /// <para>Display Name: Job Title</para>
        /// </summary>
        [AttributeLogicalName("jobtitle")]
        [DisplayName("Job Title")]
        [MaxLength(100)]
        public string JobTitle {
            get {
                return GetAttributeValue<string>("jobtitle");
            }
            set {
                SetAttributeValue("jobtitle", value);
            }
        }
        
        /// <summary>
        /// <para>Type the contact's last name to make sure the contact is addressed correctly in sales calls, email, and marketing campaigns.</para>
        /// <para>Display Name: Last Name</para>
        /// </summary>
        [AttributeLogicalName("lastname")]
        [DisplayName("Last Name")]
        [MaxLength(50)]
        public string LastName {
            get {
                return GetAttributeValue<string>("lastname");
            }
            set {
                SetAttributeValue("lastname", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the date and time stamp of the last on hold time.</para>
        /// <para>Display Name: Last On Hold Time</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        [DisplayName("Last On Hold Time")]
        public DateTime? LastOnHoldTime {
            get {
                return GetAttributeValue<DateTime?>("lastonholdtime");
            }
            set {
                SetAttributeValue("lastonholdtime", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date when the contact was last included in a marketing campaign or quick campaign.</para>
        /// <para>Display Name: Last Date Included in Campaign</para>
        /// </summary>
        [AttributeLogicalName("lastusedincampaign")]
        [DisplayName("Last Date Included in Campaign")]
        public DateTime? LastUsedInCampaign {
            get {
                return GetAttributeValue<DateTime?>("lastusedincampaign");
            }
            set {
                SetAttributeValue("lastusedincampaign", value);
            }
        }
        
        /// <summary>
        /// <para>Select the primary marketing source that directed the contact to your organization.</para>
        /// <para>Display Name: Lead Source</para>
        /// </summary>
        [AttributeLogicalName("leadsourcecode")]
        [DisplayName("Lead Source")]
        public Contact_LeadSourceCode? LeadSourceCode {
            get {
                return GetOptionSetValue<Contact_LeadSourceCode>("leadsourcecode");
            }
            set {
                SetOptionSetValue("leadsourcecode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the name of the contact's manager for use in escalating issues or other follow-up communications with the contact.</para>
        /// <para>Display Name: Manager</para>
        /// </summary>
        [AttributeLogicalName("managername")]
        [DisplayName("Manager")]
        [MaxLength(100)]
        public string ManagerName {
            get {
                return GetAttributeValue<string>("managername");
            }
            set {
                SetAttributeValue("managername", value);
            }
        }
        
        /// <summary>
        /// <para>Type the phone number for the contact's manager.</para>
        /// <para>Display Name: Manager Phone</para>
        /// </summary>
        [AttributeLogicalName("managerphone")]
        [DisplayName("Manager Phone")]
        [MaxLength(50)]
        public string ManagerPhone {
            get {
                return GetAttributeValue<string>("managerphone");
            }
            set {
                SetAttributeValue("managerphone", value);
            }
        }
        
        /// <summary>
        /// <para>Whether is only for marketing</para>
        /// <para>Display Name: Marketing Only</para>
        /// </summary>
        [AttributeLogicalName("marketingonly")]
        [DisplayName("Marketing Only")]
        public bool? MarketingOnly {
            get {
                return GetAttributeValue<bool?>("marketingonly");
            }
            set {
                SetAttributeValue("marketingonly", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the master contact for merge.</para>
        /// <para>Display Name: Master ID</para>
        /// </summary>
        [AttributeLogicalName("masterid")]
        [DisplayName("Master ID")]
        public EntityReference MasterId {
            get {
                return GetAttributeValue<EntityReference>("masterid");
            }
        }
        
        /// <summary>
        /// <para>Shows whether the account has been merged with a master contact.</para>
        /// <para>Display Name: Merged</para>
        /// </summary>
        [AttributeLogicalName("merged")]
        [DisplayName("Merged")]
        public bool? Merged {
            get {
                return GetAttributeValue<bool?>("merged");
            }
        }
        
        /// <summary>
        /// <para>Type the contact's middle name or initial to make sure the contact is addressed correctly.</para>
        /// <para>Display Name: Middle Name</para>
        /// </summary>
        [AttributeLogicalName("middlename")]
        [DisplayName("Middle Name")]
        [MaxLength(50)]
        public string MiddleName {
            get {
                return GetAttributeValue<string>("middlename");
            }
            set {
                SetAttributeValue("middlename", value);
            }
        }
        
        /// <summary>
        /// <para>Type the mobile phone number for the contact.</para>
        /// <para>Display Name: Mobile Phone</para>
        /// </summary>
        [AttributeLogicalName("mobilephone")]
        [DisplayName("Mobile Phone")]
        [MaxLength(50)]
        public string MobilePhone {
            get {
                return GetAttributeValue<string>("mobilephone");
            }
            set {
                SetAttributeValue("mobilephone", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        [DisplayName("Modified By")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Shows the external party who modified the record.</para>
        /// <para>Display Name: Modified By (External Party)</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyexternalparty")]
        [DisplayName("Modified By (External Party)")]
        public EntityReference ModifiedByExternalParty {
            get {
                return GetAttributeValue<EntityReference>("modifiedbyexternalparty");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        [DisplayName("Modified On")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        [DisplayName("Modified By (Delegate)")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Type the contact's nickname.</para>
        /// <para>Display Name: Nickname</para>
        /// </summary>
        [AttributeLogicalName("nickname")]
        [DisplayName("Nickname")]
        [MaxLength(100)]
        public string NickName {
            get {
                return GetAttributeValue<string>("nickname");
            }
            set {
                SetAttributeValue("nickname", value);
            }
        }
        
        /// <summary>
        /// <para>Type the number of children the contact has for reference in follow-up phone calls and other communications.</para>
        /// <para>Display Name: No. of Children</para>
        /// </summary>
        [AttributeLogicalName("numberofchildren")]
        [DisplayName("No. of Children")]
        [Range(0, 1000000000)]
        public int? NumberOfChildren {
            get {
                return GetAttributeValue<int?>("numberofchildren");
            }
            set {
                SetAttributeValue("numberofchildren", value);
            }
        }
        
        /// <summary>
        /// <para>Shows how long, in minutes, that the record was on hold.</para>
        /// <para>Display Name: On Hold Time (Minutes)</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        [DisplayName("On Hold Time (Minutes)")]
        [Range(-2147483648, 2147483647)]
        public int? OnHoldTime {
            get {
                return GetAttributeValue<int?>("onholdtime");
            }
        }
        
        /// <summary>
        /// <para>Shows the lead that the contact was created if the contact was created by converting a lead in Microsoft Dynamics 365. This is used to relate the contact to the data on the originating lead for use in reporting and analytics.</para>
        /// <para>Display Name: Originating Lead</para>
        /// </summary>
        [AttributeLogicalName("originatingleadid")]
        [DisplayName("Originating Lead")]
        public EntityReference OriginatingLeadId {
            get {
                return GetAttributeValue<EntityReference>("originatingleadid");
            }
            set {
                SetAttributeValue("originatingleadid", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        [DisplayName("Record Created On")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        [DisplayName("Owner")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit that owns the contact.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        [DisplayName("Owning Business Unit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team who owns the contact.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        [DisplayName("Owning Team")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who owns the contact.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        [DisplayName("Owning User")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Type the pager number for the contact.</para>
        /// <para>Display Name: Pager</para>
        /// </summary>
        [AttributeLogicalName("pager")]
        [DisplayName("Pager")]
        [MaxLength(50)]
        public string Pager {
            get {
                return GetAttributeValue<string>("pager");
            }
            set {
                SetAttributeValue("pager", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the parent contact.</para>
        /// <para>Display Name: Parent Contact</para>
        /// </summary>
        [AttributeLogicalName("parentcontactid")]
        [DisplayName("Parent Contact")]
        public EntityReference ParentContactId {
            get {
                return GetAttributeValue<EntityReference>("parentcontactid");
            }
        }
        
        /// <summary>
        /// <para>Select the parent account or parent contact for the contact to provide a quick link to additional details, such as financial information, activities, and opportunities.</para>
        /// <para>Display Name: Company Name</para>
        /// </summary>
        [AttributeLogicalName("parentcustomerid")]
        [DisplayName("Company Name")]
        public EntityReference ParentCustomerId {
            get {
                return GetAttributeValue<EntityReference>("parentcustomerid");
            }
            set {
                SetAttributeValue("parentcustomerid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the contact participates in workflow rules.</para>
        /// <para>Display Name: Participates in Workflow</para>
        /// </summary>
        [AttributeLogicalName("participatesinworkflow")]
        [DisplayName("Participates in Workflow")]
        public bool? ParticipatesInWorkflow {
            get {
                return GetAttributeValue<bool?>("participatesinworkflow");
            }
            set {
                SetAttributeValue("participatesinworkflow", value);
            }
        }
        
        /// <summary>
        /// <para>Select the payment terms to indicate when the customer needs to pay the total amount.</para>
        /// <para>Display Name: Payment Terms</para>
        /// </summary>
        [AttributeLogicalName("paymenttermscode")]
        [DisplayName("Payment Terms")]
        public Contact_PaymentTermsCode? PaymentTermsCode {
            get {
                return GetOptionSetValue<Contact_PaymentTermsCode>("paymenttermscode");
            }
            set {
                SetOptionSetValue("paymenttermscode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the preferred day of the week for service appointments.</para>
        /// <para>Display Name: Preferred Day</para>
        /// </summary>
        [AttributeLogicalName("preferredappointmentdaycode")]
        [DisplayName("Preferred Day")]
        public Contact_PreferredAppointmentDayCode? PreferredAppointmentDayCode {
            get {
                return GetOptionSetValue<Contact_PreferredAppointmentDayCode>("preferredappointmentdaycode");
            }
            set {
                SetOptionSetValue("preferredappointmentdaycode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the preferred time of day for service appointments.</para>
        /// <para>Display Name: Preferred Time</para>
        /// </summary>
        [AttributeLogicalName("preferredappointmenttimecode")]
        [DisplayName("Preferred Time")]
        public Contact_PreferredAppointmentTimeCode? PreferredAppointmentTimeCode {
            get {
                return GetOptionSetValue<Contact_PreferredAppointmentTimeCode>("preferredappointmenttimecode");
            }
            set {
                SetOptionSetValue("preferredappointmenttimecode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the preferred method of contact.</para>
        /// <para>Display Name: Preferred Method of Contact</para>
        /// </summary>
        [AttributeLogicalName("preferredcontactmethodcode")]
        [DisplayName("Preferred Method of Contact")]
        public Contact_PreferredContactMethodCode? PreferredContactMethodCode {
            get {
                return GetOptionSetValue<Contact_PreferredContactMethodCode>("preferredcontactmethodcode");
            }
            set {
                SetOptionSetValue("preferredcontactmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the contact's preferred service facility or equipment to make sure services are scheduled correctly for the customer.</para>
        /// <para>Display Name: Preferred Facility/Equipment</para>
        /// </summary>
        [AttributeLogicalName("preferredequipmentid")]
        [DisplayName("Preferred Facility/Equipment")]
        public EntityReference PreferredEquipmentId {
            get {
                return GetAttributeValue<EntityReference>("preferredequipmentid");
            }
            set {
                SetAttributeValue("preferredequipmentid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the contact's preferred service to make sure services are scheduled correctly for the customer.</para>
        /// <para>Display Name: Preferred Service</para>
        /// </summary>
        [AttributeLogicalName("preferredserviceid")]
        [DisplayName("Preferred Service")]
        public EntityReference PreferredServiceId {
            get {
                return GetAttributeValue<EntityReference>("preferredserviceid");
            }
            set {
                SetAttributeValue("preferredserviceid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the regular or preferred customer service representative for reference when scheduling service activities for the contact.</para>
        /// <para>Display Name: Preferred User</para>
        /// </summary>
        [AttributeLogicalName("preferredsystemuserid")]
        [DisplayName("Preferred User")]
        public EntityReference PreferredSystemUserId {
            get {
                return GetAttributeValue<EntityReference>("preferredsystemuserid");
            }
            set {
                SetAttributeValue("preferredsystemuserid", value);
            }
        }
        
        /// <summary>
        /// <para>Combines and shows the contact's first and last names so that the full name can be displayed in views and reports.</para>
        /// <para>Display Name: Full Name</para>
        /// </summary>
        [AttributeLogicalName("fullname")]
        [DisplayName("Full Name")]
        [MaxLength(160)]
        public string PrimaryNameField {
            get {
                return GetAttributeValue<string>("fullname");
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        [DisplayName("Process")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the service level agreement (SLA) that you want to apply to the Contact record.</para>
        /// <para>Display Name: SLA</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        [DisplayName("SLA")]
        public EntityReference SLAId {
            get {
                return GetAttributeValue<EntityReference>("slaid");
            }
            set {
                SetAttributeValue("slaid", value);
            }
        }
        
        /// <summary>
        /// <para>Last SLA that was applied to this case. This field is for internal use only.</para>
        /// <para>Display Name: Last SLA applied</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        [DisplayName("Last SLA applied")]
        public EntityReference SLAInvokedId {
            get {
                return GetAttributeValue<EntityReference>("slainvokedid");
            }
        }
        
        /// <summary>
        /// <para>Type the salutation of the contact to make sure the contact is addressed correctly in sales calls, email messages, and marketing campaigns.</para>
        /// <para>Display Name: Salutation</para>
        /// </summary>
        [AttributeLogicalName("salutation")]
        [DisplayName("Salutation")]
        [MaxLength(100)]
        public string Salutation {
            get {
                return GetAttributeValue<string>("salutation");
            }
            set {
                SetAttributeValue("salutation", value);
            }
        }
        
        /// <summary>
        /// <para>Select a shipping method for deliveries sent to this address.</para>
        /// <para>Display Name: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("shippingmethodcode")]
        [DisplayName("Shipping Method")]
        public Contact_ShippingMethodCode? ShippingMethodCode {
            get {
                return GetOptionSetValue<Contact_ShippingMethodCode>("shippingmethodcode");
            }
            set {
                SetOptionSetValue("shippingmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the name of the contact's spouse or partner for reference during calls, events, or other communications with the contact.</para>
        /// <para>Display Name: Spouse/Partner Name</para>
        /// </summary>
        [AttributeLogicalName("spousesname")]
        [DisplayName("Spouse/Partner Name")]
        [MaxLength(100)]
        public string SpousesName {
            get {
                return GetAttributeValue<string>("spousesname");
            }
            set {
                SetAttributeValue("spousesname", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Display Name: (Deprecated) Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        [DisplayName("(Deprecated) Process Stage")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the contact is active or inactive. Inactive contacts are read-only and can't be edited unless they are reactivated.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        [DisplayName("Status")]
        public ContactState? StateCode {
            get {
                return GetOptionSetValue<ContactState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the contact's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        [DisplayName("Status Reason")]
        public Contact_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<Contact_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Subscription</para>
        /// </summary>
        [AttributeLogicalName("subscriptionid")]
        [DisplayName("Subscription")]
        public Guid? SubscriptionId {
            get {
                return GetAttributeValue<Guid?>("subscriptionid");
            }
            set {
                SetAttributeValue("subscriptionid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the suffix used in the contact's name, such as Jr. or Sr. to make sure the contact is addressed correctly in sales calls, email, and marketing campaigns.</para>
        /// <para>Display Name: Suffix</para>
        /// </summary>
        [AttributeLogicalName("suffix")]
        [DisplayName("Suffix")]
        [MaxLength(10)]
        public string Suffix {
            get {
                return GetAttributeValue<string>("suffix");
            }
            set {
                SetAttributeValue("suffix", value);
            }
        }
        
        /// <summary>
        /// <para>Number of users or conversations followed the record</para>
        /// <para>Display Name: TeamsFollowed</para>
        /// </summary>
        [AttributeLogicalName("teamsfollowed")]
        [DisplayName("TeamsFollowed")]
        [Range(-2147483648, 2147483647)]
        public int? TeamsFollowed {
            get {
                return GetAttributeValue<int?>("teamsfollowed");
            }
            set {
                SetAttributeValue("teamsfollowed", value);
            }
        }
        
        /// <summary>
        /// <para>Type the main phone number for this contact.</para>
        /// <para>Display Name: Business Phone</para>
        /// </summary>
        [AttributeLogicalName("telephone1")]
        [DisplayName("Business Phone")]
        [MaxLength(50)]
        public string Telephone1 {
            get {
                return GetAttributeValue<string>("telephone1");
            }
            set {
                SetAttributeValue("telephone1", value);
            }
        }
        
        /// <summary>
        /// <para>Type a second phone number for this contact.</para>
        /// <para>Display Name: Home Phone</para>
        /// </summary>
        [AttributeLogicalName("telephone2")]
        [DisplayName("Home Phone")]
        [MaxLength(50)]
        public string Telephone2 {
            get {
                return GetAttributeValue<string>("telephone2");
            }
            set {
                SetAttributeValue("telephone2", value);
            }
        }
        
        /// <summary>
        /// <para>Type a third phone number for this contact.</para>
        /// <para>Display Name: Telephone 3</para>
        /// </summary>
        [AttributeLogicalName("telephone3")]
        [DisplayName("Telephone 3")]
        [MaxLength(50)]
        public string Telephone3 {
            get {
                return GetAttributeValue<string>("telephone3");
            }
            set {
                SetAttributeValue("telephone3", value);
            }
        }
        
        /// <summary>
        /// <para>Select a region or territory for the contact for use in segmentation and analysis.</para>
        /// <para>Display Name: Territory</para>
        /// </summary>
        [AttributeLogicalName("territorycode")]
        [DisplayName("Territory")]
        public Contact_TerritoryCode? TerritoryCode {
            get {
                return GetOptionSetValue<Contact_TerritoryCode>("territorycode");
            }
            set {
                SetOptionSetValue("territorycode", value);
            }
        }
        
        /// <summary>
        /// <para>Total time spent for emails (read and write) and meetings by me in relation to the contact record.</para>
        /// <para>Display Name: Time Spent by me</para>
        /// </summary>
        [AttributeLogicalName("timespentbymeonemailandmeetings")]
        [DisplayName("Time Spent by me")]
        [MaxLength(1250)]
        public string TimeSpentByMeOnEmailAndMeetings {
            get {
                return GetAttributeValue<string>("timespentbymeonemailandmeetings");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        [DisplayName("Time Zone Rule Version Number")]
        [Range(-1, 2147483647)]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        [DisplayName("Currency")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: (Deprecated) Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        [DisplayName("(Deprecated) Traversed Path")]
        [MaxLength(1250)]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        [DisplayName("UTC Conversion Time Zone Code")]
        [Range(-1, 2147483647)]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Version number of the contact.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        [DisplayName("Version Number")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Type the contact's professional or personal website or blog URL.</para>
        /// <para>Display Name: Website</para>
        /// </summary>
        [AttributeLogicalName("websiteurl")]
        [DisplayName("Website")]
        [MaxLength(200)]
        public string WebSiteUrl {
            get {
                return GetAttributeValue<string>("websiteurl");
            }
            set {
                SetAttributeValue("websiteurl", value);
            }
        }
        
        /// <summary>
        /// <para>Type the phonetic spelling of the contact's first name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the contact.</para>
        /// <para>Display Name: Yomi First Name</para>
        /// </summary>
        [AttributeLogicalName("yomifirstname")]
        [DisplayName("Yomi First Name")]
        [MaxLength(150)]
        public string YomiFirstName {
            get {
                return GetAttributeValue<string>("yomifirstname");
            }
            set {
                SetAttributeValue("yomifirstname", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the combined Yomi first and last names of the contact so that the full phonetic name can be displayed in views and reports.</para>
        /// <para>Display Name: Yomi Full Name</para>
        /// </summary>
        [AttributeLogicalName("yomifullname")]
        [DisplayName("Yomi Full Name")]
        [MaxLength(450)]
        public string YomiFullName {
            get {
                return GetAttributeValue<string>("yomifullname");
            }
        }
        
        /// <summary>
        /// <para>Type the phonetic spelling of the contact's last name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the contact.</para>
        /// <para>Display Name: Yomi Last Name</para>
        /// </summary>
        [AttributeLogicalName("yomilastname")]
        [DisplayName("Yomi Last Name")]
        [MaxLength(150)]
        public string YomiLastName {
            get {
                return GetAttributeValue<string>("yomilastname");
            }
            set {
                SetAttributeValue("yomilastname", value);
            }
        }
        
        /// <summary>
        /// <para>Type the phonetic spelling of the contact's middle name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the contact.</para>
        /// <para>Display Name: Yomi Middle Name</para>
        /// </summary>
        [AttributeLogicalName("yomimiddlename")]
        [DisplayName("Yomi Middle Name")]
        [MaxLength(150)]
        public string YomiMiddleName {
            get {
                return GetAttributeValue<string>("yomimiddlename");
            }
            set {
                SetAttributeValue("yomimiddlename", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Confirm Remove Password</para>
        /// </summary>
        [AttributeLogicalName("adx_confirmremovepassword")]
        [DisplayName("Confirm Remove Password")]
        public bool? adx_ConfirmRemovePassword {
            get {
                return GetAttributeValue<bool?>("adx_confirmremovepassword");
            }
            set {
                SetAttributeValue("adx_confirmremovepassword", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Public Profile Copy</para>
        /// </summary>
        [AttributeLogicalName("adx_publicprofilecopy")]
        [DisplayName("Public Profile Copy")]
        public string adx_PublicProfileCopy {
            get {
                return GetAttributeValue<string>("adx_publicprofilecopy");
            }
            set {
                SetAttributeValue("adx_publicprofilecopy", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the current count of failed password attempts for the contact.</para>
        /// <para>Display Name: Access Failed Count</para>
        /// </summary>
        [AttributeLogicalName("adx_identity_accessfailedcount")]
        [DisplayName("Access Failed Count")]
        [Range(-2147483648, 2147483647)]
        public int? adx_identity_accessfailedcount {
            get {
                return GetAttributeValue<int?>("adx_identity_accessfailedcount");
            }
            set {
                SetAttributeValue("adx_identity_accessfailedcount", value);
            }
        }
        
        /// <summary>
        /// <para>Determines if the email is confirmed by the contact.</para>
        /// <para>Display Name: Email Confirmed</para>
        /// </summary>
        [AttributeLogicalName("adx_identity_emailaddress1confirmed")]
        [DisplayName("Email Confirmed")]
        public bool? adx_identity_emailaddress1confirmed {
            get {
                return GetAttributeValue<bool?>("adx_identity_emailaddress1confirmed");
            }
            set {
                SetAttributeValue("adx_identity_emailaddress1confirmed", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates the last date and time the user successfully signed in to a portal.</para>
        /// <para>Display Name: Last Successful Login</para>
        /// </summary>
        [AttributeLogicalName("adx_identity_lastsuccessfullogin")]
        [DisplayName("Last Successful Login")]
        public DateTime? adx_identity_lastsuccessfullogin {
            get {
                return GetAttributeValue<DateTime?>("adx_identity_lastsuccessfullogin");
            }
            set {
                SetAttributeValue("adx_identity_lastsuccessfullogin", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates that the contact can no longer sign in to the portal using the local account.</para>
        /// <para>Display Name: Local Login Disabled</para>
        /// </summary>
        [AttributeLogicalName("adx_identity_locallogindisabled")]
        [DisplayName("Local Login Disabled")]
        public bool? adx_identity_locallogindisabled {
            get {
                return GetAttributeValue<bool?>("adx_identity_locallogindisabled");
            }
            set {
                SetAttributeValue("adx_identity_locallogindisabled", value);
            }
        }
        
        /// <summary>
        /// <para>Determines if this contact will track failed access attempts and become locked after too many failed attempts. To prevent the contact from becoming locked, you can disable this setting.</para>
        /// <para>Display Name: Lockout Enabled</para>
        /// </summary>
        [AttributeLogicalName("adx_identity_lockoutenabled")]
        [DisplayName("Lockout Enabled")]
        public bool? adx_identity_lockoutenabled {
            get {
                return GetAttributeValue<bool?>("adx_identity_lockoutenabled");
            }
            set {
                SetAttributeValue("adx_identity_lockoutenabled", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the moment in time when the locked contact becomes unlocked again.</para>
        /// <para>Display Name: Lockout End Date</para>
        /// </summary>
        [AttributeLogicalName("adx_identity_lockoutenddate")]
        [DisplayName("Lockout End Date")]
        public DateTime? adx_identity_lockoutenddate {
            get {
                return GetAttributeValue<DateTime?>("adx_identity_lockoutenddate");
            }
            set {
                SetAttributeValue("adx_identity_lockoutenddate", value);
            }
        }
        
        /// <summary>
        /// <para>Determines if web authentication is enabled for the contact.</para>
        /// <para>Display Name: Login Enabled</para>
        /// </summary>
        [AttributeLogicalName("adx_identity_logonenabled")]
        [DisplayName("Login Enabled")]
        public bool? adx_identity_logonenabled {
            get {
                return GetAttributeValue<bool?>("adx_identity_logonenabled");
            }
            set {
                SetAttributeValue("adx_identity_logonenabled", value);
            }
        }
        
        /// <summary>
        /// <para>Determines if the phone number is confirmed by the contact.</para>
        /// <para>Display Name: Mobile Phone Confirmed</para>
        /// </summary>
        [AttributeLogicalName("adx_identity_mobilephoneconfirmed")]
        [DisplayName("Mobile Phone Confirmed")]
        public bool? adx_identity_mobilephoneconfirmed {
            get {
                return GetAttributeValue<bool?>("adx_identity_mobilephoneconfirmed");
            }
            set {
                SetAttributeValue("adx_identity_mobilephoneconfirmed", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: New Password Input</para>
        /// </summary>
        [AttributeLogicalName("adx_identity_newpassword")]
        [DisplayName("New Password Input")]
        [MaxLength(100)]
        public string adx_identity_newpassword {
            get {
                return GetAttributeValue<string>("adx_identity_newpassword");
            }
            set {
                SetAttributeValue("adx_identity_newpassword", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Password Hash</para>
        /// </summary>
        [AttributeLogicalName("adx_identity_passwordhash")]
        [DisplayName("Password Hash")]
        [MaxLength(128)]
        public string adx_identity_passwordhash {
            get {
                return GetAttributeValue<string>("adx_identity_passwordhash");
            }
            set {
                SetAttributeValue("adx_identity_passwordhash", value);
            }
        }
        
        /// <summary>
        /// <para>A token used to manage the web authentication session.</para>
        /// <para>Display Name: Security Stamp</para>
        /// </summary>
        [AttributeLogicalName("adx_identity_securitystamp")]
        [DisplayName("Security Stamp")]
        [MaxLength(100)]
        public string adx_identity_securitystamp {
            get {
                return GetAttributeValue<string>("adx_identity_securitystamp");
            }
            set {
                SetAttributeValue("adx_identity_securitystamp", value);
            }
        }
        
        /// <summary>
        /// <para>Determines if two-factor authentication is enabled for the contact.</para>
        /// <para>Display Name: Two Factor Enabled</para>
        /// </summary>
        [AttributeLogicalName("adx_identity_twofactorenabled")]
        [DisplayName("Two Factor Enabled")]
        public bool? adx_identity_twofactorenabled {
            get {
                return GetAttributeValue<bool?>("adx_identity_twofactorenabled");
            }
            set {
                SetAttributeValue("adx_identity_twofactorenabled", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the user identity for local web authentication.</para>
        /// <para>Display Name: User Name</para>
        /// </summary>
        [AttributeLogicalName("adx_identity_username")]
        [DisplayName("User Name")]
        [MaxLength(100)]
        public string adx_identity_username {
            get {
                return GetAttributeValue<string>("adx_identity_username");
            }
            set {
                SetAttributeValue("adx_identity_username", value);
            }
        }
        
        /// <summary>
        /// <para>User’s preferred portal LCID</para>
        /// <para>Display Name: Preferred LCID (Deprecated)</para>
        /// </summary>
        [AttributeLogicalName("adx_preferredlcid")]
        [DisplayName("Preferred LCID (Deprecated)")]
        [Range(-2147483648, 2147483647)]
        public int? adx_preferredlcid {
            get {
                return GetAttributeValue<int?>("adx_preferredlcid");
            }
            set {
                SetAttributeValue("adx_preferredlcid", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Profile Alert</para>
        /// </summary>
        [AttributeLogicalName("adx_profilealert")]
        [DisplayName("Profile Alert")]
        public bool? adx_profilealert {
            get {
                return GetAttributeValue<bool?>("adx_profilealert");
            }
            set {
                SetAttributeValue("adx_profilealert", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Profile Alert Date</para>
        /// </summary>
        [AttributeLogicalName("adx_profilealertdate")]
        [DisplayName("Profile Alert Date")]
        public DateTime? adx_profilealertdate {
            get {
                return GetAttributeValue<DateTime?>("adx_profilealertdate");
            }
            set {
                SetAttributeValue("adx_profilealertdate", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Profile Alert Instructions</para>
        /// </summary>
        [AttributeLogicalName("adx_profilealertinstructions")]
        [DisplayName("Profile Alert Instructions")]
        public string adx_profilealertinstructions {
            get {
                return GetAttributeValue<string>("adx_profilealertinstructions");
            }
            set {
                SetAttributeValue("adx_profilealertinstructions", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Profile Modified On</para>
        /// </summary>
        [AttributeLogicalName("adx_profilemodifiedon")]
        [DisplayName("Profile Modified On")]
        public DateTime? adx_profilemodifiedon {
            get {
                return GetAttributeValue<DateTime?>("adx_profilemodifiedon");
            }
            set {
                SetAttributeValue("adx_profilemodifiedon", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for Account associated with Contact.</para>
        /// <para>Display Name: Managing Partner</para>
        /// </summary>
        [AttributeLogicalName("msa_managingpartnerid")]
        [DisplayName("Managing Partner")]
        public EntityReference msa_managingpartnerid {
            get {
                return GetAttributeValue<EntityReference>("msa_managingpartnerid");
            }
            set {
                SetAttributeValue("msa_managingpartnerid", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates the primary time zone that the contact works on.</para>
        /// <para>Display Name: Primary Time Zone</para>
        /// </summary>
        [AttributeLogicalName("msdyn_primarytimezone")]
        [DisplayName("Primary Time Zone")]
        [Range(-1500, 1500)]
        public int? msdyn_PrimaryTimeZone {
            get {
                return GetAttributeValue<int?>("msdyn_primarytimezone");
            }
            set {
                SetAttributeValue("msdyn_primarytimezone", value);
            }
        }
        
        /// <summary>
        /// <para>Maps to contact KPI records</para>
        /// <para>Display Name: KPI</para>
        /// </summary>
        [AttributeLogicalName("msdyn_contactkpiid")]
        [DisplayName("KPI")]
        public EntityReference msdyn_contactkpiid {
            get {
                return GetAttributeValue<EntityReference>("msdyn_contactkpiid");
            }
            set {
                SetAttributeValue("msdyn_contactkpiid", value);
            }
        }
        
        /// <summary>
        /// <para>Indicate buying influence using labels</para>
        /// <para>Display Name: Decision influence labels</para>
        /// </summary>
        [AttributeLogicalName("msdyn_decisioninfluencetag")]
        [DisplayName("Decision influence labels")]
        public Contact_msdyn_decisioninfluencetag? msdyn_decisioninfluencetag {
            get {
                return GetOptionSetValue<Contact_msdyn_decisioninfluencetag>("msdyn_decisioninfluencetag");
            }
            set {
                SetOptionSetValue("msdyn_decisioninfluencetag", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates that the contact has opted out of web tracking.</para>
        /// <para>Display Name: Disable Web Tracking</para>
        /// </summary>
        [AttributeLogicalName("msdyn_disablewebtracking")]
        [DisplayName("Disable Web Tracking")]
        public bool? msdyn_disablewebtracking {
            get {
                return GetAttributeValue<bool?>("msdyn_disablewebtracking");
            }
            set {
                SetAttributeValue("msdyn_disablewebtracking", value);
            }
        }
        
        /// <summary>
        /// <para>Describes whether contact is opted out or not</para>
        /// <para>Display Name: GDPR Optout</para>
        /// </summary>
        [AttributeLogicalName("msdyn_gdproptout")]
        [DisplayName("GDPR Optout")]
        public bool? msdyn_gdproptout {
            get {
                return GetAttributeValue<bool?>("msdyn_gdproptout");
            }
            set {
                SetAttributeValue("msdyn_gdproptout", value);
            }
        }
        
        /// <summary>
        /// <para>Describes if the contact is an assistant in org chart</para>
        /// <para>Display Name: Is Assistant</para>
        /// </summary>
        [AttributeLogicalName("msdyn_isassistantinorgchart")]
        [DisplayName("Is Assistant")]
        public bool? msdyn_isassistantinorgchart {
            get {
                return GetAttributeValue<bool?>("msdyn_isassistantinorgchart");
            }
            set {
                SetAttributeValue("msdyn_isassistantinorgchart", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates that the contact is considered a minor in their jurisdiction.</para>
        /// <para>Display Name: Is Minor</para>
        /// </summary>
        [AttributeLogicalName("msdyn_isminor")]
        [DisplayName("Is Minor")]
        public bool? msdyn_isminor {
            get {
                return GetAttributeValue<bool?>("msdyn_isminor");
            }
            set {
                SetAttributeValue("msdyn_isminor", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates that the contact is considered a minor in their jurisdiction and has parental consent.</para>
        /// <para>Display Name: Is Minor with Parental Consent</para>
        /// </summary>
        [AttributeLogicalName("msdyn_isminorwithparentalconsent")]
        [DisplayName("Is Minor with Parental Consent")]
        public bool? msdyn_isminorwithparentalconsent {
            get {
                return GetAttributeValue<bool?>("msdyn_isminorwithparentalconsent");
            }
            set {
                SetAttributeValue("msdyn_isminorwithparentalconsent", value);
            }
        }
        
        /// <summary>
        /// <para>Whether or not the contact belongs to the associated account</para>
        /// <para>Display Name: Not at Company Flag</para>
        /// </summary>
        [AttributeLogicalName("msdyn_orgchangestatus")]
        [DisplayName("Not at Company Flag")]
        public Contact_msdyn_orgchangestatus? msdyn_orgchangestatus {
            get {
                return GetOptionSetValue<Contact_msdyn_orgchangestatus>("msdyn_orgchangestatus");
            }
            set {
                SetOptionSetValue("msdyn_orgchangestatus", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates the date and time that the person agreed to the portal terms and conditions.</para>
        /// <para>Display Name: Portal Terms Agreement Date</para>
        /// </summary>
        [AttributeLogicalName("msdyn_portaltermsagreementdate")]
        [DisplayName("Portal Terms Agreement Date")]
        public DateTime? msdyn_portaltermsagreementdate {
            get {
                return GetAttributeValue<DateTime?>("msdyn_portaltermsagreementdate");
            }
            set {
                SetAttributeValue("msdyn_portaltermsagreementdate", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for Segment associated with contact.</para>
        /// <para>Display Name: Segment Id</para>
        /// </summary>
        [AttributeLogicalName("msdyn_segmentid")]
        [DisplayName("Segment Id")]
        public EntityReference msdyn_segmentid {
            get {
                return GetAttributeValue<EntityReference>("msdyn_segmentid");
            }
            set {
                SetAttributeValue("msdyn_segmentid", value);
            }
        }
        
        /// <summary>
        /// <para>User’s preferred portal language</para>
        /// <para>Display Name: Preferred Language</para>
        /// </summary>
        [AttributeLogicalName("mspp_userpreferredlcid")]
        [DisplayName("Preferred Language")]
        public powerpagelanguages? mspp_userpreferredlcid {
            get {
                return GetOptionSetValue<powerpagelanguages>("mspp_userpreferredlcid");
            }
            set {
                SetOptionSetValue("mspp_userpreferredlcid", value);
            }
        }
        
        [RelationshipSchemaName("Contact_Annotation")]
        public IEnumerable<Annotation> Contact_Annotation {
            get {
                return GetRelatedEntities<Annotation>("Contact_Annotation", null);
            }
            set {
                SetRelatedEntities("Contact_Annotation", null, value);
            }
        }
        
        [RelationshipSchemaName("Contact_Tasks")]
        public IEnumerable<Task> Contact_Tasks {
            get {
                return GetRelatedEntities<Task>("Contact_Tasks", null);
            }
            set {
                SetRelatedEntities("Contact_Tasks", null, value);
            }
        }
        
        [RelationshipSchemaName("contact_customer_contacts", EntityRole.Referenced)]
        public IEnumerable<Contact> Referencedcontact_customer_contacts {
            get {
                return GetRelatedEntities<Contact>("contact_customer_contacts", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("contact_customer_contacts", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("contact_master_contact", EntityRole.Referenced)]
        public IEnumerable<Contact> Referencedcontact_master_contact {
            get {
                return GetRelatedEntities<Contact>("contact_master_contact", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("contact_master_contact", EntityRole.Referenced, value);
            }
        }
        
        [AttributeLogicalName("parentcustomerid")]
        [RelationshipSchemaName("contact_customer_contacts", EntityRole.Referencing)]
        public Contact Referencingcontact_customer_contacts {
            get {
                return GetRelatedEntity<Contact>("contact_customer_contacts", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("contact_customer_contacts", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("masterid")]
        [RelationshipSchemaName("contact_master_contact", EntityRole.Referencing)]
        public Contact Referencingcontact_master_contact {
            get {
                return GetRelatedEntity<Contact>("contact_master_contact", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("contact_master_contact", EntityRole.Referencing, value);
            }
        }
        
        [RelationshipSchemaName("account_primary_contact")]
        public IEnumerable<Account> account_primary_contact {
            get {
                return GetRelatedEntities<Account>("account_primary_contact", null);
            }
            set {
                SetRelatedEntities("account_primary_contact", null, value);
            }
        }
        
        [AttributeLogicalName("parentcustomerid")]
        [RelationshipSchemaName("contact_customer_accounts")]
        public Account contact_customer_accounts {
            get {
                return GetRelatedEntity<Account>("contact_customer_accounts", null);
            }
            set {
                SetRelatedEntity("contact_customer_accounts", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("contact_owning_user")]
        public SystemUser contact_owning_user {
            get {
                return GetRelatedEntity<SystemUser>("contact_owning_user", null);
            }
            set {
                SetRelatedEntity("contact_owning_user", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_contact_createdonbehalfby")]
        public SystemUser lk_contact_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_contact_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_contact_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_contact_modifiedonbehalfby")]
        public SystemUser lk_contact_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_contact_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_contact_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_contactbase_createdby")]
        public SystemUser lk_contactbase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_contactbase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_contactbase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_contactbase_modifiedby")]
        public SystemUser lk_contactbase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_contactbase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_contactbase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("mgs_invoice_Contact_contact")]
        public IEnumerable<mgs_Invoice> mgs_invoice_Contact_contact {
            get {
                return GetRelatedEntities<mgs_Invoice>("mgs_invoice_Contact_contact", null);
            }
            set {
                SetRelatedEntities("mgs_invoice_Contact_contact", null, value);
            }
        }
        
        [RelationshipSchemaName("mgs_subscription_Contact_contact")]
        public IEnumerable<mgs_Subscription> mgs_subscription_Contact_contact {
            get {
                return GetRelatedEntities<mgs_Subscription>("mgs_subscription_Contact_contact", null);
            }
            set {
                SetRelatedEntities("mgs_subscription_Contact_contact", null, value);
            }
        }
        
        [AttributeLogicalName("msa_managingpartnerid")]
        [RelationshipSchemaName("msa_contact_managingpartner")]
        public Account msa_contact_managingpartner {
            get {
                return GetRelatedEntity<Account>("msa_contact_managingpartner", null);
            }
            set {
                SetRelatedEntity("msa_contact_managingpartner", null, value);
            }
        }
        
        [AttributeLogicalName("preferredsystemuserid")]
        [RelationshipSchemaName("system_user_contacts")]
        public SystemUser system_user_contacts {
            get {
                return GetRelatedEntity<SystemUser>("system_user_contacts", null);
            }
            set {
                SetRelatedEntity("system_user_contacts", null, value);
            }
        }
        
        public static Contact Retrieve(IOrganizationService service, Guid id, params Expression<Func<Contact,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Rule used to identify potential duplicates.</para>
    /// <para>Display Name: Duplicate Detection Rule</para>
    /// </summary>
    [EntityLogicalName("duplicaterule")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class DuplicateRule : ExtendedEntity<DuplicateRuleState, DuplicateRule_StatusCode> {
        
        public const string EntityLogicalName = "duplicaterule";
        
        public const int EntityTypeCode = 4414;
        
        public DuplicateRule() : 
                base(EntityLogicalName) {
        }
        
        public DuplicateRule(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("duplicateruleid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("duplicateruleid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the duplicate detection rule.</para>
        /// <para>Display Name: Duplicate Detection Rule</para>
        /// </summary>
        [AttributeLogicalName("duplicateruleid")]
        [DisplayName("Duplicate Detection Rule")]
        public Guid? DuplicateRuleId {
            get {
                return GetAttributeValue<Guid?>("duplicateruleid");
            }
            set {
                SetId("duplicateruleid", value);
            }
        }
        
        /// <summary>
        /// <para>Database table that stores match codes for the record type being evaluated for potential duplicates.</para>
        /// <para>Display Name: Base Record Type Match Code Table</para>
        /// </summary>
        [AttributeLogicalName("baseentitymatchcodetable")]
        [DisplayName("Base Record Type Match Code Table")]
        [MaxLength(50)]
        public string BaseEntityMatchCodeTable {
            get {
                return GetAttributeValue<string>("baseentitymatchcodetable");
            }
        }
        
        /// <summary>
        /// <para>Record type of the record being evaluated for potential duplicates.</para>
        /// <para>Display Name: Base Record Type</para>
        /// </summary>
        [AttributeLogicalName("baseentityname")]
        [DisplayName("Base Record Type")]
        [MaxLength(160)]
        public string BaseEntityName {
            get {
                return GetAttributeValue<string>("baseentityname");
            }
            set {
                SetAttributeValue("baseentityname", value);
            }
        }
        
        /// <summary>
        /// <para>Record type of the record being evaluated for potential duplicates.</para>
        /// <para>Display Name: Base Record Type</para>
        /// </summary>
        [AttributeLogicalName("baseentitytypecode")]
        [DisplayName("Base Record Type")]
        public DuplicateRule_BaseEntityTypeCode? BaseEntityTypeCode {
            get {
                return GetOptionSetValue<DuplicateRule_BaseEntityTypeCode>("baseentitytypecode");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Row id unique</para>
        /// </summary>
        [AttributeLogicalName("componentidunique")]
        [DisplayName("Row id unique")]
        public Guid? ComponentIdUnique {
            get {
                return GetAttributeValue<Guid?>("componentidunique");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Component State</para>
        /// </summary>
        [AttributeLogicalName("componentstate")]
        [DisplayName("Component State")]
        public componentstate? ComponentState {
            get {
                return GetOptionSetValue<componentstate>("componentstate");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the duplicate detection rule.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        [DisplayName("Created By")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the duplicate detection rule was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        [DisplayName("Created On")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the duplicaterule.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        [DisplayName("Created By (Delegate)")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Description of the duplicate detection rule.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        [DisplayName("Description")]
        [MaxLength(2000)]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Determines whether to flag inactive records as duplicates</para>
        /// <para>Display Name: Exclude Inactive Records</para>
        /// </summary>
        [AttributeLogicalName("excludeinactiverecords")]
        [DisplayName("Exclude Inactive Records")]
        public bool? ExcludeInactiveRecords {
            get {
                return GetAttributeValue<bool?>("excludeinactiverecords");
            }
            set {
                SetAttributeValue("excludeinactiverecords", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates if the operator is case-sensitive.</para>
        /// <para>Display Name: Case Sensitive</para>
        /// </summary>
        [AttributeLogicalName("iscasesensitive")]
        [DisplayName("Case Sensitive")]
        public bool? IsCaseSensitive {
            get {
                return GetAttributeValue<bool?>("iscasesensitive");
            }
            set {
                SetAttributeValue("iscasesensitive", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Is Customizable</para>
        /// </summary>
        [AttributeLogicalName("iscustomizable")]
        [DisplayName("Is Customizable")]
        public BooleanManagedProperty IsCustomizable {
            get {
                return GetAttributeValue<BooleanManagedProperty>("iscustomizable");
            }
            set {
                SetAttributeValue("iscustomizable", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the solution component is part of a managed solution.</para>
        /// <para>Display Name: Is Managed</para>
        /// </summary>
        [AttributeLogicalName("ismanaged")]
        [DisplayName("Is Managed")]
        public bool? IsManaged {
            get {
                return GetAttributeValue<bool?>("ismanaged");
            }
        }
        
        /// <summary>
        /// <para>Database table that stores match codes for potential duplicate records.</para>
        /// <para>Display Name: Matching Record Type Match Code Table</para>
        /// </summary>
        [AttributeLogicalName("matchingentitymatchcodetable")]
        [DisplayName("Matching Record Type Match Code Table")]
        [MaxLength(50)]
        public string MatchingEntityMatchCodeTable {
            get {
                return GetAttributeValue<string>("matchingentitymatchcodetable");
            }
        }
        
        /// <summary>
        /// <para>Record type of the records being evaluated as potential duplicates.</para>
        /// <para>Display Name: Matching Record Type</para>
        /// </summary>
        [AttributeLogicalName("matchingentityname")]
        [DisplayName("Matching Record Type")]
        [MaxLength(160)]
        public string MatchingEntityName {
            get {
                return GetAttributeValue<string>("matchingentityname");
            }
            set {
                SetAttributeValue("matchingentityname", value);
            }
        }
        
        /// <summary>
        /// <para>Record type of the records being evaluated as potential duplicates.</para>
        /// <para>Display Name: Matching Record Type</para>
        /// </summary>
        [AttributeLogicalName("matchingentitytypecode")]
        [DisplayName("Matching Record Type")]
        public DuplicateRule_MatchingEntityTypeCode? MatchingEntityTypeCode {
            get {
                return GetOptionSetValue<DuplicateRule_MatchingEntityTypeCode>("matchingentitytypecode");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who last modified the duplicate detection rule.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        [DisplayName("Modified By")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the duplicate detection rule was last modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        [DisplayName("Modified On")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who last modified the duplicaterule.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        [DisplayName("Modified By (Delegate)")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Name of the duplicate detection rule.</para>
        /// <para>Display Name: Rule Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        [DisplayName("Rule Name")]
        [MaxLength(160)]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Record Overwrite Time</para>
        /// </summary>
        [AttributeLogicalName("overwritetime")]
        [DisplayName("Record Overwrite Time")]
        public DateTime? OverwriteTime {
            get {
                return GetAttributeValue<DateTime?>("overwritetime");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the duplicate detection rule.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        [DisplayName("Owner")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit that owns duplicate detection rule.</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team who owns the duplicate detection rule.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        [DisplayName("Owning Team")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who owns the duplicate detection rule.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        [DisplayName("Owning User")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Name of the duplicate detection rule.</para>
        /// <para>Display Name: Rule Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        [DisplayName("Rule Name")]
        [MaxLength(160)]
        public string PrimaryNameField {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the associated solution.</para>
        /// <para>Display Name: Solution</para>
        /// </summary>
        [AttributeLogicalName("solutionid")]
        [DisplayName("Solution")]
        public Guid? SolutionId {
            get {
                return GetAttributeValue<Guid?>("solutionid");
            }
        }
        
        /// <summary>
        /// <para>Status of the duplicate detection rule.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        [DisplayName("Status")]
        public DuplicateRuleState? StateCode {
            get {
                return GetOptionSetValue<DuplicateRuleState>("statecode");
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the duplicate detection rule.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        [DisplayName("Status Reason")]
        public DuplicateRule_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<DuplicateRule_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        [Range(-1, 2147483647)]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        [Range(-1, 2147483647)]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: UniqueName</para>
        /// </summary>
        [AttributeLogicalName("uniquename")]
        [DisplayName("UniqueName")]
        [MaxLength(100)]
        public string UniqueName {
            get {
                return GetAttributeValue<string>("uniquename");
            }
            set {
                SetAttributeValue("uniquename", value);
            }
        }
        
        [RelationshipSchemaName("DuplicateRule_Annotation")]
        public IEnumerable<Annotation> DuplicateRule_Annotation {
            get {
                return GetRelatedEntities<Annotation>("DuplicateRule_Annotation", null);
            }
            set {
                SetRelatedEntities("DuplicateRule_Annotation", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("SystemUser_DuplicateRules")]
        public SystemUser SystemUser_DuplicateRules {
            get {
                return GetRelatedEntity<SystemUser>("SystemUser_DuplicateRules", null);
            }
            set {
                SetRelatedEntity("SystemUser_DuplicateRules", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_duplicaterule_createdonbehalfby")]
        public SystemUser lk_duplicaterule_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_duplicaterule_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_duplicaterule_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_duplicaterule_modifiedonbehalfby")]
        public SystemUser lk_duplicaterule_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_duplicaterule_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_duplicaterule_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_duplicaterulebase_createdby")]
        public SystemUser lk_duplicaterulebase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_duplicaterulebase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_duplicaterulebase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_duplicaterulebase_modifiedby")]
        public SystemUser lk_duplicaterulebase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_duplicaterulebase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_duplicaterulebase_modifiedby", null, value);
            }
        }
        
        public static DuplicateRule Retrieve(IOrganizationService service, Guid id, params Expression<Func<DuplicateRule,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
        
        /// <summary>
        /// <para>Retrieves the record using the alternate key called 'dupdetectionuniquekey'</para>
        /// </summary>
        public static DuplicateRule Retrieve_dupdetectionuniquekey(IOrganizationService service, componentstate ComponentState, DateTime OverwriteTime, string UniqueName, params Expression<Func<DuplicateRule,object>>[] attrs) {
            KeyAttributeCollection keys = new KeyAttributeCollection();
            keys.Add("componentstate", ComponentState);
            keys.Add("overwritetime", OverwriteTime);
            keys.Add("uniquename", UniqueName);
            return Retrieve_AltKey(service, keys, attrs);
        }
        
        /// <summary>
        /// <para>Set values for the alternate key called 'dupdetectionuniquekey'</para>
        /// </summary>
        public void AltKey_dupdetectionuniquekey(componentstate ComponentState, DateTime OverwriteTime, string UniqueName) {
            KeyAttributes.Clear();
            KeyAttributes.Add("componentstate", ComponentState);
            KeyAttributes.Add("overwritetime", OverwriteTime);
            KeyAttributes.Add("uniquename", UniqueName);
        }
    }
    
    /// <summary>
    /// <para>Contains information about the settable variable: its type, default value, and etc.</para>
    /// <para>Display Name: Environment Variable Definition</para>
    /// </summary>
    [EntityLogicalName("environmentvariabledefinition")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class EnvironmentVariableDefinition : ExtendedEntity<EnvironmentVariableDefinitionState, EnvironmentVariableDefinition_statuscode> {
        
        public const string EntityLogicalName = "environmentvariabledefinition";
        
        public const int EntityTypeCode = 380;
        
        public EnvironmentVariableDefinition() : 
                base(EntityLogicalName) {
        }
        
        public EnvironmentVariableDefinition(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("schemaname");
            }
        }
        
        [AttributeLogicalName("environmentvariabledefinitionid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("environmentvariabledefinitionid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for entity instances</para>
        /// <para>Display Name: Environment Variable Definition</para>
        /// </summary>
        [AttributeLogicalName("environmentvariabledefinitionid")]
        [DisplayName("Environment Variable Definition")]
        public Guid? EnvironmentVariableDefinitionId {
            get {
                return GetAttributeValue<Guid?>("environmentvariabledefinitionid");
            }
            set {
                SetId("environmentvariabledefinitionid", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: API Id</para>
        /// </summary>
        [AttributeLogicalName("apiid")]
        [DisplayName("API Id")]
        [MaxLength(150)]
        public string ApiId {
            get {
                return GetAttributeValue<string>("apiid");
            }
            set {
                SetAttributeValue("apiid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Component State</para>
        /// </summary>
        [AttributeLogicalName("componentstate")]
        [DisplayName("Component State")]
        public componentstate? ComponentState {
            get {
                return GetOptionSetValue<componentstate>("componentstate");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for Connection Reference associated with Environment Variable Definition.</para>
        /// <para>Display Name: Connection Reference</para>
        /// </summary>
        [AttributeLogicalName("connectionreferenceid")]
        [DisplayName("Connection Reference")]
        public EntityReference ConnectionReferenceId {
            get {
                return GetAttributeValue<EntityReference>("connectionreferenceid");
            }
            set {
                SetAttributeValue("connectionreferenceid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        [DisplayName("Created By")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        [DisplayName("Created On")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        [DisplayName("Created By (Delegate)")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Default variable value to be used if no associated EnvironmentVariableValue entities exist.</para>
        /// <para>Display Name: Default Value</para>
        /// </summary>
        [AttributeLogicalName("defaultvalue")]
        [DisplayName("Default Value")]
        public string DefaultValue {
            get {
                return GetAttributeValue<string>("defaultvalue");
            }
            set {
                SetAttributeValue("defaultvalue", value);
            }
        }
        
        /// <summary>
        /// <para>Description of the variable definition.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        [DisplayName("Description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name of the variable definition.</para>
        /// <para>Display Name: Display Name</para>
        /// </summary>
        [AttributeLogicalName("displayname")]
        [DisplayName("Display Name")]
        [MaxLength(100)]
        public string DisplayName {
            get {
                return GetAttributeValue<string>("displayname");
            }
            set {
                SetAttributeValue("displayname", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// </summary>
        [AttributeLogicalName("environmentvariabledefinitionidunique")]
        public Guid? EnvironmentVariableDefinitionIdUnique {
            get {
                return GetAttributeValue<Guid?>("environmentvariabledefinitionidunique");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Hint</para>
        /// </summary>
        [AttributeLogicalName("hint")]
        [DisplayName("Hint")]
        public string Hint {
            get {
                return GetAttributeValue<string>("hint");
            }
            set {
                SetAttributeValue("hint", value);
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        [DisplayName("Import Sequence Number")]
        [Range(-2147483648, 2147483647)]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>A JSON object describing the options for the input control that should be presented to the user for setting the current value of the Environment variable.</para>
        /// <para>Display Name: Input Control Config</para>
        /// </summary>
        [AttributeLogicalName("inputcontrolconfig")]
        [DisplayName("Input Control Config")]
        public string InputControlConfig {
            get {
                return GetAttributeValue<string>("inputcontrolconfig");
            }
            set {
                SetAttributeValue("inputcontrolconfig", value);
            }
        }
        
        /// <summary>
        /// <para>Version in which the form is introduced.</para>
        /// <para>Display Name: Introduced Version</para>
        /// </summary>
        [AttributeLogicalName("introducedversion")]
        [DisplayName("Introduced Version")]
        [MaxLength(48)]
        public string IntroducedVersion {
            get {
                return GetAttributeValue<string>("introducedversion");
            }
            set {
                SetAttributeValue("introducedversion", value);
            }
        }
        
        /// <summary>
        /// <para>Tells whether the component can be customized.</para>
        /// <para>Display Name: Customizable</para>
        /// </summary>
        [AttributeLogicalName("iscustomizable")]
        [DisplayName("Customizable")]
        public BooleanManagedProperty IsCustomizable {
            get {
                return GetAttributeValue<BooleanManagedProperty>("iscustomizable");
            }
            set {
                SetAttributeValue("iscustomizable", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the solution component is part of a managed solution.</para>
        /// <para>Display Name: Is Managed</para>
        /// </summary>
        [AttributeLogicalName("ismanaged")]
        [DisplayName("Is Managed")]
        public bool? IsManaged {
            get {
                return GetAttributeValue<bool?>("ismanaged");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Is Required</para>
        /// </summary>
        [AttributeLogicalName("isrequired")]
        [DisplayName("Is Required")]
        public bool? IsRequired {
            get {
                return GetAttributeValue<bool?>("isrequired");
            }
            set {
                SetAttributeValue("isrequired", value);
            }
        }
        
        /// <summary>
        /// <para>Clicking on this url will take the user to a webpage which further explains the environment variable being populated.</para>
        /// <para>Display Name: Learn More Url</para>
        /// </summary>
        [AttributeLogicalName("learnmoreurl")]
        [DisplayName("Learn More Url")]
        [MaxLength(2000)]
        public string LearnMoreUrl {
            get {
                return GetAttributeValue<string>("learnmoreurl");
            }
            set {
                SetAttributeValue("learnmoreurl", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        [DisplayName("Modified By")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        [DisplayName("Modified On")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        [DisplayName("Modified By (Delegate)")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        [DisplayName("Record Created On")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Record Overwrite Time</para>
        /// </summary>
        [AttributeLogicalName("overwritetime")]
        [DisplayName("Record Overwrite Time")]
        public DateTime? OverwriteTime {
            get {
                return GetAttributeValue<DateTime?>("overwritetime");
            }
        }
        
        /// <summary>
        /// <para>Owner Id</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        [DisplayName("Owner")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        [DisplayName("Owning Business Unit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        [DisplayName("Owning Team")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        [DisplayName("Owning User")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Parameter Key</para>
        /// </summary>
        [AttributeLogicalName("parameterkey")]
        [DisplayName("Parameter Key")]
        [MaxLength(150)]
        public string ParameterKey {
            get {
                return GetAttributeValue<string>("parameterkey");
            }
            set {
                SetAttributeValue("parameterkey", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for Environment Variable Definition associated with Environment Variable Definition.</para>
        /// <para>Display Name: Parent Definition</para>
        /// </summary>
        [AttributeLogicalName("parentdefinitionid")]
        [DisplayName("Parent Definition")]
        public EntityReference ParentDefinitionId {
            get {
                return GetAttributeValue<EntityReference>("parentdefinitionid");
            }
            set {
                SetAttributeValue("parentdefinitionid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique entity name.</para>
        /// <para>Display Name: Schema Name</para>
        /// </summary>
        [AttributeLogicalName("schemaname")]
        [DisplayName("Schema Name")]
        [MaxLength(100)]
        public string PrimaryNameField {
            get {
                return GetAttributeValue<string>("schemaname");
            }
            set {
                SetAttributeValue("schemaname", value);
            }
        }
        
        /// <summary>
        /// <para>Unique entity name.</para>
        /// <para>Display Name: Schema Name</para>
        /// </summary>
        [AttributeLogicalName("schemaname")]
        [DisplayName("Schema Name")]
        [MaxLength(100)]
        public string SchemaName {
            get {
                return GetAttributeValue<string>("schemaname");
            }
            set {
                SetAttributeValue("schemaname", value);
            }
        }
        
        /// <summary>
        /// <para>Environment variable secret store.</para>
        /// <para>Display Name: SecretStore</para>
        /// </summary>
        [AttributeLogicalName("secretstore")]
        [DisplayName("SecretStore")]
        public EnvironmentVariableDefinition_SecretStore? SecretStore {
            get {
                return GetOptionSetValue<EnvironmentVariableDefinition_SecretStore>("secretstore");
            }
            set {
                SetOptionSetValue("secretstore", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the associated solution.</para>
        /// <para>Display Name: Solution</para>
        /// </summary>
        [AttributeLogicalName("solutionid")]
        [DisplayName("Solution")]
        public Guid? SolutionId {
            get {
                return GetAttributeValue<Guid?>("solutionid");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        [DisplayName("Time Zone Rule Version Number")]
        [Range(-1, 2147483647)]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Environment variable value type.</para>
        /// <para>Display Name: Type</para>
        /// </summary>
        [AttributeLogicalName("type")]
        [DisplayName("Type")]
        public EnvironmentVariableDefinition_Type? Type {
            get {
                return GetOptionSetValue<EnvironmentVariableDefinition_Type>("type");
            }
            set {
                SetOptionSetValue("type", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        [DisplayName("UTC Conversion Time Zone Code")]
        [Range(-1, 2147483647)]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Value Schema</para>
        /// </summary>
        [AttributeLogicalName("valueschema")]
        [DisplayName("Value Schema")]
        public string ValueSchema {
            get {
                return GetAttributeValue<string>("valueschema");
            }
            set {
                SetAttributeValue("valueschema", value);
            }
        }
        
        /// <summary>
        /// <para>Version Number</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        [DisplayName("Version Number")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Status of the Environment Variable Definition</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        [DisplayName("Status")]
        public EnvironmentVariableDefinitionState? statecode {
            get {
                return GetOptionSetValue<EnvironmentVariableDefinitionState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the Environment Variable Definition</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        [DisplayName("Status Reason")]
        public EnvironmentVariableDefinition_statuscode? statuscode {
            get {
                return GetOptionSetValue<EnvironmentVariableDefinition_statuscode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        [RelationshipSchemaName("envdefinition_envdefinition", EntityRole.Referenced)]
        public IEnumerable<EnvironmentVariableDefinition> Referencedenvdefinition_envdefinition {
            get {
                return GetRelatedEntities<EnvironmentVariableDefinition>("envdefinition_envdefinition", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("envdefinition_envdefinition", EntityRole.Referenced, value);
            }
        }
        
        [AttributeLogicalName("parentdefinitionid")]
        [RelationshipSchemaName("envdefinition_envdefinition", EntityRole.Referencing)]
        public EnvironmentVariableDefinition Referencingenvdefinition_envdefinition {
            get {
                return GetRelatedEntity<EnvironmentVariableDefinition>("envdefinition_envdefinition", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("envdefinition_envdefinition", EntityRole.Referencing, value);
            }
        }
        
        [RelationshipSchemaName("environmentvariabledefinition_environmentvariablevalue")]
        public IEnumerable<EnvironmentVariableValue> environmentvariabledefinition_environmentvariablevalue {
            get {
                return GetRelatedEntities<EnvironmentVariableValue>("environmentvariabledefinition_environmentvariablevalue", null);
            }
            set {
                SetRelatedEntities("environmentvariabledefinition_environmentvariablevalue", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_environmentvariabledefinition_createdby")]
        public SystemUser lk_environmentvariabledefinition_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_environmentvariabledefinition_createdby", null);
            }
            set {
                SetRelatedEntity("lk_environmentvariabledefinition_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_environmentvariabledefinition_createdonbehalfby")]
        public SystemUser lk_environmentvariabledefinition_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_environmentvariabledefinition_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_environmentvariabledefinition_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_environmentvariabledefinition_modifiedby")]
        public SystemUser lk_environmentvariabledefinition_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_environmentvariabledefinition_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_environmentvariabledefinition_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_environmentvariabledefinition_modifiedonbehalfby")]
        public SystemUser lk_environmentvariabledefinition_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_environmentvariabledefinition_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_environmentvariabledefinition_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_environmentvariabledefinition")]
        public SystemUser user_environmentvariabledefinition {
            get {
                return GetRelatedEntity<SystemUser>("user_environmentvariabledefinition", null);
            }
            set {
                SetRelatedEntity("user_environmentvariabledefinition", null, value);
            }
        }
        
        public static EnvironmentVariableDefinition Retrieve(IOrganizationService service, Guid id, params Expression<Func<EnvironmentVariableDefinition,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
        
        /// <summary>
        /// <para>Retrieves the record using the alternate key called 'Environment Variable Definition Key'</para>
        /// </summary>
        public static EnvironmentVariableDefinition Retrieve_DefinitionKey(IOrganizationService service, string SchemaName, DateTime OverwriteTime, componentstate ComponentState, params Expression<Func<EnvironmentVariableDefinition,object>>[] attrs) {
            KeyAttributeCollection keys = new KeyAttributeCollection();
            keys.Add("schemaname", SchemaName);
            keys.Add("overwritetime", OverwriteTime);
            keys.Add("componentstate", ComponentState);
            return Retrieve_AltKey(service, keys, attrs);
        }
        
        /// <summary>
        /// <para>Set values for the alternate key called 'Environment Variable Definition Key'</para>
        /// </summary>
        public void AltKey_DefinitionKey(string SchemaName, DateTime OverwriteTime, componentstate ComponentState) {
            KeyAttributes.Clear();
            KeyAttributes.Add("schemaname", SchemaName);
            KeyAttributes.Add("overwritetime", OverwriteTime);
            KeyAttributes.Add("componentstate", ComponentState);
        }
    }
    
    /// <summary>
    /// <para>Holds the value for the associated EnvironmentVariableDefinition entity.</para>
    /// <para>Display Name: Environment Variable Value</para>
    /// </summary>
    [EntityLogicalName("environmentvariablevalue")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class EnvironmentVariableValue : ExtendedEntity<EnvironmentVariableValueState, EnvironmentVariableValue_statuscode> {
        
        public const string EntityLogicalName = "environmentvariablevalue";
        
        public const int EntityTypeCode = 381;
        
        public EnvironmentVariableValue() : 
                base(EntityLogicalName) {
        }
        
        public EnvironmentVariableValue(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("schemaname");
            }
        }
        
        [AttributeLogicalName("environmentvariablevalueid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("environmentvariablevalueid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for entity instances</para>
        /// <para>Display Name: Environment Variable Value</para>
        /// </summary>
        [AttributeLogicalName("environmentvariablevalueid")]
        [DisplayName("Environment Variable Value")]
        public Guid? EnvironmentVariableValueId {
            get {
                return GetAttributeValue<Guid?>("environmentvariablevalueid");
            }
            set {
                SetId("environmentvariablevalueid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Component State</para>
        /// </summary>
        [AttributeLogicalName("componentstate")]
        [DisplayName("Component State")]
        public componentstate? ComponentState {
            get {
                return GetOptionSetValue<componentstate>("componentstate");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        [DisplayName("Created By")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        [DisplayName("Created On")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        [DisplayName("Created By (Delegate)")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for Environment Variable Definition associated with Environment Variable Value.</para>
        /// <para>Display Name: Environment Variable Definition</para>
        /// </summary>
        [AttributeLogicalName("environmentvariabledefinitionid")]
        [DisplayName("Environment Variable Definition")]
        public EntityReference EnvironmentVariableDefinitionId {
            get {
                return GetAttributeValue<EntityReference>("environmentvariabledefinitionid");
            }
            set {
                SetAttributeValue("environmentvariabledefinitionid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// </summary>
        [AttributeLogicalName("environmentvariablevalueidunique")]
        public Guid? EnvironmentVariableValueIdUnique {
            get {
                return GetAttributeValue<Guid?>("environmentvariablevalueidunique");
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        [DisplayName("Import Sequence Number")]
        [Range(-2147483648, 2147483647)]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Version in which the form is introduced.</para>
        /// <para>Display Name: Introduced Version</para>
        /// </summary>
        [AttributeLogicalName("introducedversion")]
        [DisplayName("Introduced Version")]
        [MaxLength(48)]
        public string IntroducedVersion {
            get {
                return GetAttributeValue<string>("introducedversion");
            }
            set {
                SetAttributeValue("introducedversion", value);
            }
        }
        
        /// <summary>
        /// <para>Tells whether the component can be customized.</para>
        /// <para>Display Name: Customizable</para>
        /// </summary>
        [AttributeLogicalName("iscustomizable")]
        [DisplayName("Customizable")]
        public BooleanManagedProperty IsCustomizable {
            get {
                return GetAttributeValue<BooleanManagedProperty>("iscustomizable");
            }
            set {
                SetAttributeValue("iscustomizable", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the solution component is part of a managed solution.</para>
        /// <para>Display Name: Is Managed</para>
        /// </summary>
        [AttributeLogicalName("ismanaged")]
        [DisplayName("Is Managed")]
        public bool? IsManaged {
            get {
                return GetAttributeValue<bool?>("ismanaged");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        [DisplayName("Modified By")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        [DisplayName("Modified On")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        [DisplayName("Modified By (Delegate)")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        [DisplayName("Record Created On")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Record Overwrite Time</para>
        /// </summary>
        [AttributeLogicalName("overwritetime")]
        [DisplayName("Record Overwrite Time")]
        public DateTime? OverwriteTime {
            get {
                return GetAttributeValue<DateTime?>("overwritetime");
            }
        }
        
        /// <summary>
        /// <para>Owner Id</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        [DisplayName("Owner")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        [DisplayName("Owning Business Unit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        [DisplayName("Owning Team")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        [DisplayName("Owning User")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Unique entity name.</para>
        /// <para>Display Name: Schema Name</para>
        /// </summary>
        [AttributeLogicalName("schemaname")]
        [DisplayName("Schema Name")]
        [MaxLength(100)]
        public string PrimaryNameField {
            get {
                return GetAttributeValue<string>("schemaname");
            }
            set {
                SetAttributeValue("schemaname", value);
            }
        }
        
        /// <summary>
        /// <para>Unique entity name.</para>
        /// <para>Display Name: Schema Name</para>
        /// </summary>
        [AttributeLogicalName("schemaname")]
        [DisplayName("Schema Name")]
        [MaxLength(100)]
        public string SchemaName {
            get {
                return GetAttributeValue<string>("schemaname");
            }
            set {
                SetAttributeValue("schemaname", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the associated solution.</para>
        /// <para>Display Name: Solution</para>
        /// </summary>
        [AttributeLogicalName("solutionid")]
        [DisplayName("Solution")]
        public Guid? SolutionId {
            get {
                return GetAttributeValue<Guid?>("solutionid");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        [DisplayName("Time Zone Rule Version Number")]
        [Range(-1, 2147483647)]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        [DisplayName("UTC Conversion Time Zone Code")]
        [Range(-1, 2147483647)]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the actual variable data.</para>
        /// <para>Display Name: Value</para>
        /// </summary>
        [AttributeLogicalName("value")]
        [DisplayName("Value")]
        public string Value {
            get {
                return GetAttributeValue<string>("value");
            }
            set {
                SetAttributeValue("value", value);
            }
        }
        
        /// <summary>
        /// <para>Version Number</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        [DisplayName("Version Number")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Status of the Environment Variable Value</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        [DisplayName("Status")]
        public EnvironmentVariableValueState? statecode {
            get {
                return GetOptionSetValue<EnvironmentVariableValueState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the Environment Variable Value</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        [DisplayName("Status Reason")]
        public EnvironmentVariableValue_statuscode? statuscode {
            get {
                return GetOptionSetValue<EnvironmentVariableValue_statuscode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        [AttributeLogicalName("environmentvariabledefinitionid")]
        [RelationshipSchemaName("environmentvariabledefinition_environmentvariablevalue")]
        public EnvironmentVariableDefinition environmentvariabledefinition_environmentvariablevalue {
            get {
                return GetRelatedEntity<EnvironmentVariableDefinition>("environmentvariabledefinition_environmentvariablevalue", null);
            }
            set {
                SetRelatedEntity("environmentvariabledefinition_environmentvariablevalue", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_environmentvariablevalue_createdby")]
        public SystemUser lk_environmentvariablevalue_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_environmentvariablevalue_createdby", null);
            }
            set {
                SetRelatedEntity("lk_environmentvariablevalue_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_environmentvariablevalue_createdonbehalfby")]
        public SystemUser lk_environmentvariablevalue_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_environmentvariablevalue_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_environmentvariablevalue_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_environmentvariablevalue_modifiedby")]
        public SystemUser lk_environmentvariablevalue_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_environmentvariablevalue_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_environmentvariablevalue_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_environmentvariablevalue_modifiedonbehalfby")]
        public SystemUser lk_environmentvariablevalue_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_environmentvariablevalue_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_environmentvariablevalue_modifiedonbehalfby", null, value);
            }
        }
        
        public static EnvironmentVariableValue Retrieve(IOrganizationService service, Guid id, params Expression<Func<EnvironmentVariableValue,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
        
        /// <summary>
        /// <para>Retrieves the record using the alternate key called 'Environmentvariable Definition Id Key'</para>
        /// </summary>
        public static EnvironmentVariableValue Retrieve_EnvironmentvariableDefinitionIdKey(IOrganizationService service, componentstate ComponentState, EntityReference EnvironmentVariableDefinitionId, DateTime OverwriteTime, params Expression<Func<EnvironmentVariableValue,object>>[] attrs) {
            KeyAttributeCollection keys = new KeyAttributeCollection();
            keys.Add("componentstate", ComponentState);
            keys.Add("environmentvariabledefinitionid", EnvironmentVariableDefinitionId);
            keys.Add("overwritetime", OverwriteTime);
            return Retrieve_AltKey(service, keys, attrs);
        }
        
        /// <summary>
        /// <para>Set values for the alternate key called 'Environmentvariable Definition Id Key'</para>
        /// </summary>
        public void AltKey_EnvironmentvariableDefinitionIdKey(componentstate ComponentState, EntityReference EnvironmentVariableDefinitionId, DateTime OverwriteTime) {
            KeyAttributes.Clear();
            KeyAttributes.Add("componentstate", ComponentState);
            KeyAttributes.Add("environmentvariabledefinitionid", EnvironmentVariableDefinitionId);
            KeyAttributes.Add("overwritetime", OverwriteTime);
        }
    }
    
    /// <summary>
    /// <para>A list of records that require action, such as accounts, activities, and cases.</para>
    /// <para>Display Name: Queue</para>
    /// </summary>
    [EntityLogicalName("queue")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Queue : ExtendedEntity<QueueState, Queue_StatusCode> {
        
        public const string EntityLogicalName = "queue";
        
        public const int EntityTypeCode = 2020;
        
        public Queue() : 
                base(EntityLogicalName) {
        }
        
        public Queue(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("queueid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("queueid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the queue.</para>
        /// <para>Display Name: Queue</para>
        /// </summary>
        [AttributeLogicalName("queueid")]
        [DisplayName("Queue")]
        public Guid? QueueId {
            get {
                return GetAttributeValue<Guid?>("queueid");
            }
            set {
                SetId("queueid", value);
            }
        }
        
        /// <summary>
        /// <para>This attribute is no longer used. The data is now in the Mailbox.AllowEmailConnectorToUseCredentials attribute.</para>
        /// <para>Display Name: Allow to Use Credentials for Email Processing (Obsolete)</para>
        /// </summary>
        [AttributeLogicalName("allowemailcredentials")]
        [DisplayName("Allow to Use Credentials for Email Processing (Obsolete)")]
        public bool? AllowEmailCredentials {
            get {
                return GetAttributeValue<bool?>("allowemailcredentials");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit with which the queue is associated.</para>
        /// <para>Display Name: Business Unit</para>
        /// </summary>
        [AttributeLogicalName("businessunitid")]
        [DisplayName("Business Unit")]
        public EntityReference BusinessUnitId {
            get {
                return GetAttributeValue<EntityReference>("businessunitid");
            }
            set {
                SetAttributeValue("businessunitid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the queue record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        [DisplayName("Created By")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the queue was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        [DisplayName("Created On")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the queue.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        [DisplayName("Created By (Delegate)")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Select the mailbox associated with this queue.</para>
        /// <para>Display Name: Mailbox</para>
        /// </summary>
        [AttributeLogicalName("defaultmailbox")]
        [DisplayName("Mailbox")]
        public EntityReference DefaultMailbox {
            get {
                return GetAttributeValue<EntityReference>("defaultmailbox");
            }
        }
        
        /// <summary>
        /// <para>Description of the queue.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        [DisplayName("Description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Email address that is associated with the queue.</para>
        /// <para>Display Name: Incoming Email</para>
        /// </summary>
        [AttributeLogicalName("emailaddress")]
        [DisplayName("Incoming Email")]
        [MaxLength(100)]
        public string EMailAddress {
            get {
                return GetAttributeValue<string>("emailaddress");
            }
            set {
                SetAttributeValue("emailaddress", value);
            }
        }
        
        /// <summary>
        /// <para>This attribute is no longer used. The data is now in the Mailbox.Password attribute.</para>
        /// <para>Display Name: Password (Obsolete)</para>
        /// </summary>
        [AttributeLogicalName("emailpassword")]
        [DisplayName("Password (Obsolete)")]
        [MaxLength(200)]
        public string EmailPassword {
            get {
                return GetAttributeValue<string>("emailpassword");
            }
        }
        
        /// <summary>
        /// <para>Shows the status of the primary email address.</para>
        /// <para>Display Name: Primary Email Status</para>
        /// </summary>
        [AttributeLogicalName("emailrouteraccessapproval")]
        [DisplayName("Primary Email Status")]
        public Queue_EmailRouterAccessApproval? EmailRouterAccessApproval {
            get {
                return GetOptionSetValue<Queue_EmailRouterAccessApproval>("emailrouteraccessapproval");
            }
            set {
                SetOptionSetValue("emailrouteraccessapproval", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Email Signature</para>
        /// </summary>
        [AttributeLogicalName("emailsignature")]
        [DisplayName("Email Signature")]
        public EntityReference EmailSignature {
            get {
                return GetAttributeValue<EntityReference>("emailsignature");
            }
            set {
                SetAttributeValue("emailsignature", value);
            }
        }
        
        /// <summary>
        /// <para>This attribute is no longer used. The data is now in the Mailbox.UserName attribute.</para>
        /// <para>Display Name: User Name (Obsolete)</para>
        /// </summary>
        [AttributeLogicalName("emailusername")]
        [DisplayName("User Name (Obsolete)")]
        [MaxLength(200)]
        public string EmailUsername {
            get {
                return GetAttributeValue<string>("emailusername");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Entity Image Id</para>
        /// </summary>
        [AttributeLogicalName("entityimageid")]
        [DisplayName("Entity Image Id")]
        public Guid? EntityImageId {
            get {
                return GetAttributeValue<Guid?>("entityimageid");
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the queue with respect to the base currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        [DisplayName("Exchange Rate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Information that specifies whether a queue is to ignore unsolicited email (deprecated).</para>
        /// <para>Display Name: Convert To Email Activities</para>
        /// </summary>
        [AttributeLogicalName("ignoreunsolicitedemail")]
        [DisplayName("Convert To Email Activities")]
        public bool? IgnoreUnsolicitedEmail {
            get {
                return GetAttributeValue<bool?>("ignoreunsolicitedemail");
            }
            set {
                SetAttributeValue("ignoreunsolicitedemail", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        [DisplayName("Import Sequence Number")]
        [Range(-2147483648, 2147483647)]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Incoming email delivery method for the queue.</para>
        /// <para>Display Name: Incoming Email Delivery Method</para>
        /// </summary>
        [AttributeLogicalName("incomingemaildeliverymethod")]
        [DisplayName("Incoming Email Delivery Method")]
        public Queue_IncomingEmailDeliveryMethod? IncomingEmailDeliveryMethod {
            get {
                return GetOptionSetValue<Queue_IncomingEmailDeliveryMethod>("incomingemaildeliverymethod");
            }
            set {
                SetOptionSetValue("incomingemaildeliverymethod", value);
            }
        }
        
        /// <summary>
        /// <para>Convert Incoming Email To Activities</para>
        /// <para>Display Name: Convert Incoming Email To Activities</para>
        /// </summary>
        [AttributeLogicalName("incomingemailfilteringmethod")]
        [DisplayName("Convert Incoming Email To Activities")]
        public Queue_IncomingEmailFilteringMethod? IncomingEmailFilteringMethod {
            get {
                return GetOptionSetValue<Queue_IncomingEmailFilteringMethod>("incomingemailfilteringmethod");
            }
            set {
                SetOptionSetValue("incomingemailfilteringmethod", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the status of approval of the email address by O365 Admin.</para>
        /// <para>Display Name: Email Address O365 Admin Approval Status</para>
        /// </summary>
        [AttributeLogicalName("isemailaddressapprovedbyo365admin")]
        [DisplayName("Email Address O365 Admin Approval Status")]
        public bool? IsEmailAddressApprovedByO365Admin {
            get {
                return GetAttributeValue<bool?>("isemailaddressapprovedbyo365admin");
            }
        }
        
        /// <summary>
        /// <para>Indication of whether a queue is the fax delivery queue.</para>
        /// <para>Display Name: Fax Queue</para>
        /// </summary>
        [AttributeLogicalName("isfaxqueue")]
        [DisplayName("Fax Queue")]
        public bool? IsFaxQueue {
            get {
                return GetAttributeValue<bool?>("isfaxqueue");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who last modified the queue.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        [DisplayName("Modified By")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the queue was last modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        [DisplayName("Modified On")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who last modified the queue.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        [DisplayName("Modified By (Delegate)")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Name of the queue.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        [DisplayName("Name")]
        [MaxLength(200)]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Number of Queue items associated with the queue.</para>
        /// <para>Display Name: Queue Items</para>
        /// </summary>
        [AttributeLogicalName("numberofitems")]
        [DisplayName("Queue Items")]
        [Range(-2147483648, 2147483647)]
        public int? NumberOfItems {
            get {
                return GetAttributeValue<int?>("numberofitems");
            }
        }
        
        /// <summary>
        /// <para>Number of Members associated with the queue.</para>
        /// <para>Display Name: No. of Members</para>
        /// </summary>
        [AttributeLogicalName("numberofmembers")]
        [DisplayName("No. of Members")]
        [Range(-2147483648, 2147483647)]
        public int? NumberOfMembers {
            get {
                return GetAttributeValue<int?>("numberofmembers");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the organization associated with the queue.</para>
        /// <para>Display Name: Organization</para>
        /// </summary>
        [AttributeLogicalName("organizationid")]
        [DisplayName("Organization")]
        public EntityReference OrganizationId {
            get {
                return GetAttributeValue<EntityReference>("organizationid");
            }
        }
        
        /// <summary>
        /// <para>Outgoing email delivery method for the queue.</para>
        /// <para>Display Name: Outgoing Email Delivery Method</para>
        /// </summary>
        [AttributeLogicalName("outgoingemaildeliverymethod")]
        [DisplayName("Outgoing Email Delivery Method")]
        public Queue_OutgoingEmailDeliveryMethod? OutgoingEmailDeliveryMethod {
            get {
                return GetOptionSetValue<Queue_OutgoingEmailDeliveryMethod>("outgoingemaildeliverymethod");
            }
            set {
                SetOptionSetValue("outgoingemaildeliverymethod", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        [DisplayName("Record Created On")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the queue.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        [DisplayName("Owner")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit that owns the queue.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        [DisplayName("Owning Business Unit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team who owns the queue.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        [DisplayName("Owning Team")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who owns the queue.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        [DisplayName("Owning User")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Name of the queue.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        [DisplayName("Name")]
        [MaxLength(200)]
        public string PrimaryNameField {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the owner of the queue.</para>
        /// <para>Display Name: Owner (deprecated)</para>
        /// </summary>
        [AttributeLogicalName("primaryuserid")]
        [DisplayName("Owner (deprecated)")]
        public EntityReference PrimaryUserId {
            get {
                return GetAttributeValue<EntityReference>("primaryuserid");
            }
            set {
                SetAttributeValue("primaryuserid", value);
            }
        }
        
        /// <summary>
        /// <para>Type of queue that is automatically assigned when a user or queue is created. The type can be public, private, or work in process.</para>
        /// <para>Display Name: Queue Type</para>
        /// </summary>
        [AttributeLogicalName("queuetypecode")]
        [DisplayName("Queue Type")]
        public Queue_QueueTypeCode? QueueTypeCode {
            get {
                return GetOptionSetValue<Queue_QueueTypeCode>("queuetypecode");
            }
        }
        
        /// <summary>
        /// <para>Select whether the queue is public or private. A public queue can be viewed by all. A private queue can be viewed only by the members added to the queue.</para>
        /// <para>Display Name: Type</para>
        /// </summary>
        [AttributeLogicalName("queueviewtype")]
        [DisplayName("Type")]
        public Queue_QueueViewType? QueueViewType {
            get {
                return GetOptionSetValue<Queue_QueueViewType>("queueviewtype");
            }
            set {
                SetOptionSetValue("queueviewtype", value);
            }
        }
        
        /// <summary>
        /// <para>Status of the queue.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        [DisplayName("Status")]
        public QueueState? StateCode {
            get {
                return GetOptionSetValue<QueueState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the queue.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        [DisplayName("Status Reason")]
        public Queue_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<Queue_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the currency associated with the queue.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        [DisplayName("Currency")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Version number of the queue.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        [DisplayName("Version Number")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Link assignment input contract with queue.</para>
        /// <para>Display Name: Assignment Input Contract Id</para>
        /// </summary>
        [AttributeLogicalName("msdyn_assignmentinputcontractid")]
        [DisplayName("Assignment Input Contract Id")]
        public EntityReference msdyn_assignmentinputcontractid {
            get {
                return GetAttributeValue<EntityReference>("msdyn_assignmentinputcontractid");
            }
            set {
                SetAttributeValue("msdyn_assignmentinputcontractid", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Assignment Strategy</para>
        /// </summary>
        [AttributeLogicalName("msdyn_assignmentstrategy")]
        [DisplayName("Assignment Strategy")]
        public msdyn_queueassignmentstrategy? msdyn_assignmentstrategy {
            get {
                return GetOptionSetValue<msdyn_queueassignmentstrategy>("msdyn_assignmentstrategy");
            }
            set {
                SetOptionSetValue("msdyn_assignmentstrategy", value);
            }
        }
        
        /// <summary>
        /// <para>Define overflow rules for work items after it enters queue</para>
        /// <para>Display Name: Inqueue Overflow Ruleset</para>
        /// </summary>
        [AttributeLogicalName("msdyn_inqueueoverflowrulesetid")]
        [DisplayName("Inqueue Overflow Ruleset")]
        public EntityReference msdyn_inqueueoverflowrulesetid {
            get {
                return GetAttributeValue<EntityReference>("msdyn_inqueueoverflowrulesetid");
            }
            set {
                SetAttributeValue("msdyn_inqueueoverflowrulesetid", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: intentfamilyid</para>
        /// </summary>
        [AttributeLogicalName("msdyn_intentfamilyid")]
        [DisplayName("intentfamilyid")]
        public EntityReference msdyn_intentfamilyid {
            get {
                return GetAttributeValue<EntityReference>("msdyn_intentfamilyid");
            }
            set {
                SetAttributeValue("msdyn_intentfamilyid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the queue is set as default or not.</para>
        /// <para>Display Name: Is Default Queue</para>
        /// </summary>
        [AttributeLogicalName("msdyn_isdefaultqueue")]
        [DisplayName("Is Default Queue")]
        public bool? msdyn_isdefaultqueue {
            get {
                return GetAttributeValue<bool?>("msdyn_isdefaultqueue");
            }
            set {
                SetAttributeValue("msdyn_isdefaultqueue", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the queue is used as Omnichannel queue for work distribution.</para>
        /// <para>Display Name: Is Omnichannel queue</para>
        /// </summary>
        [AttributeLogicalName("msdyn_isomnichannelqueue")]
        [DisplayName("Is Omnichannel queue")]
        public bool? msdyn_isomnichannelqueue {
            get {
                return GetAttributeValue<bool?>("msdyn_isomnichannelqueue");
            }
            set {
                SetAttributeValue("msdyn_isomnichannelqueue", value);
            }
        }
        
        /// <summary>
        /// <para>Maximum queue size</para>
        /// <para>Display Name: Maximum queue size</para>
        /// </summary>
        [AttributeLogicalName("msdyn_maxqueuesize")]
        [DisplayName("Maximum queue size")]
        [Range(0, 2147483647)]
        public int? msdyn_maxqueuesize {
            get {
                return GetAttributeValue<int?>("msdyn_maxqueuesize");
            }
            set {
                SetAttributeValue("msdyn_maxqueuesize", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for Operating hour associated with Queue</para>
        /// <para>Display Name: Operating Hours</para>
        /// </summary>
        [AttributeLogicalName("msdyn_operatinghourid")]
        [DisplayName("Operating Hours")]
        public EntityReference msdyn_operatinghourid {
            get {
                return GetAttributeValue<EntityReference>("msdyn_operatinghourid");
            }
            set {
                SetAttributeValue("msdyn_operatinghourid", value);
            }
        }
        
        /// <summary>
        /// <para>Setting to enable/disable periodic processing of a queue</para>
        /// <para>Display Name: Enable Operating Hours Based Assignment for Queue</para>
        /// </summary>
        [AttributeLogicalName("msdyn_operatinghoursbasedassignment")]
        [DisplayName("Enable Operating Hours Based Assignment for Queue")]
        public bool? msdyn_operatinghoursbasedassignment {
            get {
                return GetAttributeValue<bool?>("msdyn_operatinghoursbasedassignment");
            }
            set {
                SetAttributeValue("msdyn_operatinghoursbasedassignment", value);
            }
        }
        
        /// <summary>
        /// <para>Define overflow rules for work items before it enters queue</para>
        /// <para>Display Name: Prequeue Overflow Ruleset</para>
        /// </summary>
        [AttributeLogicalName("msdyn_prequeueoverflowrulesetid")]
        [DisplayName("Prequeue Overflow Ruleset")]
        public EntityReference msdyn_prequeueoverflowrulesetid {
            get {
                return GetAttributeValue<EntityReference>("msdyn_prequeueoverflowrulesetid");
            }
            set {
                SetAttributeValue("msdyn_prequeueoverflowrulesetid", value);
            }
        }
        
        /// <summary>
        /// <para>Priority of the queue to indicate conversation assignment order to the agent.</para>
        /// <para>Display Name: Priority</para>
        /// </summary>
        [AttributeLogicalName("msdyn_priority")]
        [DisplayName("Priority")]
        [Range(1, 2147483647)]
        public int? msdyn_priority {
            get {
                return GetAttributeValue<int?>("msdyn_priority");
            }
            set {
                SetAttributeValue("msdyn_priority", value);
            }
        }
        
        /// <summary>
        /// <para>Setting to enable/disable periodic processing of a queue</para>
        /// <para>Display Name: Enable Periodic Processing of Queue</para>
        /// </summary>
        [AttributeLogicalName("msdyn_processqueueperiodically")]
        [DisplayName("Enable Periodic Processing of Queue")]
        public bool? msdyn_processqueueperiodically {
            get {
                return GetAttributeValue<bool?>("msdyn_processqueueperiodically");
            }
            set {
                SetAttributeValue("msdyn_processqueueperiodically", value);
            }
        }
        
        /// <summary>
        /// <para>Defines the type of channels handled by this queue</para>
        /// <para>Display Name: Queue type</para>
        /// </summary>
        [AttributeLogicalName("msdyn_queuetype")]
        [DisplayName("Queue type")]
        public msdyn_queuetype? msdyn_queuetype {
            get {
                return GetOptionSetValue<msdyn_queuetype>("msdyn_queuetype");
            }
            set {
                SetOptionSetValue("msdyn_queuetype", value);
            }
        }
        
        /// <summary>
        /// <para>Unique Name for the entity.</para>
        /// <para>Display Name: Unique Name</para>
        /// </summary>
        [AttributeLogicalName("msdyn_uniquename")]
        [DisplayName("Unique Name")]
        [MaxLength(128)]
        public string msdyn_uniquename {
            get {
                return GetAttributeValue<string>("msdyn_uniquename");
            }
            set {
                SetAttributeValue("msdyn_uniquename", value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_queue_createdonbehalfby")]
        public SystemUser lk_queue_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_queue_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_queue_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_queue_modifiedonbehalfby")]
        public SystemUser lk_queue_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_queue_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_queue_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_queuebase_createdby")]
        public SystemUser lk_queuebase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_queuebase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_queuebase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_queuebase_modifiedby")]
        public SystemUser lk_queuebase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_queuebase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_queuebase_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("primaryuserid")]
        [RelationshipSchemaName("queue_primary_user")]
        public SystemUser queue_primary_user {
            get {
                return GetRelatedEntity<SystemUser>("queue_primary_user", null);
            }
            set {
                SetRelatedEntity("queue_primary_user", null, value);
            }
        }
        
        [RelationshipSchemaName("queue_system_user")]
        public IEnumerable<SystemUser> queue_system_user {
            get {
                return GetRelatedEntities<SystemUser>("queue_system_user", null);
            }
            set {
                SetRelatedEntities("queue_system_user", null, value);
            }
        }
        
        [RelationshipSchemaName("queuemembership_association")]
        public IEnumerable<SystemUser> queuemembership_association {
            get {
                return GetRelatedEntities<SystemUser>("queuemembership_association", null);
            }
            set {
                SetRelatedEntities("queuemembership_association", null, value);
            }
        }
        
        public static Queue Retrieve(IOrganizationService service, Guid id, params Expression<Func<Queue,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    [EntityLogicalName("queuemembership")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class QueueMembership : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "queuemembership";
        
        public const string RelationshipSchemaName = "QueueMembership";
        
        public const int EntityTypeCode = 1213;
        
        public QueueMembership() : 
                base(EntityLogicalName) {
        }
        
        public QueueMembership(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay(null);
            }
        }
        
        [AttributeLogicalName("queuemembershipid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("queuemembershipid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the queue membership.</para>
        /// </summary>
        [AttributeLogicalName("queuemembershipid")]
        public Guid? QueueMembershipId {
            get {
                return GetAttributeValue<Guid?>("queuemembershipid");
            }
            set {
                SetId("queuemembershipid", value);
            }
        }
        
        [AttributeLogicalName("queueid")]
        public Guid? QueueId {
            get {
                return GetAttributeValue<Guid?>("queueid");
            }
        }
        
        [AttributeLogicalName("systemuserid")]
        public Guid? SystemUserId {
            get {
                return GetAttributeValue<Guid?>("systemuserid");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        public static QueueMembership Retrieve(IOrganizationService service, Guid id, params Expression<Func<QueueMembership,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Saved query against the database.</para>
    /// <para>Display Name: View</para>
    /// </summary>
    [EntityLogicalName("savedquery")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class SavedQuery : ExtendedEntity<SavedQueryState, SavedQuery_StatusCode> {
        
        public const string EntityLogicalName = "savedquery";
        
        public const int EntityTypeCode = 1039;
        
        public SavedQuery() : 
                base(EntityLogicalName) {
        }
        
        public SavedQuery(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("savedqueryid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("savedqueryid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the view.</para>
        /// <para>Display Name: View</para>
        /// </summary>
        [AttributeLogicalName("savedqueryid")]
        [DisplayName("View")]
        public Guid? SavedQueryId {
            get {
                return GetAttributeValue<Guid?>("savedqueryid");
            }
            set {
                SetId("savedqueryid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the column name that will be used to group the results from the data collected across multiple records from a system view.</para>
        /// <para>Display Name: Advanced Group By</para>
        /// </summary>
        [AttributeLogicalName("advancedgroupby")]
        [DisplayName("Advanced Group By")]
        [MaxLength(2000)]
        public string AdvancedGroupBy {
            get {
                return GetAttributeValue<string>("advancedgroupby");
            }
            set {
                SetAttributeValue("advancedgroupby", value);
            }
        }
        
        /// <summary>
        /// <para>Tells whether the view can be deleted.</para>
        /// <para>Display Name: Can Be Deleted</para>
        /// </summary>
        [AttributeLogicalName("canbedeleted")]
        [DisplayName("Can Be Deleted")]
        public BooleanManagedProperty CanBeDeleted {
            get {
                return GetAttributeValue<BooleanManagedProperty>("canbedeleted");
            }
            set {
                SetAttributeValue("canbedeleted", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the columns and sorting criteria for the view, stored in XML format.</para>
        /// <para>Display Name: Column Set XML</para>
        /// </summary>
        [AttributeLogicalName("columnsetxml")]
        [DisplayName("Column Set XML")]
        public string ColumnSetXml {
            get {
                return GetAttributeValue<string>("columnsetxml");
            }
            set {
                SetAttributeValue("columnsetxml", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Component State</para>
        /// </summary>
        [AttributeLogicalName("componentstate")]
        [DisplayName("Component State")]
        public componentstate? ComponentState {
            get {
                return GetOptionSetValue<componentstate>("componentstate");
            }
        }
        
        /// <summary>
        /// <para>Type information about how the items in the system view are formatted.</para>
        /// <para>Display Name: Conditional formatting</para>
        /// </summary>
        [AttributeLogicalName("conditionalformatting")]
        [DisplayName("Conditional formatting")]
        public string ConditionalFormatting {
            get {
                return GetAttributeValue<string>("conditionalformatting");
            }
            set {
                SetAttributeValue("conditionalformatting", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        [DisplayName("Created By")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        [DisplayName("Created On")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        [DisplayName("Created By (Delegate)")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Type additional information to describe the view, such as the filter criteria or intended results set.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        [DisplayName("Description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>String specifying the query in Fetch XML language.</para>
        /// <para>Display Name: Fetch XML</para>
        /// </summary>
        [AttributeLogicalName("fetchxml")]
        [DisplayName("Fetch XML")]
        public string FetchXml {
            get {
                return GetAttributeValue<string>("fetchxml");
            }
            set {
                SetAttributeValue("fetchxml", value);
            }
        }
        
        /// <summary>
        /// <para>Version in which the form is introduced.</para>
        /// <para>Display Name: Introduced Version</para>
        /// </summary>
        [AttributeLogicalName("introducedversion")]
        [DisplayName("Introduced Version")]
        [MaxLength(48)]
        public string IntroducedVersion {
            get {
                return GetAttributeValue<string>("introducedversion");
            }
            set {
                SetAttributeValue("introducedversion", value);
            }
        }
        
        /// <summary>
        /// <para>Tells whether a user created the view.</para>
        /// <para>Display Name: Is Custom</para>
        /// </summary>
        [AttributeLogicalName("iscustom")]
        [DisplayName("Is Custom")]
        public bool? IsCustom {
            get {
                return GetAttributeValue<bool?>("iscustom");
            }
        }
        
        /// <summary>
        /// <para>Tells whether the component can be customized.</para>
        /// <para>Display Name: Customizable</para>
        /// </summary>
        [AttributeLogicalName("iscustomizable")]
        [DisplayName("Customizable")]
        public BooleanManagedProperty IsCustomizable {
            get {
                return GetAttributeValue<BooleanManagedProperty>("iscustomizable");
            }
            set {
                SetAttributeValue("iscustomizable", value);
            }
        }
        
        /// <summary>
        /// <para>Tells whether the view is the default view for the specified record type (entity).</para>
        /// <para>Display Name: Default</para>
        /// </summary>
        [AttributeLogicalName("isdefault")]
        [DisplayName("Default")]
        public bool? IsDefault {
            get {
                return GetAttributeValue<bool?>("isdefault");
            }
            set {
                SetAttributeValue("isdefault", value);
            }
        }
        
        /// <summary>
        /// <para>Tells whether the record is part of a managed solution.</para>
        /// <para>Display Name: State</para>
        /// </summary>
        [AttributeLogicalName("ismanaged")]
        [DisplayName("State")]
        public bool? IsManaged {
            get {
                return GetAttributeValue<bool?>("ismanaged");
            }
        }
        
        /// <summary>
        /// <para>Indicates whether or not this is viewable by the entire organization.</para>
        /// <para>Display Name: Is Private</para>
        /// </summary>
        [AttributeLogicalName("isprivate")]
        [DisplayName("Is Private")]
        public bool? IsPrivate {
            get {
                return GetAttributeValue<bool?>("isprivate");
            }
        }
        
        /// <summary>
        /// <para>Choose whether the view is compatible with Quick Find. When users search for specific items, you define the fields that are searched in.</para>
        /// <para>Display Name: Quick Find Compatible</para>
        /// </summary>
        [AttributeLogicalName("isquickfindquery")]
        [DisplayName("Quick Find Compatible")]
        public bool? IsQuickFindQuery {
            get {
                return GetAttributeValue<bool?>("isquickfindquery");
            }
            set {
                SetAttributeValue("isquickfindquery", value);
            }
        }
        
        /// <summary>
        /// <para>Tells whether the view was created by a user.</para>
        /// <para>Display Name: User Defined</para>
        /// </summary>
        [AttributeLogicalName("isuserdefined")]
        [DisplayName("User Defined")]
        public bool? IsUserDefined {
            get {
                return GetAttributeValue<bool?>("isuserdefined");
            }
        }
        
        /// <summary>
        /// <para>Layout data in JSON format.</para>
        /// <para>Display Name: Layout data in JSON format.</para>
        /// </summary>
        [AttributeLogicalName("layoutjson")]
        [DisplayName("Layout data in JSON format.")]
        public string LayoutJson {
            get {
                return GetAttributeValue<string>("layoutjson");
            }
            set {
                SetAttributeValue("layoutjson", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Layout XML</para>
        /// </summary>
        [AttributeLogicalName("layoutxml")]
        [DisplayName("Layout XML")]
        public string LayoutXml {
            get {
                return GetAttributeValue<string>("layoutxml");
            }
            set {
                SetAttributeValue("layoutxml", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        [DisplayName("Modified By")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        [DisplayName("Modified On")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        [DisplayName("Modified By (Delegate)")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Type a name for the view to describe what results the view will contain. This name is visible to users in the View list.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        [DisplayName("Name")]
        [MaxLength(200)]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>String specifying the corresponding sql query for the fetch xml specified for offline use.</para>
        /// <para>Display Name: Offline SQL Query</para>
        /// </summary>
        [AttributeLogicalName("offlinesqlquery")]
        [DisplayName("Offline SQL Query")]
        public string OfflineSqlQuery {
            get {
                return GetAttributeValue<string>("offlinesqlquery");
            }
            set {
                SetAttributeValue("offlinesqlquery", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the ID of the organization that the record is associated with.</para>
        /// <para>Display Name: Organization</para>
        /// </summary>
        [AttributeLogicalName("organizationid")]
        [DisplayName("Organization")]
        public EntityReference OrganizationId {
            get {
                return GetAttributeValue<EntityReference>("organizationid");
            }
        }
        
        /// <summary>
        /// <para>For the organization, type the tab order to determine how users navigate through the screen using only the Tab key.</para>
        /// <para>Display Name: Default Organization tab order</para>
        /// </summary>
        [AttributeLogicalName("organizationtaborder")]
        [DisplayName("Default Organization tab order")]
        [Range(0, 2147483647)]
        public int? OrganizationTabOrder {
            get {
                return GetAttributeValue<int?>("organizationtaborder");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Record Overwrite Time</para>
        /// </summary>
        [AttributeLogicalName("overwritetime")]
        [DisplayName("Record Overwrite Time")]
        public DateTime? OverwriteTime {
            get {
                return GetAttributeValue<DateTime?>("overwritetime");
            }
        }
        
        /// <summary>
        /// <para>Type a name for the view to describe what results the view will contain. This name is visible to users in the View list.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        [DisplayName("Name")]
        [MaxLength(200)]
        public string PrimaryNameField {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Query API</para>
        /// </summary>
        [AttributeLogicalName("queryapi")]
        [DisplayName("Query API")]
        [MaxLength(100)]
        public string QueryAPI {
            get {
                return GetAttributeValue<string>("queryapi");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Query Application Usage</para>
        /// </summary>
        [AttributeLogicalName("queryappusage")]
        [DisplayName("Query Application Usage")]
        [Range(0, 1000000000)]
        public int? QueryAppUsage {
            get {
                return GetAttributeValue<int?>("queryappusage");
            }
            set {
                SetAttributeValue("queryappusage", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the type of the query.</para>
        /// <para>Display Name: Query Type</para>
        /// </summary>
        [AttributeLogicalName("querytype")]
        [DisplayName("Query Type")]
        [Range(0, 1000000000)]
        public int? QueryType {
            get {
                return GetAttributeValue<int?>("querytype");
            }
            set {
                SetAttributeValue("querytype", value);
            }
        }
        
        /// <summary>
        /// <para>Type of entity displayed in the view.</para>
        /// <para>Display Name: Entity Name</para>
        /// </summary>
        [AttributeLogicalName("returnedtypecode")]
        [DisplayName("Entity Name")]
        public string ReturnedTypeCode {
            get {
                return GetAttributeValue<string>("returnedtypecode");
            }
            set {
                SetAttributeValue("returnedtypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the role display conditions for the SavedQuery.</para>
        /// <para>Display Name: Role display conditions for the SavedQuery</para>
        /// </summary>
        [AttributeLogicalName("roledisplayconditionsxml")]
        [DisplayName("Role display conditions for the SavedQuery")]
        public string RoleDisplayConditionsXml {
            get {
                return GetAttributeValue<string>("roledisplayconditionsxml");
            }
            set {
                SetAttributeValue("roledisplayconditionsxml", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// </summary>
        [AttributeLogicalName("savedqueryidunique")]
        public Guid? SavedQueryIdUnique {
            get {
                return GetAttributeValue<Guid?>("savedqueryidunique");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the associated solution.</para>
        /// <para>Display Name: Solution</para>
        /// </summary>
        [AttributeLogicalName("solutionid")]
        [DisplayName("Solution")]
        public Guid? SolutionId {
            get {
                return GetAttributeValue<Guid?>("solutionid");
            }
        }
        
        /// <summary>
        /// <para>Shows the status of the view.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        [DisplayName("Status")]
        public SavedQueryState? StateCode {
            get {
                return GetOptionSetValue<SavedQueryState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the reason code that explains the status of the record.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        [DisplayName("Status Reason")]
        public SavedQuery_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<SavedQuery_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Version number of the view.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        [DisplayName("Version Number")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_savedquery_createdonbehalfby")]
        public SystemUser lk_savedquery_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_savedquery_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_savedquery_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_savedquery_modifiedonbehalfby")]
        public SystemUser lk_savedquery_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_savedquery_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_savedquery_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_savedquerybase_createdby")]
        public SystemUser lk_savedquerybase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_savedquerybase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_savedquerybase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_savedquerybase_modifiedby")]
        public SystemUser lk_savedquerybase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_savedquerybase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_savedquerybase_modifiedby", null, value);
            }
        }
        
        public static SavedQuery Retrieve(IOrganizationService service, Guid id, params Expression<Func<SavedQuery,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Person with access to the Microsoft CRM system and who owns objects in the Microsoft CRM database.</para>
    /// <para>Display Name: User</para>
    /// </summary>
    [EntityLogicalName("systemuser")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class SystemUser : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "systemuser";
        
        public const int EntityTypeCode = 8;
        
        public SystemUser() : 
                base(EntityLogicalName) {
        }
        
        public SystemUser(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("fullname");
            }
        }
        
        [AttributeLogicalName("systemuserid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("systemuserid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user.</para>
        /// <para>Display Name: User</para>
        /// </summary>
        [AttributeLogicalName("systemuserid")]
        [DisplayName("User")]
        public Guid? SystemUserId {
            get {
                return GetAttributeValue<Guid?>("systemuserid");
            }
            set {
                SetId("systemuserid", value);
            }
        }
        
        /// <summary>
        /// <para>Type of user.</para>
        /// <para>Display Name: Access Mode</para>
        /// </summary>
        [AttributeLogicalName("accessmode")]
        [DisplayName("Access Mode")]
        public SystemUser_AccessMode? AccessMode {
            get {
                return GetOptionSetValue<SystemUser_AccessMode>("accessmode");
            }
            set {
                SetOptionSetValue("accessmode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for address 1.</para>
        /// <para>Display Name: Address 1: ID</para>
        /// </summary>
        [AttributeLogicalName("address1_addressid")]
        [DisplayName("Address 1: ID")]
        public Guid? Address1_AddressId {
            get {
                return GetAttributeValue<Guid?>("address1_addressid");
            }
            set {
                SetAttributeValue("address1_addressid", value);
            }
        }
        
        /// <summary>
        /// <para>Type of address for address 1, such as billing, shipping, or primary address.</para>
        /// <para>Display Name: Address 1: Address Type</para>
        /// </summary>
        [AttributeLogicalName("address1_addresstypecode")]
        [DisplayName("Address 1: Address Type")]
        public SystemUser_Address1_AddressTypeCode? Address1_AddressTypeCode {
            get {
                return GetOptionSetValue<SystemUser_Address1_AddressTypeCode>("address1_addresstypecode");
            }
            set {
                SetOptionSetValue("address1_addresstypecode", value);
            }
        }
        
        /// <summary>
        /// <para>City name for address 1.</para>
        /// <para>Display Name: City</para>
        /// </summary>
        [AttributeLogicalName("address1_city")]
        [DisplayName("City")]
        [MaxLength(128)]
        public string Address1_City {
            get {
                return GetAttributeValue<string>("address1_city");
            }
            set {
                SetAttributeValue("address1_city", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the complete primary address.</para>
        /// <para>Display Name: Address</para>
        /// </summary>
        [AttributeLogicalName("address1_composite")]
        [DisplayName("Address")]
        public string Address1_Composite {
            get {
                return GetAttributeValue<string>("address1_composite");
            }
        }
        
        /// <summary>
        /// <para>Country/region name in address 1.</para>
        /// <para>Display Name: Country/Region</para>
        /// </summary>
        [AttributeLogicalName("address1_country")]
        [DisplayName("Country/Region")]
        [MaxLength(128)]
        public string Address1_Country {
            get {
                return GetAttributeValue<string>("address1_country");
            }
            set {
                SetAttributeValue("address1_country", value);
            }
        }
        
        /// <summary>
        /// <para>County name for address 1.</para>
        /// <para>Display Name: Address 1: County</para>
        /// </summary>
        [AttributeLogicalName("address1_county")]
        [DisplayName("Address 1: County")]
        [MaxLength(128)]
        public string Address1_County {
            get {
                return GetAttributeValue<string>("address1_county");
            }
            set {
                SetAttributeValue("address1_county", value);
            }
        }
        
        /// <summary>
        /// <para>Fax number for address 1.</para>
        /// <para>Display Name: Address 1: Fax</para>
        /// </summary>
        [AttributeLogicalName("address1_fax")]
        [DisplayName("Address 1: Fax")]
        [MaxLength(64)]
        public string Address1_Fax {
            get {
                return GetAttributeValue<string>("address1_fax");
            }
            set {
                SetAttributeValue("address1_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Latitude for address 1.</para>
        /// <para>Display Name: Address 1: Latitude</para>
        /// </summary>
        [AttributeLogicalName("address1_latitude")]
        [DisplayName("Address 1: Latitude")]
        public double? Address1_Latitude {
            get {
                return GetAttributeValue<double?>("address1_latitude");
            }
            set {
                SetAttributeValue("address1_latitude", value);
            }
        }
        
        /// <summary>
        /// <para>First line for entering address 1 information.</para>
        /// <para>Display Name: Street 1</para>
        /// </summary>
        [AttributeLogicalName("address1_line1")]
        [DisplayName("Street 1")]
        [MaxLength(1024)]
        public string Address1_Line1 {
            get {
                return GetAttributeValue<string>("address1_line1");
            }
            set {
                SetAttributeValue("address1_line1", value);
            }
        }
        
        /// <summary>
        /// <para>Second line for entering address 1 information.</para>
        /// <para>Display Name: Street 2</para>
        /// </summary>
        [AttributeLogicalName("address1_line2")]
        [DisplayName("Street 2")]
        [MaxLength(1024)]
        public string Address1_Line2 {
            get {
                return GetAttributeValue<string>("address1_line2");
            }
            set {
                SetAttributeValue("address1_line2", value);
            }
        }
        
        /// <summary>
        /// <para>Third line for entering address 1 information.</para>
        /// <para>Display Name: Street 3</para>
        /// </summary>
        [AttributeLogicalName("address1_line3")]
        [DisplayName("Street 3")]
        [MaxLength(1024)]
        public string Address1_Line3 {
            get {
                return GetAttributeValue<string>("address1_line3");
            }
            set {
                SetAttributeValue("address1_line3", value);
            }
        }
        
        /// <summary>
        /// <para>Longitude for address 1.</para>
        /// <para>Display Name: Address 1: Longitude</para>
        /// </summary>
        [AttributeLogicalName("address1_longitude")]
        [DisplayName("Address 1: Longitude")]
        public double? Address1_Longitude {
            get {
                return GetAttributeValue<double?>("address1_longitude");
            }
            set {
                SetAttributeValue("address1_longitude", value);
            }
        }
        
        /// <summary>
        /// <para>Name to enter for address 1.</para>
        /// <para>Display Name: Address 1: Name</para>
        /// </summary>
        [AttributeLogicalName("address1_name")]
        [DisplayName("Address 1: Name")]
        [MaxLength(100)]
        public string Address1_Name {
            get {
                return GetAttributeValue<string>("address1_name");
            }
            set {
                SetAttributeValue("address1_name", value);
            }
        }
        
        /// <summary>
        /// <para>Post office box number for address 1.</para>
        /// <para>Display Name: Address 1: Post Office Box</para>
        /// </summary>
        [AttributeLogicalName("address1_postofficebox")]
        [DisplayName("Address 1: Post Office Box")]
        [MaxLength(40)]
        public string Address1_PostOfficeBox {
            get {
                return GetAttributeValue<string>("address1_postofficebox");
            }
            set {
                SetAttributeValue("address1_postofficebox", value);
            }
        }
        
        /// <summary>
        /// <para>ZIP Code or postal code for address 1.</para>
        /// <para>Display Name: ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("address1_postalcode")]
        [DisplayName("ZIP/Postal Code")]
        [MaxLength(40)]
        public string Address1_PostalCode {
            get {
                return GetAttributeValue<string>("address1_postalcode");
            }
            set {
                SetAttributeValue("address1_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>Method of shipment for address 1.</para>
        /// <para>Display Name: Address 1: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("address1_shippingmethodcode")]
        [DisplayName("Address 1: Shipping Method")]
        public SystemUser_Address1_ShippingMethodCode? Address1_ShippingMethodCode {
            get {
                return GetOptionSetValue<SystemUser_Address1_ShippingMethodCode>("address1_shippingmethodcode");
            }
            set {
                SetOptionSetValue("address1_shippingmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>State or province for address 1.</para>
        /// <para>Display Name: State/Province</para>
        /// </summary>
        [AttributeLogicalName("address1_stateorprovince")]
        [DisplayName("State/Province")]
        [MaxLength(128)]
        public string Address1_StateOrProvince {
            get {
                return GetAttributeValue<string>("address1_stateorprovince");
            }
            set {
                SetAttributeValue("address1_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>First telephone number associated with address 1.</para>
        /// <para>Display Name: Main Phone</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone1")]
        [DisplayName("Main Phone")]
        [MaxLength(64)]
        public string Address1_Telephone1 {
            get {
                return GetAttributeValue<string>("address1_telephone1");
            }
            set {
                SetAttributeValue("address1_telephone1", value);
            }
        }
        
        /// <summary>
        /// <para>Second telephone number associated with address 1.</para>
        /// <para>Display Name: Other Phone</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone2")]
        [DisplayName("Other Phone")]
        [MaxLength(50)]
        public string Address1_Telephone2 {
            get {
                return GetAttributeValue<string>("address1_telephone2");
            }
            set {
                SetAttributeValue("address1_telephone2", value);
            }
        }
        
        /// <summary>
        /// <para>Third telephone number associated with address 1.</para>
        /// <para>Display Name: Pager</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone3")]
        [DisplayName("Pager")]
        [MaxLength(50)]
        public string Address1_Telephone3 {
            get {
                return GetAttributeValue<string>("address1_telephone3");
            }
            set {
                SetAttributeValue("address1_telephone3", value);
            }
        }
        
        /// <summary>
        /// <para>United Parcel Service (UPS) zone for address 1.</para>
        /// <para>Display Name: Address 1: UPS Zone</para>
        /// </summary>
        [AttributeLogicalName("address1_upszone")]
        [DisplayName("Address 1: UPS Zone")]
        [MaxLength(4)]
        public string Address1_UPSZone {
            get {
                return GetAttributeValue<string>("address1_upszone");
            }
            set {
                SetAttributeValue("address1_upszone", value);
            }
        }
        
        /// <summary>
        /// <para>UTC offset for address 1. This is the difference between local time and standard Coordinated Universal Time.</para>
        /// <para>Display Name: Address 1: UTC Offset</para>
        /// </summary>
        [AttributeLogicalName("address1_utcoffset")]
        [DisplayName("Address 1: UTC Offset")]
        [Range(-1500, 1500)]
        public int? Address1_UTCOffset {
            get {
                return GetAttributeValue<int?>("address1_utcoffset");
            }
            set {
                SetAttributeValue("address1_utcoffset", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for address 2.</para>
        /// <para>Display Name: Address 2: ID</para>
        /// </summary>
        [AttributeLogicalName("address2_addressid")]
        [DisplayName("Address 2: ID")]
        public Guid? Address2_AddressId {
            get {
                return GetAttributeValue<Guid?>("address2_addressid");
            }
            set {
                SetAttributeValue("address2_addressid", value);
            }
        }
        
        /// <summary>
        /// <para>Type of address for address 2, such as billing, shipping, or primary address.</para>
        /// <para>Display Name: Address 2: Address Type</para>
        /// </summary>
        [AttributeLogicalName("address2_addresstypecode")]
        [DisplayName("Address 2: Address Type")]
        public SystemUser_Address2_AddressTypeCode? Address2_AddressTypeCode {
            get {
                return GetOptionSetValue<SystemUser_Address2_AddressTypeCode>("address2_addresstypecode");
            }
            set {
                SetOptionSetValue("address2_addresstypecode", value);
            }
        }
        
        /// <summary>
        /// <para>City name for address 2.</para>
        /// <para>Display Name: Other City</para>
        /// </summary>
        [AttributeLogicalName("address2_city")]
        [DisplayName("Other City")]
        [MaxLength(128)]
        public string Address2_City {
            get {
                return GetAttributeValue<string>("address2_city");
            }
            set {
                SetAttributeValue("address2_city", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the complete secondary address.</para>
        /// <para>Display Name: Other Address</para>
        /// </summary>
        [AttributeLogicalName("address2_composite")]
        [DisplayName("Other Address")]
        public string Address2_Composite {
            get {
                return GetAttributeValue<string>("address2_composite");
            }
        }
        
        /// <summary>
        /// <para>Country/region name in address 2.</para>
        /// <para>Display Name: Other Country/Region</para>
        /// </summary>
        [AttributeLogicalName("address2_country")]
        [DisplayName("Other Country/Region")]
        [MaxLength(128)]
        public string Address2_Country {
            get {
                return GetAttributeValue<string>("address2_country");
            }
            set {
                SetAttributeValue("address2_country", value);
            }
        }
        
        /// <summary>
        /// <para>County name for address 2.</para>
        /// <para>Display Name: Address 2: County</para>
        /// </summary>
        [AttributeLogicalName("address2_county")]
        [DisplayName("Address 2: County")]
        [MaxLength(128)]
        public string Address2_County {
            get {
                return GetAttributeValue<string>("address2_county");
            }
            set {
                SetAttributeValue("address2_county", value);
            }
        }
        
        /// <summary>
        /// <para>Fax number for address 2.</para>
        /// <para>Display Name: Address 2: Fax</para>
        /// </summary>
        [AttributeLogicalName("address2_fax")]
        [DisplayName("Address 2: Fax")]
        [MaxLength(50)]
        public string Address2_Fax {
            get {
                return GetAttributeValue<string>("address2_fax");
            }
            set {
                SetAttributeValue("address2_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Latitude for address 2.</para>
        /// <para>Display Name: Address 2: Latitude</para>
        /// </summary>
        [AttributeLogicalName("address2_latitude")]
        [DisplayName("Address 2: Latitude")]
        public double? Address2_Latitude {
            get {
                return GetAttributeValue<double?>("address2_latitude");
            }
            set {
                SetAttributeValue("address2_latitude", value);
            }
        }
        
        /// <summary>
        /// <para>First line for entering address 2 information.</para>
        /// <para>Display Name: Other Street 1</para>
        /// </summary>
        [AttributeLogicalName("address2_line1")]
        [DisplayName("Other Street 1")]
        [MaxLength(1024)]
        public string Address2_Line1 {
            get {
                return GetAttributeValue<string>("address2_line1");
            }
            set {
                SetAttributeValue("address2_line1", value);
            }
        }
        
        /// <summary>
        /// <para>Second line for entering address 2 information.</para>
        /// <para>Display Name: Other Street 2</para>
        /// </summary>
        [AttributeLogicalName("address2_line2")]
        [DisplayName("Other Street 2")]
        [MaxLength(1024)]
        public string Address2_Line2 {
            get {
                return GetAttributeValue<string>("address2_line2");
            }
            set {
                SetAttributeValue("address2_line2", value);
            }
        }
        
        /// <summary>
        /// <para>Third line for entering address 2 information.</para>
        /// <para>Display Name: Other Street 3</para>
        /// </summary>
        [AttributeLogicalName("address2_line3")]
        [DisplayName("Other Street 3")]
        [MaxLength(1024)]
        public string Address2_Line3 {
            get {
                return GetAttributeValue<string>("address2_line3");
            }
            set {
                SetAttributeValue("address2_line3", value);
            }
        }
        
        /// <summary>
        /// <para>Longitude for address 2.</para>
        /// <para>Display Name: Address 2: Longitude</para>
        /// </summary>
        [AttributeLogicalName("address2_longitude")]
        [DisplayName("Address 2: Longitude")]
        public double? Address2_Longitude {
            get {
                return GetAttributeValue<double?>("address2_longitude");
            }
            set {
                SetAttributeValue("address2_longitude", value);
            }
        }
        
        /// <summary>
        /// <para>Name to enter for address 2.</para>
        /// <para>Display Name: Address 2: Name</para>
        /// </summary>
        [AttributeLogicalName("address2_name")]
        [DisplayName("Address 2: Name")]
        [MaxLength(100)]
        public string Address2_Name {
            get {
                return GetAttributeValue<string>("address2_name");
            }
            set {
                SetAttributeValue("address2_name", value);
            }
        }
        
        /// <summary>
        /// <para>Post office box number for address 2.</para>
        /// <para>Display Name: Address 2: Post Office Box</para>
        /// </summary>
        [AttributeLogicalName("address2_postofficebox")]
        [DisplayName("Address 2: Post Office Box")]
        [MaxLength(40)]
        public string Address2_PostOfficeBox {
            get {
                return GetAttributeValue<string>("address2_postofficebox");
            }
            set {
                SetAttributeValue("address2_postofficebox", value);
            }
        }
        
        /// <summary>
        /// <para>ZIP Code or postal code for address 2.</para>
        /// <para>Display Name: Other ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("address2_postalcode")]
        [DisplayName("Other ZIP/Postal Code")]
        [MaxLength(40)]
        public string Address2_PostalCode {
            get {
                return GetAttributeValue<string>("address2_postalcode");
            }
            set {
                SetAttributeValue("address2_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>Method of shipment for address 2.</para>
        /// <para>Display Name: Address 2: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("address2_shippingmethodcode")]
        [DisplayName("Address 2: Shipping Method")]
        public SystemUser_Address2_ShippingMethodCode? Address2_ShippingMethodCode {
            get {
                return GetOptionSetValue<SystemUser_Address2_ShippingMethodCode>("address2_shippingmethodcode");
            }
            set {
                SetOptionSetValue("address2_shippingmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>State or province for address 2.</para>
        /// <para>Display Name: Other State/Province</para>
        /// </summary>
        [AttributeLogicalName("address2_stateorprovince")]
        [DisplayName("Other State/Province")]
        [MaxLength(128)]
        public string Address2_StateOrProvince {
            get {
                return GetAttributeValue<string>("address2_stateorprovince");
            }
            set {
                SetAttributeValue("address2_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>First telephone number associated with address 2.</para>
        /// <para>Display Name: Address 2: Telephone 1</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone1")]
        [DisplayName("Address 2: Telephone 1")]
        [MaxLength(50)]
        public string Address2_Telephone1 {
            get {
                return GetAttributeValue<string>("address2_telephone1");
            }
            set {
                SetAttributeValue("address2_telephone1", value);
            }
        }
        
        /// <summary>
        /// <para>Second telephone number associated with address 2.</para>
        /// <para>Display Name: Address 2: Telephone 2</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone2")]
        [DisplayName("Address 2: Telephone 2")]
        [MaxLength(50)]
        public string Address2_Telephone2 {
            get {
                return GetAttributeValue<string>("address2_telephone2");
            }
            set {
                SetAttributeValue("address2_telephone2", value);
            }
        }
        
        /// <summary>
        /// <para>Third telephone number associated with address 2.</para>
        /// <para>Display Name: Address 2: Telephone 3</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone3")]
        [DisplayName("Address 2: Telephone 3")]
        [MaxLength(50)]
        public string Address2_Telephone3 {
            get {
                return GetAttributeValue<string>("address2_telephone3");
            }
            set {
                SetAttributeValue("address2_telephone3", value);
            }
        }
        
        /// <summary>
        /// <para>United Parcel Service (UPS) zone for address 2.</para>
        /// <para>Display Name: Address 2: UPS Zone</para>
        /// </summary>
        [AttributeLogicalName("address2_upszone")]
        [DisplayName("Address 2: UPS Zone")]
        [MaxLength(4)]
        public string Address2_UPSZone {
            get {
                return GetAttributeValue<string>("address2_upszone");
            }
            set {
                SetAttributeValue("address2_upszone", value);
            }
        }
        
        /// <summary>
        /// <para>UTC offset for address 2. This is the difference between local time and standard Coordinated Universal Time.</para>
        /// <para>Display Name: Address 2: UTC Offset</para>
        /// </summary>
        [AttributeLogicalName("address2_utcoffset")]
        [DisplayName("Address 2: UTC Offset")]
        [Range(-1500, 1500)]
        public int? Address2_UTCOffset {
            get {
                return GetAttributeValue<int?>("address2_utcoffset");
            }
            set {
                SetAttributeValue("address2_utcoffset", value);
            }
        }
        
        /// <summary>
        /// <para>The identifier for the application. This is used to access data in another application.</para>
        /// <para>Display Name: Application ID</para>
        /// </summary>
        [AttributeLogicalName("applicationid")]
        [DisplayName("Application ID")]
        public Guid? ApplicationId {
            get {
                return GetAttributeValue<Guid?>("applicationid");
            }
            set {
                SetAttributeValue("applicationid", value);
            }
        }
        
        /// <summary>
        /// <para>The URI used as a unique logical identifier for the external app. This can be used to validate the application.</para>
        /// <para>Display Name: Application ID URI</para>
        /// </summary>
        [AttributeLogicalName("applicationiduri")]
        [DisplayName("Application ID URI")]
        [MaxLength(1024)]
        public string ApplicationIdUri {
            get {
                return GetAttributeValue<string>("applicationiduri");
            }
        }
        
        /// <summary>
        /// <para>This is the application directory object Id.</para>
        /// <para>Display Name: Azure AD Object ID</para>
        /// </summary>
        [AttributeLogicalName("azureactivedirectoryobjectid")]
        [DisplayName("Azure AD Object ID")]
        public Guid? AzureActiveDirectoryObjectId {
            get {
                return GetAttributeValue<Guid?>("azureactivedirectoryobjectid");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the user was set as soft deleted in Azure.</para>
        /// <para>Display Name: Azure Deleted On</para>
        /// </summary>
        [AttributeLogicalName("azuredeletedon")]
        [DisplayName("Azure Deleted On")]
        public DateTime? AzureDeletedOn {
            get {
                return GetAttributeValue<DateTime?>("azuredeletedon");
            }
        }
        
        /// <summary>
        /// <para>Azure state of user</para>
        /// <para>Display Name: Azure State</para>
        /// </summary>
        [AttributeLogicalName("azurestate")]
        [DisplayName("Azure State")]
        public SystemUser_AzureState? AzureState {
            get {
                return GetOptionSetValue<SystemUser_AzureState>("azurestate");
            }
            set {
                SetOptionSetValue("azurestate", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit with which the user is associated.</para>
        /// <para>Display Name: Business Unit</para>
        /// </summary>
        [AttributeLogicalName("businessunitid")]
        [DisplayName("Business Unit")]
        public EntityReference BusinessUnitId {
            get {
                return GetAttributeValue<EntityReference>("businessunitid");
            }
            set {
                SetAttributeValue("businessunitid", value);
            }
        }
        
        /// <summary>
        /// <para>License type of user. This is used only in the on-premises version of the product. Online licenses are managed through Microsoft 365 Office Portal</para>
        /// <para>Display Name: License Type</para>
        /// </summary>
        [AttributeLogicalName("caltype")]
        [DisplayName("License Type")]
        public SystemUser_CALType? CALType {
            get {
                return GetOptionSetValue<SystemUser_CALType>("caltype");
            }
            set {
                SetOptionSetValue("caltype", value);
            }
        }
        
        /// <summary>
        /// <para>Fiscal calendar associated with the user.</para>
        /// <para>Display Name: Calendar</para>
        /// </summary>
        [AttributeLogicalName("calendarid")]
        [DisplayName("Calendar")]
        public EntityReference CalendarId {
            get {
                return GetAttributeValue<EntityReference>("calendarid");
            }
            set {
                SetAttributeValue("calendarid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the user.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        [DisplayName("Created By")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the user was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        [DisplayName("Created On")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the systemuser.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        [DisplayName("Created By (Delegate)")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Indicates if default outlook filters have been populated.</para>
        /// <para>Display Name: Default Filters Populated</para>
        /// </summary>
        [AttributeLogicalName("defaultfilterspopulated")]
        [DisplayName("Default Filters Populated")]
        public bool? DefaultFiltersPopulated {
            get {
                return GetAttributeValue<bool?>("defaultfilterspopulated");
            }
        }
        
        /// <summary>
        /// <para>Select the mailbox associated with this user.</para>
        /// <para>Display Name: Mailbox</para>
        /// </summary>
        [AttributeLogicalName("defaultmailbox")]
        [DisplayName("Mailbox")]
        public EntityReference DefaultMailbox {
            get {
                return GetAttributeValue<EntityReference>("defaultmailbox");
            }
        }
        
        /// <summary>
        /// <para>Type a default folder name for the user's OneDrive For Business location.</para>
        /// <para>Display Name: Default OneDrive for Business Folder Name</para>
        /// </summary>
        [AttributeLogicalName("defaultodbfoldername")]
        [DisplayName("Default OneDrive for Business Folder Name")]
        [MaxLength(200)]
        public string DefaultOdbFolderName {
            get {
                return GetAttributeValue<string>("defaultodbfoldername");
            }
        }
        
        /// <summary>
        /// <para>User delete state</para>
        /// <para>Display Name: Deleted State</para>
        /// </summary>
        [AttributeLogicalName("deletedstate")]
        [DisplayName("Deleted State")]
        public SystemUser_DeletedState? DeletedState {
            get {
                return GetOptionSetValue<SystemUser_DeletedState>("deletedstate");
            }
        }
        
        /// <summary>
        /// <para>Reason for disabling the user.</para>
        /// <para>Display Name: Disabled Reason</para>
        /// </summary>
        [AttributeLogicalName("disabledreason")]
        [DisplayName("Disabled Reason")]
        [MaxLength(500)]
        public string DisabledReason {
            get {
                return GetAttributeValue<string>("disabledreason");
            }
        }
        
        /// <summary>
        /// <para>Whether to display the user in service views.</para>
        /// <para>Display Name: Display in Service Views</para>
        /// </summary>
        [AttributeLogicalName("displayinserviceviews")]
        [DisplayName("Display in Service Views")]
        public bool? DisplayInServiceViews {
            get {
                return GetAttributeValue<bool?>("displayinserviceviews");
            }
            set {
                SetAttributeValue("displayinserviceviews", value);
            }
        }
        
        /// <summary>
        /// <para>Active Directory domain of which the user is a member.</para>
        /// <para>Display Name: User Name</para>
        /// </summary>
        [AttributeLogicalName("domainname")]
        [DisplayName("User Name")]
        [MaxLength(1024)]
        public string DomainName {
            get {
                return GetAttributeValue<string>("domainname");
            }
            set {
                SetAttributeValue("domainname", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the status of the primary email address.</para>
        /// <para>Display Name: Primary Email Status</para>
        /// </summary>
        [AttributeLogicalName("emailrouteraccessapproval")]
        [DisplayName("Primary Email Status")]
        public SystemUser_EmailRouterAccessApproval? EmailRouterAccessApproval {
            get {
                return GetOptionSetValue<SystemUser_EmailRouterAccessApproval>("emailrouteraccessapproval");
            }
            set {
                SetOptionSetValue("emailrouteraccessapproval", value);
            }
        }
        
        /// <summary>
        /// <para>Employee identifier for the user.</para>
        /// <para>Display Name: Employee</para>
        /// </summary>
        [AttributeLogicalName("employeeid")]
        [DisplayName("Employee")]
        [MaxLength(100)]
        public string EmployeeId {
            get {
                return GetAttributeValue<string>("employeeid");
            }
            set {
                SetAttributeValue("employeeid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Entity Image Id</para>
        /// </summary>
        [AttributeLogicalName("entityimageid")]
        [DisplayName("Entity Image Id")]
        public Guid? EntityImageId {
            get {
                return GetAttributeValue<Guid?>("entityimageid");
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the systemuser with respect to the base currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        [DisplayName("Exchange Rate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>First name of the user.</para>
        /// <para>Display Name: First Name</para>
        /// </summary>
        [AttributeLogicalName("firstname")]
        [DisplayName("First Name")]
        [MaxLength(256)]
        public string FirstName {
            get {
                return GetAttributeValue<string>("firstname");
            }
            set {
                SetAttributeValue("firstname", value);
            }
        }
        
        /// <summary>
        /// <para>Full name of the user.</para>
        /// <para>Display Name: Full Name</para>
        /// </summary>
        [AttributeLogicalName("fullname")]
        [DisplayName("Full Name")]
        [MaxLength(200)]
        public string FullName {
            get {
                return GetAttributeValue<string>("fullname");
            }
        }
        
        /// <summary>
        /// <para>Government identifier for the user.</para>
        /// <para>Display Name: Government</para>
        /// </summary>
        [AttributeLogicalName("governmentid")]
        [DisplayName("Government")]
        [MaxLength(100)]
        public string GovernmentId {
            get {
                return GetAttributeValue<string>("governmentid");
            }
            set {
                SetAttributeValue("governmentid", value);
            }
        }
        
        /// <summary>
        /// <para>Home phone number for the user.</para>
        /// <para>Display Name: Home Phone</para>
        /// </summary>
        [AttributeLogicalName("homephone")]
        [DisplayName("Home Phone")]
        [MaxLength(50)]
        public string HomePhone {
            get {
                return GetAttributeValue<string>("homephone");
            }
            set {
                SetAttributeValue("homephone", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Unique user identity id</para>
        /// </summary>
        [AttributeLogicalName("identityid")]
        [DisplayName("Unique user identity id")]
        [Range(-2147483648, 2147483647)]
        public int? IdentityId {
            get {
                return GetAttributeValue<int?>("identityid");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        [DisplayName("Import Sequence Number")]
        [Range(-2147483648, 2147483647)]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Incoming email delivery method for the user.</para>
        /// <para>Display Name: Incoming Email Delivery Method</para>
        /// </summary>
        [AttributeLogicalName("incomingemaildeliverymethod")]
        [DisplayName("Incoming Email Delivery Method")]
        public SystemUser_IncomingEmailDeliveryMethod? IncomingEmailDeliveryMethod {
            get {
                return GetOptionSetValue<SystemUser_IncomingEmailDeliveryMethod>("incomingemaildeliverymethod");
            }
            set {
                SetOptionSetValue("incomingemaildeliverymethod", value);
            }
        }
        
        /// <summary>
        /// <para>Internal email address for the user.</para>
        /// <para>Display Name: Primary Email</para>
        /// </summary>
        [AttributeLogicalName("internalemailaddress")]
        [DisplayName("Primary Email")]
        [MaxLength(100)]
        public string InternalEMailAddress {
            get {
                return GetAttributeValue<string>("internalemailaddress");
            }
            set {
                SetAttributeValue("internalemailaddress", value);
            }
        }
        
        /// <summary>
        /// <para>User invitation status.</para>
        /// <para>Display Name: Invitation Status</para>
        /// </summary>
        [AttributeLogicalName("invitestatuscode")]
        [DisplayName("Invitation Status")]
        public SystemUser_InviteStatusCode? InviteStatusCode {
            get {
                return GetOptionSetValue<SystemUser_InviteStatusCode>("invitestatuscode");
            }
            set {
                SetOptionSetValue("invitestatuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Information about whether the user is enabled.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("isdisabled")]
        [DisplayName("Status")]
        public bool? IsDisabled {
            get {
                return GetAttributeValue<bool?>("isdisabled");
            }
            set {
                SetAttributeValue("isdisabled", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the status of approval of the email address by O365 Admin.</para>
        /// <para>Display Name: Email Address O365 Admin Approval Status</para>
        /// </summary>
        [AttributeLogicalName("isemailaddressapprovedbyo365admin")]
        [DisplayName("Email Address O365 Admin Approval Status")]
        public bool? IsEmailAddressApprovedByO365Admin {
            get {
                return GetAttributeValue<bool?>("isemailaddressapprovedbyo365admin");
            }
        }
        
        /// <summary>
        /// <para>Check if user is an integration user.</para>
        /// <para>Display Name: Integration user mode</para>
        /// </summary>
        [AttributeLogicalName("isintegrationuser")]
        [DisplayName("Integration user mode")]
        public bool? IsIntegrationUser {
            get {
                return GetAttributeValue<bool?>("isintegrationuser");
            }
            set {
                SetAttributeValue("isintegrationuser", value);
            }
        }
        
        /// <summary>
        /// <para>Information about whether the user is licensed.</para>
        /// <para>Display Name: User Licensed</para>
        /// </summary>
        [AttributeLogicalName("islicensed")]
        [DisplayName("User Licensed")]
        public bool? IsLicensed {
            get {
                return GetAttributeValue<bool?>("islicensed");
            }
            set {
                SetAttributeValue("islicensed", value);
            }
        }
        
        /// <summary>
        /// <para>Information about whether the user is synced with the directory.</para>
        /// <para>Display Name: User Synced</para>
        /// </summary>
        [AttributeLogicalName("issyncwithdirectory")]
        [DisplayName("User Synced")]
        public bool? IsSyncWithDirectory {
            get {
                return GetAttributeValue<bool?>("issyncwithdirectory");
            }
            set {
                SetAttributeValue("issyncwithdirectory", value);
            }
        }
        
        /// <summary>
        /// <para>Job title of the user.</para>
        /// <para>Display Name: Job Title</para>
        /// </summary>
        [AttributeLogicalName("jobtitle")]
        [DisplayName("Job Title")]
        [MaxLength(100)]
        public string JobTitle {
            get {
                return GetAttributeValue<string>("jobtitle");
            }
            set {
                SetAttributeValue("jobtitle", value);
            }
        }
        
        /// <summary>
        /// <para>Last name of the user.</para>
        /// <para>Display Name: Last Name</para>
        /// </summary>
        [AttributeLogicalName("lastname")]
        [DisplayName("Last Name")]
        [MaxLength(256)]
        public string LastName {
            get {
                return GetAttributeValue<string>("lastname");
            }
            set {
                SetAttributeValue("lastname", value);
            }
        }
        
        /// <summary>
        /// <para>Middle name of the user.</para>
        /// <para>Display Name: Middle Name</para>
        /// </summary>
        [AttributeLogicalName("middlename")]
        [DisplayName("Middle Name")]
        [MaxLength(50)]
        public string MiddleName {
            get {
                return GetAttributeValue<string>("middlename");
            }
            set {
                SetAttributeValue("middlename", value);
            }
        }
        
        /// <summary>
        /// <para>Mobile alert email address for the user.</para>
        /// <para>Display Name: Mobile Alert Email</para>
        /// </summary>
        [AttributeLogicalName("mobilealertemail")]
        [DisplayName("Mobile Alert Email")]
        [MaxLength(100)]
        public string MobileAlertEMail {
            get {
                return GetAttributeValue<string>("mobilealertemail");
            }
            set {
                SetAttributeValue("mobilealertemail", value);
            }
        }
        
        /// <summary>
        /// <para>Items contained with a particular SystemUser.</para>
        /// <para>Display Name: Mobile Offline Profile</para>
        /// </summary>
        [AttributeLogicalName("mobileofflineprofileid")]
        [DisplayName("Mobile Offline Profile")]
        public EntityReference MobileOfflineProfileId {
            get {
                return GetAttributeValue<EntityReference>("mobileofflineprofileid");
            }
            set {
                SetAttributeValue("mobileofflineprofileid", value);
            }
        }
        
        /// <summary>
        /// <para>Mobile phone number for the user.</para>
        /// <para>Display Name: Mobile Phone</para>
        /// </summary>
        [AttributeLogicalName("mobilephone")]
        [DisplayName("Mobile Phone")]
        [MaxLength(64)]
        public string MobilePhone {
            get {
                return GetAttributeValue<string>("mobilephone");
            }
            set {
                SetAttributeValue("mobilephone", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who last modified the user.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        [DisplayName("Modified By")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the user was last modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        [DisplayName("Modified On")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who last modified the systemuser.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        [DisplayName("Modified By (Delegate)")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Nickname of the user.</para>
        /// <para>Display Name: Nickname</para>
        /// </summary>
        [AttributeLogicalName("nickname")]
        [DisplayName("Nickname")]
        [MaxLength(50)]
        public string NickName {
            get {
                return GetAttributeValue<string>("nickname");
            }
            set {
                SetAttributeValue("nickname", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the organization associated with the user.</para>
        /// <para>Display Name: Organization </para>
        /// </summary>
        [AttributeLogicalName("organizationid")]
        [DisplayName("Organization ")]
        public Guid? OrganizationId {
            get {
                return GetAttributeValue<Guid?>("organizationid");
            }
        }
        
        /// <summary>
        /// <para>Outgoing email delivery method for the user.</para>
        /// <para>Display Name: Outgoing Email Delivery Method</para>
        /// </summary>
        [AttributeLogicalName("outgoingemaildeliverymethod")]
        [DisplayName("Outgoing Email Delivery Method")]
        public SystemUser_OutgoingEmailDeliveryMethod? OutgoingEmailDeliveryMethod {
            get {
                return GetOptionSetValue<SystemUser_OutgoingEmailDeliveryMethod>("outgoingemaildeliverymethod");
            }
            set {
                SetOptionSetValue("outgoingemaildeliverymethod", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        [DisplayName("Record Created On")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the manager of the user.</para>
        /// <para>Display Name: Manager</para>
        /// </summary>
        [AttributeLogicalName("parentsystemuserid")]
        [DisplayName("Manager")]
        public EntityReference ParentSystemUserId {
            get {
                return GetAttributeValue<EntityReference>("parentsystemuserid");
            }
            set {
                SetAttributeValue("parentsystemuserid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Passport Hi</para>
        /// </summary>
        [AttributeLogicalName("passporthi")]
        [DisplayName("Passport Hi")]
        [Range(0, 1000000000)]
        public int? PassportHi {
            get {
                return GetAttributeValue<int?>("passporthi");
            }
            set {
                SetAttributeValue("passporthi", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Passport Lo</para>
        /// </summary>
        [AttributeLogicalName("passportlo")]
        [DisplayName("Passport Lo")]
        [Range(0, 1000000000)]
        public int? PassportLo {
            get {
                return GetAttributeValue<int?>("passportlo");
            }
            set {
                SetAttributeValue("passportlo", value);
            }
        }
        
        /// <summary>
        /// <para>Personal email address of the user.</para>
        /// <para>Display Name: Email 2</para>
        /// </summary>
        [AttributeLogicalName("personalemailaddress")]
        [DisplayName("Email 2")]
        [MaxLength(100)]
        public string PersonalEMailAddress {
            get {
                return GetAttributeValue<string>("personalemailaddress");
            }
            set {
                SetAttributeValue("personalemailaddress", value);
            }
        }
        
        /// <summary>
        /// <para>URL for the Website on which a photo of the user is located.</para>
        /// <para>Display Name: Photo URL</para>
        /// </summary>
        [AttributeLogicalName("photourl")]
        [DisplayName("Photo URL")]
        [MaxLength(200)]
        public string PhotoUrl {
            get {
                return GetAttributeValue<string>("photourl");
            }
            set {
                SetAttributeValue("photourl", value);
            }
        }
        
        /// <summary>
        /// <para>User's position in hierarchical security model.</para>
        /// <para>Display Name: Position</para>
        /// </summary>
        [AttributeLogicalName("positionid")]
        [DisplayName("Position")]
        public EntityReference PositionId {
            get {
                return GetAttributeValue<EntityReference>("positionid");
            }
            set {
                SetAttributeValue("positionid", value);
            }
        }
        
        /// <summary>
        /// <para>Preferred address for the user.</para>
        /// <para>Display Name: Preferred Address</para>
        /// </summary>
        [AttributeLogicalName("preferredaddresscode")]
        [DisplayName("Preferred Address")]
        public SystemUser_PreferredAddressCode? PreferredAddressCode {
            get {
                return GetOptionSetValue<SystemUser_PreferredAddressCode>("preferredaddresscode");
            }
            set {
                SetOptionSetValue("preferredaddresscode", value);
            }
        }
        
        /// <summary>
        /// <para>Preferred email address for the user.</para>
        /// <para>Display Name: Preferred Email</para>
        /// </summary>
        [AttributeLogicalName("preferredemailcode")]
        [DisplayName("Preferred Email")]
        public SystemUser_PreferredEmailCode? PreferredEmailCode {
            get {
                return GetOptionSetValue<SystemUser_PreferredEmailCode>("preferredemailcode");
            }
            set {
                SetOptionSetValue("preferredemailcode", value);
            }
        }
        
        /// <summary>
        /// <para>Preferred phone number for the user.</para>
        /// <para>Display Name: Preferred Phone</para>
        /// </summary>
        [AttributeLogicalName("preferredphonecode")]
        [DisplayName("Preferred Phone")]
        public SystemUser_PreferredPhoneCode? PreferredPhoneCode {
            get {
                return GetOptionSetValue<SystemUser_PreferredPhoneCode>("preferredphonecode");
            }
            set {
                SetOptionSetValue("preferredphonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Full name of the user.</para>
        /// <para>Display Name: Full Name</para>
        /// </summary>
        [AttributeLogicalName("fullname")]
        [DisplayName("Full Name")]
        [MaxLength(200)]
        public string PrimaryNameField {
            get {
                return GetAttributeValue<string>("fullname");
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        [DisplayName("Process")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the default queue for the user.</para>
        /// <para>Display Name: Default Queue</para>
        /// </summary>
        [AttributeLogicalName("queueid")]
        [DisplayName("Default Queue")]
        public EntityReference QueueId {
            get {
                return GetAttributeValue<EntityReference>("queueid");
            }
            set {
                SetAttributeValue("queueid", value);
            }
        }
        
        /// <summary>
        /// <para>Salutation for correspondence with the user.</para>
        /// <para>Display Name: Salutation</para>
        /// </summary>
        [AttributeLogicalName("salutation")]
        [DisplayName("Salutation")]
        [MaxLength(20)]
        public string Salutation {
            get {
                return GetAttributeValue<string>("salutation");
            }
            set {
                SetAttributeValue("salutation", value);
            }
        }
        
        /// <summary>
        /// <para>Check if user is a setup user.</para>
        /// <para>Display Name: Restricted Access Mode</para>
        /// </summary>
        [AttributeLogicalName("setupuser")]
        [DisplayName("Restricted Access Mode")]
        public bool? SetupUser {
            get {
                return GetAttributeValue<bool?>("setupuser");
            }
            set {
                SetAttributeValue("setupuser", value);
            }
        }
        
        /// <summary>
        /// <para>SharePoint Work Email Address</para>
        /// <para>Display Name: SharePoint Email Address</para>
        /// </summary>
        [AttributeLogicalName("sharepointemailaddress")]
        [DisplayName("SharePoint Email Address")]
        [MaxLength(1024)]
        public string SharePointEmailAddress {
            get {
                return GetAttributeValue<string>("sharepointemailaddress");
            }
            set {
                SetAttributeValue("sharepointemailaddress", value);
            }
        }
        
        /// <summary>
        /// <para>Site at which the user is located.</para>
        /// <para>Display Name: Site</para>
        /// </summary>
        [AttributeLogicalName("siteid")]
        [DisplayName("Site")]
        public EntityReference SiteId {
            get {
                return GetAttributeValue<EntityReference>("siteid");
            }
            set {
                SetAttributeValue("siteid", value);
            }
        }
        
        /// <summary>
        /// <para>Skill set of the user.</para>
        /// <para>Display Name: Skills</para>
        /// </summary>
        [AttributeLogicalName("skills")]
        [DisplayName("Skills")]
        [MaxLength(100)]
        public string Skills {
            get {
                return GetAttributeValue<string>("skills");
            }
            set {
                SetAttributeValue("skills", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Display Name: (Deprecated) Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        [DisplayName("(Deprecated) Process Stage")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>The type of user</para>
        /// <para>Display Name: System Managed User Type</para>
        /// </summary>
        [AttributeLogicalName("systemmanagedusertype")]
        [DisplayName("System Managed User Type")]
        public SystemUser_SystemManagedUserType? SystemManagedUserType {
            get {
                return GetOptionSetValue<SystemUser_SystemManagedUserType>("systemmanagedusertype");
            }
            set {
                SetOptionSetValue("systemmanagedusertype", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the territory to which the user is assigned.</para>
        /// <para>Display Name: Territory</para>
        /// </summary>
        [AttributeLogicalName("territoryid")]
        [DisplayName("Territory")]
        public EntityReference TerritoryId {
            get {
                return GetAttributeValue<EntityReference>("territoryid");
            }
            set {
                SetAttributeValue("territoryid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        [DisplayName("Time Zone Rule Version Number")]
        [Range(-1, 2147483647)]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Title of the user.</para>
        /// <para>Display Name: Title</para>
        /// </summary>
        [AttributeLogicalName("title")]
        [DisplayName("Title")]
        [MaxLength(128)]
        public string Title {
            get {
                return GetAttributeValue<string>("title");
            }
            set {
                SetAttributeValue("title", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the currency associated with the systemuser.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        [DisplayName("Currency")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: (Deprecated) Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        [DisplayName("(Deprecated) Traversed Path")]
        [MaxLength(1250)]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        [DisplayName("UTC Conversion Time Zone Code")]
        [Range(-1, 2147483647)]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the type of user license.</para>
        /// <para>Display Name: User License Type</para>
        /// </summary>
        [AttributeLogicalName("userlicensetype")]
        [DisplayName("User License Type")]
        [Range(-2147483648, 2147483647)]
        public int? UserLicenseType {
            get {
                return GetAttributeValue<int?>("userlicensetype");
            }
            set {
                SetAttributeValue("userlicensetype", value);
            }
        }
        
        /// <summary>
        /// <para> User PUID User Identifiable Information</para>
        /// <para>Display Name: User PUID</para>
        /// </summary>
        [AttributeLogicalName("userpuid")]
        [DisplayName("User PUID")]
        [MaxLength(100)]
        public string UserPuid {
            get {
                return GetAttributeValue<string>("userpuid");
            }
        }
        
        /// <summary>
        /// <para>Version number of the user.</para>
        /// <para>Display Name: Version number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        [DisplayName("Version number")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Windows Live ID</para>
        /// <para>Display Name: Windows Live ID</para>
        /// </summary>
        [AttributeLogicalName("windowsliveid")]
        [DisplayName("Windows Live ID")]
        [MaxLength(1024)]
        public string WindowsLiveID {
            get {
                return GetAttributeValue<string>("windowsliveid");
            }
            set {
                SetAttributeValue("windowsliveid", value);
            }
        }
        
        /// <summary>
        /// <para>User's Yammer login email address</para>
        /// <para>Display Name: Yammer Email</para>
        /// </summary>
        [AttributeLogicalName("yammeremailaddress")]
        [DisplayName("Yammer Email")]
        [MaxLength(200)]
        public string YammerEmailAddress {
            get {
                return GetAttributeValue<string>("yammeremailaddress");
            }
            set {
                SetAttributeValue("yammeremailaddress", value);
            }
        }
        
        /// <summary>
        /// <para>User's Yammer ID</para>
        /// <para>Display Name: Yammer User ID</para>
        /// </summary>
        [AttributeLogicalName("yammeruserid")]
        [DisplayName("Yammer User ID")]
        [MaxLength(128)]
        public string YammerUserId {
            get {
                return GetAttributeValue<string>("yammeruserid");
            }
            set {
                SetAttributeValue("yammeruserid", value);
            }
        }
        
        /// <summary>
        /// <para>Pronunciation of the first name of the user, written in phonetic hiragana or katakana characters.</para>
        /// <para>Display Name: Yomi First Name</para>
        /// </summary>
        [AttributeLogicalName("yomifirstname")]
        [DisplayName("Yomi First Name")]
        [MaxLength(64)]
        public string YomiFirstName {
            get {
                return GetAttributeValue<string>("yomifirstname");
            }
            set {
                SetAttributeValue("yomifirstname", value);
            }
        }
        
        /// <summary>
        /// <para>Pronunciation of the full name of the user, written in phonetic hiragana or katakana characters.</para>
        /// <para>Display Name: Yomi Full Name</para>
        /// </summary>
        [AttributeLogicalName("yomifullname")]
        [DisplayName("Yomi Full Name")]
        [MaxLength(200)]
        public string YomiFullName {
            get {
                return GetAttributeValue<string>("yomifullname");
            }
        }
        
        /// <summary>
        /// <para>Pronunciation of the last name of the user, written in phonetic hiragana or katakana characters.</para>
        /// <para>Display Name: Yomi Last Name</para>
        /// </summary>
        [AttributeLogicalName("yomilastname")]
        [DisplayName("Yomi Last Name")]
        [MaxLength(64)]
        public string YomiLastName {
            get {
                return GetAttributeValue<string>("yomilastname");
            }
            set {
                SetAttributeValue("yomilastname", value);
            }
        }
        
        /// <summary>
        /// <para>Pronunciation of the middle name of the user, written in phonetic hiragana or katakana characters.</para>
        /// <para>Display Name: Yomi Middle Name</para>
        /// </summary>
        [AttributeLogicalName("yomimiddlename")]
        [DisplayName("Yomi Middle Name")]
        [MaxLength(50)]
        public string YomiMiddleName {
            get {
                return GetAttributeValue<string>("yomimiddlename");
            }
            set {
                SetAttributeValue("yomimiddlename", value);
            }
        }
        
        /// <summary>
        /// <para>Type of user - Application user or Bot application user</para>
        /// <para>Display Name: User type</para>
        /// </summary>
        [AttributeLogicalName("msdyn_agentType")]
        [DisplayName("User type")]
        public SystemUser_msdyn_AgentType? msdyn_AgentType {
            get {
                return GetOptionSetValue<SystemUser_msdyn_AgentType>("msdyn_agentType");
            }
            set {
                SetOptionSetValue("msdyn_agentType", value);
            }
        }
        
        /// <summary>
        /// <para>Application ID of the bot.</para>
        /// <para>Display Name: Bot application ID</para>
        /// </summary>
        [AttributeLogicalName("msdyn_botapplicationid")]
        [DisplayName("Bot application ID")]
        [MaxLength(100)]
        public string msdyn_BotApplicationId {
            get {
                return GetAttributeValue<string>("msdyn_botapplicationid");
            }
            set {
                SetAttributeValue("msdyn_botapplicationid", value);
            }
        }
        
        /// <summary>
        /// <para>BOT User Description</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("msdyn_botdescription")]
        [DisplayName("Description")]
        public string msdyn_BotDescription {
            get {
                return GetAttributeValue<string>("msdyn_botdescription");
            }
            set {
                SetAttributeValue("msdyn_botdescription", value);
            }
        }
        
        /// <summary>
        /// <para>Bot User Endpoint</para>
        /// <para>Display Name: Endpoint</para>
        /// </summary>
        [AttributeLogicalName("msdyn_botendpoint")]
        [DisplayName("Endpoint")]
        [MaxLength(100)]
        public string msdyn_BotEndpoint {
            get {
                return GetAttributeValue<string>("msdyn_botendpoint");
            }
            set {
                SetAttributeValue("msdyn_botendpoint", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates the type of bot</para>
        /// <para>Display Name: Bot Provider</para>
        /// </summary>
        [AttributeLogicalName("msdyn_botprovider")]
        [DisplayName("Bot Provider")]
        public SystemUser_msdyn_BotProvider? msdyn_BotProvider {
            get {
                return GetOptionSetValue<SystemUser_msdyn_BotProvider>("msdyn_botprovider");
            }
            set {
                SetOptionSetValue("msdyn_botprovider", value);
            }
        }
        
        /// <summary>
        /// <para>Bot User Secret Keys</para>
        /// <para>Display Name: Secret Keys</para>
        /// </summary>
        [AttributeLogicalName("msdyn_botsecretkeys")]
        [DisplayName("Secret Keys")]
        [MaxLength(100)]
        public string msdyn_BotSecretKeys {
            get {
                return GetAttributeValue<string>("msdyn_botsecretkeys");
            }
            set {
                SetAttributeValue("msdyn_botsecretkeys", value);
            }
        }
        
        /// <summary>
        /// <para>Capacity associated with the User.</para>
        /// <para>Display Name: Capacity</para>
        /// </summary>
        [AttributeLogicalName("msdyn_capacity")]
        [DisplayName("Capacity")]
        [Range(0, 2147483647)]
        public int? msdyn_Capacity {
            get {
                return GetAttributeValue<int?>("msdyn_capacity");
            }
            set {
                SetAttributeValue("msdyn_capacity", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for Presence associated with User.</para>
        /// <para>Display Name: Default Presence</para>
        /// </summary>
        [AttributeLogicalName("msdyn_defaultpresenceiduser")]
        [DisplayName("Default Presence")]
        public EntityReference msdyn_DefaultPresenceIdUser {
            get {
                return GetAttributeValue<EntityReference>("msdyn_defaultpresenceiduser");
            }
            set {
                SetAttributeValue("msdyn_defaultpresenceiduser", value);
            }
        }
        
        /// <summary>
        /// <para>Environment Id of the CDS environment that owns the bot user.</para>
        /// <para>Display Name: Owning Environment Id</para>
        /// </summary>
        [AttributeLogicalName("msdyn_owningenvironmentid")]
        [DisplayName("Owning Environment Id")]
        [MaxLength(500)]
        public string msdyn_OwningEnvironmentId {
            get {
                return GetAttributeValue<string>("msdyn_owningenvironmentid");
            }
            set {
                SetAttributeValue("msdyn_owningenvironmentid", value);
            }
        }
        
        /// <summary>
        /// <para>Type of user - CRM or BOT user</para>
        /// <para>Display Name: Type</para>
        /// </summary>
        [AttributeLogicalName("msdyn_usertype")]
        [DisplayName("Type")]
        public SystemUser_msdyn_UserType? msdyn_UserType {
            get {
                return GetOptionSetValue<SystemUser_msdyn_UserType>("msdyn_usertype");
            }
            set {
                SetOptionSetValue("msdyn_usertype", value);
            }
        }
        
        /// <summary>
        /// <para>Bot handle</para>
        /// <para>Display Name: Bot handle</para>
        /// </summary>
        [AttributeLogicalName("msdyn_bothandle")]
        [DisplayName("Bot handle")]
        [MaxLength(100)]
        public string msdyn_bothandle {
            get {
                return GetAttributeValue<string>("msdyn_bothandle");
            }
            set {
                SetAttributeValue("msdyn_bothandle", value);
            }
        }
        
        /// <summary>
        /// <para>Describes whether user is opted out or not</para>
        /// <para>Display Name: GDPR Optout</para>
        /// </summary>
        [AttributeLogicalName("msdyn_gdproptout")]
        [DisplayName("GDPR Optout")]
        public bool? msdyn_gdproptout {
            get {
                return GetAttributeValue<bool?>("msdyn_gdproptout");
            }
            set {
                SetAttributeValue("msdyn_gdproptout", value);
            }
        }
        
        /// <summary>
        /// <para>Field to bind grid wrapper control</para>
        /// <para>Display Name: Grid Wrapper Control field</para>
        /// </summary>
        [AttributeLogicalName("msdyn_gridwrappercontrolfield")]
        [DisplayName("Grid Wrapper Control field")]
        [MaxLength(4000)]
        public string msdyn_gridwrappercontrolfield {
            get {
                return GetAttributeValue<string>("msdyn_gridwrappercontrolfield");
            }
            set {
                SetAttributeValue("msdyn_gridwrappercontrolfield", value);
            }
        }
        
        /// <summary>
        /// <para>Check if swarm is enabled for the experts.</para>
        /// <para>Display Name: Expert Enabled Swarm</para>
        /// </summary>
        [AttributeLogicalName("msdyn_isexpertenabledforswarm")]
        [DisplayName("Expert Enabled Swarm")]
        public bool? msdyn_isexpertenabledforswarm {
            get {
                return GetAttributeValue<bool?>("msdyn_isexpertenabledforswarm");
            }
            set {
                SetAttributeValue("msdyn_isexpertenabledforswarm", value);
            }
        }
        
        [RelationshipSchemaName("lk_systemuser_createdonbehalfby", EntityRole.Referenced)]
        public IEnumerable<SystemUser> Referencedlk_systemuser_createdonbehalfby {
            get {
                return GetRelatedEntities<SystemUser>("lk_systemuser_createdonbehalfby", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("lk_systemuser_createdonbehalfby", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("lk_systemuser_modifiedonbehalfby", EntityRole.Referenced)]
        public IEnumerable<SystemUser> Referencedlk_systemuser_modifiedonbehalfby {
            get {
                return GetRelatedEntities<SystemUser>("lk_systemuser_modifiedonbehalfby", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("lk_systemuser_modifiedonbehalfby", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("lk_systemuserbase_createdby", EntityRole.Referenced)]
        public IEnumerable<SystemUser> Referencedlk_systemuserbase_createdby {
            get {
                return GetRelatedEntities<SystemUser>("lk_systemuserbase_createdby", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("lk_systemuserbase_createdby", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("lk_systemuserbase_modifiedby", EntityRole.Referenced)]
        public IEnumerable<SystemUser> Referencedlk_systemuserbase_modifiedby {
            get {
                return GetRelatedEntities<SystemUser>("lk_systemuserbase_modifiedby", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("lk_systemuserbase_modifiedby", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("user_parent_user", EntityRole.Referenced)]
        public IEnumerable<SystemUser> Referenceduser_parent_user {
            get {
                return GetRelatedEntities<SystemUser>("user_parent_user", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("user_parent_user", EntityRole.Referenced, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_systemuser_createdonbehalfby", EntityRole.Referencing)]
        public SystemUser Referencinglk_systemuser_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_systemuser_createdonbehalfby", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("lk_systemuser_createdonbehalfby", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_systemuser_modifiedonbehalfby", EntityRole.Referencing)]
        public SystemUser Referencinglk_systemuser_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_systemuser_modifiedonbehalfby", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("lk_systemuser_modifiedonbehalfby", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_systemuserbase_createdby", EntityRole.Referencing)]
        public SystemUser Referencinglk_systemuserbase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_systemuserbase_createdby", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("lk_systemuserbase_createdby", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_systemuserbase_modifiedby", EntityRole.Referencing)]
        public SystemUser Referencinglk_systemuserbase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_systemuserbase_modifiedby", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("lk_systemuserbase_modifiedby", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("parentsystemuserid")]
        [RelationshipSchemaName("user_parent_user", EntityRole.Referencing)]
        public SystemUser Referencinguser_parent_user {
            get {
                return GetRelatedEntity<SystemUser>("user_parent_user", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("user_parent_user", EntityRole.Referencing, value);
            }
        }
        
        [RelationshipSchemaName("SystemUser_DuplicateRules")]
        public IEnumerable<DuplicateRule> SystemUser_DuplicateRules {
            get {
                return GetRelatedEntities<DuplicateRule>("SystemUser_DuplicateRules", null);
            }
            set {
                SetRelatedEntities("SystemUser_DuplicateRules", null, value);
            }
        }
        
        [RelationshipSchemaName("annotation_owning_user")]
        public IEnumerable<Annotation> annotation_owning_user {
            get {
                return GetRelatedEntities<Annotation>("annotation_owning_user", null);
            }
            set {
                SetRelatedEntities("annotation_owning_user", null, value);
            }
        }
        
        [RelationshipSchemaName("contact_owning_user")]
        public IEnumerable<Contact> contact_owning_user {
            get {
                return GetRelatedEntities<Contact>("contact_owning_user", null);
            }
            set {
                SetRelatedEntities("contact_owning_user", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_accountbase_createdby")]
        public IEnumerable<Account> lk_accountbase_createdby {
            get {
                return GetRelatedEntities<Account>("lk_accountbase_createdby", null);
            }
            set {
                SetRelatedEntities("lk_accountbase_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_accountbase_createdonbehalfby")]
        public IEnumerable<Account> lk_accountbase_createdonbehalfby {
            get {
                return GetRelatedEntities<Account>("lk_accountbase_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_accountbase_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_accountbase_modifiedby")]
        public IEnumerable<Account> lk_accountbase_modifiedby {
            get {
                return GetRelatedEntities<Account>("lk_accountbase_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_accountbase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_accountbase_modifiedonbehalfby")]
        public IEnumerable<Account> lk_accountbase_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Account>("lk_accountbase_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_accountbase_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_annotationbase_createdby")]
        public IEnumerable<Annotation> lk_annotationbase_createdby {
            get {
                return GetRelatedEntities<Annotation>("lk_annotationbase_createdby", null);
            }
            set {
                SetRelatedEntities("lk_annotationbase_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_annotationbase_createdonbehalfby")]
        public IEnumerable<Annotation> lk_annotationbase_createdonbehalfby {
            get {
                return GetRelatedEntities<Annotation>("lk_annotationbase_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_annotationbase_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_annotationbase_modifiedby")]
        public IEnumerable<Annotation> lk_annotationbase_modifiedby {
            get {
                return GetRelatedEntities<Annotation>("lk_annotationbase_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_annotationbase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_annotationbase_modifiedonbehalfby")]
        public IEnumerable<Annotation> lk_annotationbase_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Annotation>("lk_annotationbase_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_annotationbase_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_appnotification_createdby")]
        public IEnumerable<appnotification> lk_appnotification_createdby {
            get {
                return GetRelatedEntities<appnotification>("lk_appnotification_createdby", null);
            }
            set {
                SetRelatedEntities("lk_appnotification_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_appnotification_createdonbehalfby")]
        public IEnumerable<appnotification> lk_appnotification_createdonbehalfby {
            get {
                return GetRelatedEntities<appnotification>("lk_appnotification_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_appnotification_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_appnotification_modifiedby")]
        public IEnumerable<appnotification> lk_appnotification_modifiedby {
            get {
                return GetRelatedEntities<appnotification>("lk_appnotification_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_appnotification_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_appnotification_modifiedonbehalfby")]
        public IEnumerable<appnotification> lk_appnotification_modifiedonbehalfby {
            get {
                return GetRelatedEntities<appnotification>("lk_appnotification_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_appnotification_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_contact_createdonbehalfby")]
        public IEnumerable<Contact> lk_contact_createdonbehalfby {
            get {
                return GetRelatedEntities<Contact>("lk_contact_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_contact_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_contact_modifiedonbehalfby")]
        public IEnumerable<Contact> lk_contact_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Contact>("lk_contact_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_contact_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_contactbase_createdby")]
        public IEnumerable<Contact> lk_contactbase_createdby {
            get {
                return GetRelatedEntities<Contact>("lk_contactbase_createdby", null);
            }
            set {
                SetRelatedEntities("lk_contactbase_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_contactbase_modifiedby")]
        public IEnumerable<Contact> lk_contactbase_modifiedby {
            get {
                return GetRelatedEntities<Contact>("lk_contactbase_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_contactbase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_duplicaterule_createdonbehalfby")]
        public IEnumerable<DuplicateRule> lk_duplicaterule_createdonbehalfby {
            get {
                return GetRelatedEntities<DuplicateRule>("lk_duplicaterule_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_duplicaterule_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_duplicaterule_modifiedonbehalfby")]
        public IEnumerable<DuplicateRule> lk_duplicaterule_modifiedonbehalfby {
            get {
                return GetRelatedEntities<DuplicateRule>("lk_duplicaterule_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_duplicaterule_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_duplicaterulebase_createdby")]
        public IEnumerable<DuplicateRule> lk_duplicaterulebase_createdby {
            get {
                return GetRelatedEntities<DuplicateRule>("lk_duplicaterulebase_createdby", null);
            }
            set {
                SetRelatedEntities("lk_duplicaterulebase_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_duplicaterulebase_modifiedby")]
        public IEnumerable<DuplicateRule> lk_duplicaterulebase_modifiedby {
            get {
                return GetRelatedEntities<DuplicateRule>("lk_duplicaterulebase_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_duplicaterulebase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_environmentvariabledefinition_createdby")]
        public IEnumerable<EnvironmentVariableDefinition> lk_environmentvariabledefinition_createdby {
            get {
                return GetRelatedEntities<EnvironmentVariableDefinition>("lk_environmentvariabledefinition_createdby", null);
            }
            set {
                SetRelatedEntities("lk_environmentvariabledefinition_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_environmentvariabledefinition_createdonbehalfby")]
        public IEnumerable<EnvironmentVariableDefinition> lk_environmentvariabledefinition_createdonbehalfby {
            get {
                return GetRelatedEntities<EnvironmentVariableDefinition>("lk_environmentvariabledefinition_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_environmentvariabledefinition_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_environmentvariabledefinition_modifiedby")]
        public IEnumerable<EnvironmentVariableDefinition> lk_environmentvariabledefinition_modifiedby {
            get {
                return GetRelatedEntities<EnvironmentVariableDefinition>("lk_environmentvariabledefinition_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_environmentvariabledefinition_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_environmentvariabledefinition_modifiedonbehalfby")]
        public IEnumerable<EnvironmentVariableDefinition> lk_environmentvariabledefinition_modifiedonbehalfby {
            get {
                return GetRelatedEntities<EnvironmentVariableDefinition>("lk_environmentvariabledefinition_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_environmentvariabledefinition_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_environmentvariablevalue_createdby")]
        public IEnumerable<EnvironmentVariableValue> lk_environmentvariablevalue_createdby {
            get {
                return GetRelatedEntities<EnvironmentVariableValue>("lk_environmentvariablevalue_createdby", null);
            }
            set {
                SetRelatedEntities("lk_environmentvariablevalue_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_environmentvariablevalue_createdonbehalfby")]
        public IEnumerable<EnvironmentVariableValue> lk_environmentvariablevalue_createdonbehalfby {
            get {
                return GetRelatedEntities<EnvironmentVariableValue>("lk_environmentvariablevalue_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_environmentvariablevalue_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_environmentvariablevalue_modifiedby")]
        public IEnumerable<EnvironmentVariableValue> lk_environmentvariablevalue_modifiedby {
            get {
                return GetRelatedEntities<EnvironmentVariableValue>("lk_environmentvariablevalue_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_environmentvariablevalue_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_environmentvariablevalue_modifiedonbehalfby")]
        public IEnumerable<EnvironmentVariableValue> lk_environmentvariablevalue_modifiedonbehalfby {
            get {
                return GetRelatedEntities<EnvironmentVariableValue>("lk_environmentvariablevalue_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_environmentvariablevalue_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_mgs_invoice_createdby")]
        public IEnumerable<mgs_Invoice> lk_mgs_invoice_createdby {
            get {
                return GetRelatedEntities<mgs_Invoice>("lk_mgs_invoice_createdby", null);
            }
            set {
                SetRelatedEntities("lk_mgs_invoice_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_mgs_invoice_createdonbehalfby")]
        public IEnumerable<mgs_Invoice> lk_mgs_invoice_createdonbehalfby {
            get {
                return GetRelatedEntities<mgs_Invoice>("lk_mgs_invoice_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_mgs_invoice_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_mgs_invoice_modifiedby")]
        public IEnumerable<mgs_Invoice> lk_mgs_invoice_modifiedby {
            get {
                return GetRelatedEntities<mgs_Invoice>("lk_mgs_invoice_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_mgs_invoice_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_mgs_invoice_modifiedonbehalfby")]
        public IEnumerable<mgs_Invoice> lk_mgs_invoice_modifiedonbehalfby {
            get {
                return GetRelatedEntities<mgs_Invoice>("lk_mgs_invoice_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_mgs_invoice_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_mgs_invoicecollection_createdby")]
        public IEnumerable<mgs_InvoiceCollection> lk_mgs_invoicecollection_createdby {
            get {
                return GetRelatedEntities<mgs_InvoiceCollection>("lk_mgs_invoicecollection_createdby", null);
            }
            set {
                SetRelatedEntities("lk_mgs_invoicecollection_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_mgs_invoicecollection_createdonbehalfby")]
        public IEnumerable<mgs_InvoiceCollection> lk_mgs_invoicecollection_createdonbehalfby {
            get {
                return GetRelatedEntities<mgs_InvoiceCollection>("lk_mgs_invoicecollection_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_mgs_invoicecollection_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_mgs_invoicecollection_modifiedby")]
        public IEnumerable<mgs_InvoiceCollection> lk_mgs_invoicecollection_modifiedby {
            get {
                return GetRelatedEntities<mgs_InvoiceCollection>("lk_mgs_invoicecollection_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_mgs_invoicecollection_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_mgs_invoicecollection_modifiedonbehalfby")]
        public IEnumerable<mgs_InvoiceCollection> lk_mgs_invoicecollection_modifiedonbehalfby {
            get {
                return GetRelatedEntities<mgs_InvoiceCollection>("lk_mgs_invoicecollection_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_mgs_invoicecollection_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_mgs_product_createdby")]
        public IEnumerable<mgs_Product> lk_mgs_product_createdby {
            get {
                return GetRelatedEntities<mgs_Product>("lk_mgs_product_createdby", null);
            }
            set {
                SetRelatedEntities("lk_mgs_product_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_mgs_product_createdonbehalfby")]
        public IEnumerable<mgs_Product> lk_mgs_product_createdonbehalfby {
            get {
                return GetRelatedEntities<mgs_Product>("lk_mgs_product_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_mgs_product_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_mgs_product_modifiedby")]
        public IEnumerable<mgs_Product> lk_mgs_product_modifiedby {
            get {
                return GetRelatedEntities<mgs_Product>("lk_mgs_product_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_mgs_product_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_mgs_product_modifiedonbehalfby")]
        public IEnumerable<mgs_Product> lk_mgs_product_modifiedonbehalfby {
            get {
                return GetRelatedEntities<mgs_Product>("lk_mgs_product_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_mgs_product_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_mgs_subscription_createdby")]
        public IEnumerable<mgs_Subscription> lk_mgs_subscription_createdby {
            get {
                return GetRelatedEntities<mgs_Subscription>("lk_mgs_subscription_createdby", null);
            }
            set {
                SetRelatedEntities("lk_mgs_subscription_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_mgs_subscription_createdonbehalfby")]
        public IEnumerable<mgs_Subscription> lk_mgs_subscription_createdonbehalfby {
            get {
                return GetRelatedEntities<mgs_Subscription>("lk_mgs_subscription_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_mgs_subscription_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_mgs_subscription_modifiedby")]
        public IEnumerable<mgs_Subscription> lk_mgs_subscription_modifiedby {
            get {
                return GetRelatedEntities<mgs_Subscription>("lk_mgs_subscription_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_mgs_subscription_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_mgs_subscription_modifiedonbehalfby")]
        public IEnumerable<mgs_Subscription> lk_mgs_subscription_modifiedonbehalfby {
            get {
                return GetRelatedEntities<mgs_Subscription>("lk_mgs_subscription_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_mgs_subscription_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_mgs_transaction_createdby")]
        public IEnumerable<mgs_Transaction> lk_mgs_transaction_createdby {
            get {
                return GetRelatedEntities<mgs_Transaction>("lk_mgs_transaction_createdby", null);
            }
            set {
                SetRelatedEntities("lk_mgs_transaction_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_mgs_transaction_createdonbehalfby")]
        public IEnumerable<mgs_Transaction> lk_mgs_transaction_createdonbehalfby {
            get {
                return GetRelatedEntities<mgs_Transaction>("lk_mgs_transaction_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_mgs_transaction_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_mgs_transaction_modifiedby")]
        public IEnumerable<mgs_Transaction> lk_mgs_transaction_modifiedby {
            get {
                return GetRelatedEntities<mgs_Transaction>("lk_mgs_transaction_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_mgs_transaction_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_mgs_transaction_modifiedonbehalfby")]
        public IEnumerable<mgs_Transaction> lk_mgs_transaction_modifiedonbehalfby {
            get {
                return GetRelatedEntities<mgs_Transaction>("lk_mgs_transaction_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_mgs_transaction_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_queue_createdonbehalfby")]
        public IEnumerable<Queue> lk_queue_createdonbehalfby {
            get {
                return GetRelatedEntities<Queue>("lk_queue_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_queue_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_queue_modifiedonbehalfby")]
        public IEnumerable<Queue> lk_queue_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Queue>("lk_queue_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_queue_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_queuebase_createdby")]
        public IEnumerable<Queue> lk_queuebase_createdby {
            get {
                return GetRelatedEntities<Queue>("lk_queuebase_createdby", null);
            }
            set {
                SetRelatedEntities("lk_queuebase_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_queuebase_modifiedby")]
        public IEnumerable<Queue> lk_queuebase_modifiedby {
            get {
                return GetRelatedEntities<Queue>("lk_queuebase_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_queuebase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_savedquery_createdonbehalfby")]
        public IEnumerable<SavedQuery> lk_savedquery_createdonbehalfby {
            get {
                return GetRelatedEntities<SavedQuery>("lk_savedquery_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_savedquery_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_savedquery_modifiedonbehalfby")]
        public IEnumerable<SavedQuery> lk_savedquery_modifiedonbehalfby {
            get {
                return GetRelatedEntities<SavedQuery>("lk_savedquery_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_savedquery_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_savedquerybase_createdby")]
        public IEnumerable<SavedQuery> lk_savedquerybase_createdby {
            get {
                return GetRelatedEntities<SavedQuery>("lk_savedquerybase_createdby", null);
            }
            set {
                SetRelatedEntities("lk_savedquerybase_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_savedquerybase_modifiedby")]
        public IEnumerable<SavedQuery> lk_savedquerybase_modifiedby {
            get {
                return GetRelatedEntities<SavedQuery>("lk_savedquerybase_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_savedquerybase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_task_createdby")]
        public IEnumerable<Task> lk_task_createdby {
            get {
                return GetRelatedEntities<Task>("lk_task_createdby", null);
            }
            set {
                SetRelatedEntities("lk_task_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_task_createdonbehalfby")]
        public IEnumerable<Task> lk_task_createdonbehalfby {
            get {
                return GetRelatedEntities<Task>("lk_task_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_task_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_task_modifiedby")]
        public IEnumerable<Task> lk_task_modifiedby {
            get {
                return GetRelatedEntities<Task>("lk_task_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_task_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_task_modifiedonbehalfby")]
        public IEnumerable<Task> lk_task_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Task>("lk_task_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_task_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_templatebase_createdby")]
        public IEnumerable<Template> lk_templatebase_createdby {
            get {
                return GetRelatedEntities<Template>("lk_templatebase_createdby", null);
            }
            set {
                SetRelatedEntities("lk_templatebase_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_templatebase_createdonbehalfby")]
        public IEnumerable<Template> lk_templatebase_createdonbehalfby {
            get {
                return GetRelatedEntities<Template>("lk_templatebase_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_templatebase_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_templatebase_modifiedby")]
        public IEnumerable<Template> lk_templatebase_modifiedby {
            get {
                return GetRelatedEntities<Template>("lk_templatebase_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_templatebase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_templatebase_modifiedonbehalfby")]
        public IEnumerable<Template> lk_templatebase_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Template>("lk_templatebase_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_templatebase_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("queue_primary_user")]
        public IEnumerable<Queue> queue_primary_user {
            get {
                return GetRelatedEntities<Queue>("queue_primary_user", null);
            }
            set {
                SetRelatedEntities("queue_primary_user", null, value);
            }
        }
        
        [AttributeLogicalName("queueid")]
        [RelationshipSchemaName("queue_system_user")]
        public Queue queue_system_user {
            get {
                return GetRelatedEntity<Queue>("queue_system_user", null);
            }
            set {
                SetRelatedEntity("queue_system_user", null, value);
            }
        }
        
        [RelationshipSchemaName("queuemembership_association")]
        public IEnumerable<Queue> queuemembership_association {
            get {
                return GetRelatedEntities<Queue>("queuemembership_association", null);
            }
            set {
                SetRelatedEntities("queuemembership_association", null, value);
            }
        }
        
        [RelationshipSchemaName("system_user_accounts")]
        public IEnumerable<Account> system_user_accounts {
            get {
                return GetRelatedEntities<Account>("system_user_accounts", null);
            }
            set {
                SetRelatedEntities("system_user_accounts", null, value);
            }
        }
        
        [RelationshipSchemaName("system_user_contacts")]
        public IEnumerable<Contact> system_user_contacts {
            get {
                return GetRelatedEntities<Contact>("system_user_contacts", null);
            }
            set {
                SetRelatedEntities("system_user_contacts", null, value);
            }
        }
        
        [RelationshipSchemaName("system_user_email_templates")]
        public IEnumerable<Template> system_user_email_templates {
            get {
                return GetRelatedEntities<Template>("system_user_email_templates", null);
            }
            set {
                SetRelatedEntities("system_user_email_templates", null, value);
            }
        }
        
        [RelationshipSchemaName("user_accounts")]
        public IEnumerable<Account> user_accounts {
            get {
                return GetRelatedEntities<Account>("user_accounts", null);
            }
            set {
                SetRelatedEntities("user_accounts", null, value);
            }
        }
        
        [RelationshipSchemaName("user_appnotification")]
        public IEnumerable<appnotification> user_appnotification {
            get {
                return GetRelatedEntities<appnotification>("user_appnotification", null);
            }
            set {
                SetRelatedEntities("user_appnotification", null, value);
            }
        }
        
        [RelationshipSchemaName("user_environmentvariabledefinition")]
        public IEnumerable<EnvironmentVariableDefinition> user_environmentvariabledefinition {
            get {
                return GetRelatedEntities<EnvironmentVariableDefinition>("user_environmentvariabledefinition", null);
            }
            set {
                SetRelatedEntities("user_environmentvariabledefinition", null, value);
            }
        }
        
        [RelationshipSchemaName("user_mgs_invoice")]
        public IEnumerable<mgs_Invoice> user_mgs_invoice {
            get {
                return GetRelatedEntities<mgs_Invoice>("user_mgs_invoice", null);
            }
            set {
                SetRelatedEntities("user_mgs_invoice", null, value);
            }
        }
        
        [RelationshipSchemaName("user_mgs_invoicecollection")]
        public IEnumerable<mgs_InvoiceCollection> user_mgs_invoicecollection {
            get {
                return GetRelatedEntities<mgs_InvoiceCollection>("user_mgs_invoicecollection", null);
            }
            set {
                SetRelatedEntities("user_mgs_invoicecollection", null, value);
            }
        }
        
        [RelationshipSchemaName("user_mgs_product")]
        public IEnumerable<mgs_Product> user_mgs_product {
            get {
                return GetRelatedEntities<mgs_Product>("user_mgs_product", null);
            }
            set {
                SetRelatedEntities("user_mgs_product", null, value);
            }
        }
        
        [RelationshipSchemaName("user_mgs_subscription")]
        public IEnumerable<mgs_Subscription> user_mgs_subscription {
            get {
                return GetRelatedEntities<mgs_Subscription>("user_mgs_subscription", null);
            }
            set {
                SetRelatedEntities("user_mgs_subscription", null, value);
            }
        }
        
        [RelationshipSchemaName("user_mgs_transaction")]
        public IEnumerable<mgs_Transaction> user_mgs_transaction {
            get {
                return GetRelatedEntities<mgs_Transaction>("user_mgs_transaction", null);
            }
            set {
                SetRelatedEntities("user_mgs_transaction", null, value);
            }
        }
        
        [RelationshipSchemaName("user_task")]
        public IEnumerable<Task> user_task {
            get {
                return GetRelatedEntities<Task>("user_task", null);
            }
            set {
                SetRelatedEntities("user_task", null, value);
            }
        }
        
        public static SystemUser Retrieve(IOrganizationService service, Guid id, params Expression<Func<SystemUser,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
        
        /// <summary>
        /// <para>Retrieves the record using the alternate key called 'AAD ObjectId'</para>
        /// </summary>
        public static SystemUser Retrieve_aadobjectid(IOrganizationService service, Guid AzureActiveDirectoryObjectId, params Expression<Func<SystemUser,object>>[] attrs) {
            KeyAttributeCollection keys = new KeyAttributeCollection();
            keys.Add("azureactivedirectoryobjectid", AzureActiveDirectoryObjectId);
            return Retrieve_AltKey(service, keys, attrs);
        }
        
        /// <summary>
        /// <para>Set values for the alternate key called 'AAD ObjectId'</para>
        /// </summary>
        public void AltKey_aadobjectid(Guid AzureActiveDirectoryObjectId) {
            KeyAttributes.Clear();
            KeyAttributes.Add("azureactivedirectoryobjectid", AzureActiveDirectoryObjectId);
        }
    }
    
    /// <summary>
    /// <para>Generic activity representing work needed to be done.</para>
    /// <para>Display Name: Task</para>
    /// </summary>
    [EntityLogicalName("task")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Task : ExtendedEntity<TaskState, Task_StatusCode> {
        
        public const string EntityLogicalName = "task";
        
        public const int EntityTypeCode = 4212;
        
        public Task() : 
                base(EntityLogicalName) {
        }
        
        public Task(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("subject");
            }
        }
        
        [AttributeLogicalName("activityid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the task.</para>
        /// <para>Display Name: Task</para>
        /// </summary>
        [AttributeLogicalName("activityid")]
        [DisplayName("Task")]
        public Guid? ActivityId {
            get {
                return GetAttributeValue<Guid?>("activityid");
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Additional Parameters</para>
        /// </summary>
        [AttributeLogicalName("activityadditionalparams")]
        [DisplayName("Additional Parameters")]
        public string ActivityAdditionalParams {
            get {
                return GetAttributeValue<string>("activityadditionalparams");
            }
            set {
                SetAttributeValue("activityadditionalparams", value);
            }
        }
        
        /// <summary>
        /// <para>Type of activity.</para>
        /// <para>Display Name: Activity Type</para>
        /// </summary>
        [AttributeLogicalName("activitytypecode")]
        [DisplayName("Activity Type")]
        public string ActivityTypeCode {
            get {
                return GetAttributeValue<string>("activitytypecode");
            }
        }
        
        /// <summary>
        /// <para>Type the number of minutes spent on the task. The duration is used in reporting.</para>
        /// <para>Display Name: Duration</para>
        /// </summary>
        [AttributeLogicalName("actualdurationminutes")]
        [DisplayName("Duration")]
        [Range(0, 2147483647)]
        public int? ActualDurationMinutes {
            get {
                return GetAttributeValue<int?>("actualdurationminutes");
            }
            set {
                SetAttributeValue("actualdurationminutes", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the actual end date and time of the task. By default, it displays when the activity was completed or canceled.</para>
        /// <para>Display Name: Actual End</para>
        /// </summary>
        [AttributeLogicalName("actualend")]
        [DisplayName("Actual End")]
        public DateTime? ActualEnd {
            get {
                return GetAttributeValue<DateTime?>("actualend");
            }
            set {
                SetAttributeValue("actualend", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the actual start date and time for the task. By default, it displays when the task was created.</para>
        /// <para>Display Name: Actual Start</para>
        /// </summary>
        [AttributeLogicalName("actualstart")]
        [DisplayName("Actual Start")]
        public DateTime? ActualStart {
            get {
                return GetAttributeValue<DateTime?>("actualstart");
            }
            set {
                SetAttributeValue("actualstart", value);
            }
        }
        
        /// <summary>
        /// <para>Type a category to identify the task type, such as lead gathering or customer follow up, to tie the task to a business group or function.</para>
        /// <para>Display Name: Category</para>
        /// </summary>
        [AttributeLogicalName("category")]
        [DisplayName("Category")]
        [MaxLength(250)]
        public string Category {
            get {
                return GetAttributeValue<string>("category");
            }
            set {
                SetAttributeValue("category", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        [DisplayName("Created By")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        [DisplayName("Created On")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        [DisplayName("Created By (Delegate)")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Assigned Task Unique Id</para>
        /// <para>Display Name: Assigned Task Unique Id</para>
        /// </summary>
        [AttributeLogicalName("crmtaskassigneduniqueid")]
        [DisplayName("Assigned Task Unique Id")]
        public Guid? CrmTaskAssignedUniqueId {
            get {
                return GetAttributeValue<Guid?>("crmtaskassigneduniqueid");
            }
            set {
                SetAttributeValue("crmtaskassigneduniqueid", value);
            }
        }
        
        /// <summary>
        /// <para>Type additional information to describe the task.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        [DisplayName("Description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        [DisplayName("Exchange Rate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        [DisplayName("Import Sequence Number")]
        [Range(-2147483648, 2147483647)]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Information which specifies whether the task was billed as part of resolving a case.</para>
        /// <para>Display Name: Is Billed</para>
        /// </summary>
        [AttributeLogicalName("isbilled")]
        [DisplayName("Is Billed")]
        public bool? IsBilled {
            get {
                return GetAttributeValue<bool?>("isbilled");
            }
            set {
                SetAttributeValue("isbilled", value);
            }
        }
        
        /// <summary>
        /// <para>Information regarding whether the activity is a regular activity type or event type.</para>
        /// <para>Display Name: Is Regular Activity</para>
        /// </summary>
        [AttributeLogicalName("isregularactivity")]
        [DisplayName("Is Regular Activity")]
        public bool? IsRegularActivity {
            get {
                return GetAttributeValue<bool?>("isregularactivity");
            }
        }
        
        /// <summary>
        /// <para>Information which specifies if the task was created from a workflow rule.</para>
        /// <para>Display Name: Is Workflow Created</para>
        /// </summary>
        [AttributeLogicalName("isworkflowcreated")]
        [DisplayName("Is Workflow Created")]
        public bool? IsWorkflowCreated {
            get {
                return GetAttributeValue<bool?>("isworkflowcreated");
            }
            set {
                SetAttributeValue("isworkflowcreated", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the date and time stamp of the last on hold time.</para>
        /// <para>Display Name: Last On Hold Time</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        [DisplayName("Last On Hold Time")]
        public DateTime? LastOnHoldTime {
            get {
                return GetAttributeValue<DateTime?>("lastonholdtime");
            }
            set {
                SetAttributeValue("lastonholdtime", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        [DisplayName("Modified By")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        [DisplayName("Modified On")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        [DisplayName("Modified By (Delegate)")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Shows how long, in minutes, that the record was on hold.</para>
        /// <para>Display Name: On Hold Time (Minutes)</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        [DisplayName("On Hold Time (Minutes)")]
        [Range(-2147483648, 2147483647)]
        public int? OnHoldTime {
            get {
                return GetAttributeValue<int?>("onholdtime");
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        [DisplayName("Record Created On")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        [DisplayName("Owner")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the record owner's business unit.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        [DisplayName("Owning Business Unit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team that owns the task.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        [DisplayName("Owning Team")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user that owns the task.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        [DisplayName("Owning User")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Type the percentage complete value for the task to track tasks to completion.</para>
        /// <para>Display Name: Percent Complete</para>
        /// </summary>
        [AttributeLogicalName("percentcomplete")]
        [DisplayName("Percent Complete")]
        [Range(0, 100)]
        public int? PercentComplete {
            get {
                return GetAttributeValue<int?>("percentcomplete");
            }
            set {
                SetAttributeValue("percentcomplete", value);
            }
        }
        
        /// <summary>
        /// <para>Type a short description about the objective or primary topic of the task.</para>
        /// <para>Display Name: Subject</para>
        /// </summary>
        [AttributeLogicalName("subject")]
        [DisplayName("Subject")]
        [MaxLength(200)]
        public string PrimaryNameField {
            get {
                return GetAttributeValue<string>("subject");
            }
            set {
                SetAttributeValue("subject", value);
            }
        }
        
        /// <summary>
        /// <para>Select the priority so that preferred customers or critical issues are handled quickly.</para>
        /// <para>Display Name: Priority</para>
        /// </summary>
        [AttributeLogicalName("prioritycode")]
        [DisplayName("Priority")]
        public Task_PriorityCode? PriorityCode {
            get {
                return GetOptionSetValue<Task_PriorityCode>("prioritycode");
            }
            set {
                SetOptionSetValue("prioritycode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        [DisplayName("Process")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the record that the task relates to.</para>
        /// <para>Display Name: Regarding</para>
        /// </summary>
        [AttributeLogicalName("regardingobjectid")]
        [DisplayName("Regarding")]
        public EntityReference RegardingObjectId {
            get {
                return GetAttributeValue<EntityReference>("regardingobjectid");
            }
            set {
                SetAttributeValue("regardingobjectid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the service level agreement (SLA) that you want to apply to the Task record.</para>
        /// <para>Display Name: SLA</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        [DisplayName("SLA")]
        public EntityReference SLAId {
            get {
                return GetAttributeValue<EntityReference>("slaid");
            }
            set {
                SetAttributeValue("slaid", value);
            }
        }
        
        /// <summary>
        /// <para>Last SLA that was applied to this Task. This field is for internal use only.</para>
        /// <para>Display Name: Last SLA applied</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        [DisplayName("Last SLA applied")]
        public EntityReference SLAInvokedId {
            get {
                return GetAttributeValue<EntityReference>("slainvokedid");
            }
        }
        
        /// <summary>
        /// <para>Scheduled duration of the task, specified in minutes.</para>
        /// <para>Display Name: Scheduled Duration</para>
        /// </summary>
        [AttributeLogicalName("scheduleddurationminutes")]
        [DisplayName("Scheduled Duration")]
        [Range(0, 2147483647)]
        public int? ScheduledDurationMinutes {
            get {
                return GetAttributeValue<int?>("scheduleddurationminutes");
            }
        }
        
        /// <summary>
        /// <para>Enter the expected due date and time.</para>
        /// <para>Display Name: Due Date</para>
        /// </summary>
        [AttributeLogicalName("scheduledend")]
        [DisplayName("Due Date")]
        public DateTime? ScheduledEnd {
            get {
                return GetAttributeValue<DateTime?>("scheduledend");
            }
            set {
                SetAttributeValue("scheduledend", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the expected due date and time.</para>
        /// <para>Display Name: Start Date</para>
        /// </summary>
        [AttributeLogicalName("scheduledstart")]
        [DisplayName("Start Date")]
        public DateTime? ScheduledStart {
            get {
                return GetAttributeValue<DateTime?>("scheduledstart");
            }
            set {
                SetAttributeValue("scheduledstart", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the service that is associated with this activity.</para>
        /// <para>Display Name: Service</para>
        /// </summary>
        [AttributeLogicalName("serviceid")]
        [DisplayName("Service")]
        public EntityReference ServiceId {
            get {
                return GetAttributeValue<EntityReference>("serviceid");
            }
            set {
                SetAttributeValue("serviceid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time by which the activities are sorted.</para>
        /// <para>Display Name: Sort Date</para>
        /// </summary>
        [AttributeLogicalName("sortdate")]
        [DisplayName("Sort Date")]
        public DateTime? SortDate {
            get {
                return GetAttributeValue<DateTime?>("sortdate");
            }
            set {
                SetAttributeValue("sortdate", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Display Name: (Deprecated) Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        [DisplayName("(Deprecated) Process Stage")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the task is open, completed, or canceled. Completed and canceled tasks are read-only and can't be edited.</para>
        /// <para>Display Name: Activity Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        [DisplayName("Activity Status")]
        public TaskState? StateCode {
            get {
                return GetOptionSetValue<TaskState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the task's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        [DisplayName("Status Reason")]
        public Task_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<Task_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Type a subcategory to identify the task type and relate the activity to a specific product, sales region, business group, or other function.</para>
        /// <para>Display Name: Sub-Category</para>
        /// </summary>
        [AttributeLogicalName("subcategory")]
        [DisplayName("Sub-Category")]
        [MaxLength(250)]
        public string Subcategory {
            get {
                return GetAttributeValue<string>("subcategory");
            }
            set {
                SetAttributeValue("subcategory", value);
            }
        }
        
        /// <summary>
        /// <para>Type a short description about the objective or primary topic of the task.</para>
        /// <para>Display Name: Subject</para>
        /// </summary>
        [AttributeLogicalName("subject")]
        [DisplayName("Subject")]
        [MaxLength(200)]
        public string Subject {
            get {
                return GetAttributeValue<string>("subject");
            }
            set {
                SetAttributeValue("subject", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Subscription</para>
        /// </summary>
        [AttributeLogicalName("subscriptionid")]
        [DisplayName("Subscription")]
        public Guid? SubscriptionId {
            get {
                return GetAttributeValue<Guid?>("subscriptionid");
            }
            set {
                SetAttributeValue("subscriptionid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        [DisplayName("Time Zone Rule Version Number")]
        [Range(-1, 2147483647)]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        [DisplayName("Currency")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: (Deprecated) Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        [DisplayName("(Deprecated) Traversed Path")]
        [MaxLength(1250)]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        [DisplayName("UTC Conversion Time Zone Code")]
        [Range(-1, 2147483647)]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Version number of the task.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        [DisplayName("Version Number")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Account_Tasks")]
        public Account Account_Tasks {
            get {
                return GetRelatedEntity<Account>("Account_Tasks", null);
            }
            set {
                SetRelatedEntity("Account_Tasks", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Contact_Tasks")]
        public Contact Contact_Tasks {
            get {
                return GetRelatedEntity<Contact>("Contact_Tasks", null);
            }
            set {
                SetRelatedEntity("Contact_Tasks", null, value);
            }
        }
        
        [RelationshipSchemaName("Task_Annotation")]
        public IEnumerable<Annotation> Task_Annotation {
            get {
                return GetRelatedEntities<Annotation>("Task_Annotation", null);
            }
            set {
                SetRelatedEntities("Task_Annotation", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_task_createdby")]
        public SystemUser lk_task_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_task_createdby", null);
            }
            set {
                SetRelatedEntity("lk_task_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_task_createdonbehalfby")]
        public SystemUser lk_task_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_task_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_task_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_task_modifiedby")]
        public SystemUser lk_task_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_task_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_task_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_task_modifiedonbehalfby")]
        public SystemUser lk_task_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_task_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_task_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_task")]
        public SystemUser user_task {
            get {
                return GetRelatedEntity<SystemUser>("user_task", null);
            }
            set {
                SetRelatedEntity("user_task", null, value);
            }
        }
        
        public static Task Retrieve(IOrganizationService service, Guid id, params Expression<Func<Task,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Template for an email message that contains the standard attributes of an email message.</para>
    /// <para>Display Name: Email Template</para>
    /// </summary>
    [EntityLogicalName("template")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Template : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "template";
        
        public const int EntityTypeCode = 2010;
        
        public Template() : 
                base(EntityLogicalName) {
        }
        
        public Template(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("title");
            }
        }
        
        [AttributeLogicalName("templateid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("templateid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the template.</para>
        /// <para>Display Name: Email Template</para>
        /// </summary>
        [AttributeLogicalName("templateid")]
        [DisplayName("Email Template")]
        public Guid? TemplateId {
            get {
                return GetAttributeValue<Guid?>("templateid");
            }
            set {
                SetId("templateid", value);
            }
        }
        
        /// <summary>
        /// <para>Body text of the email template.</para>
        /// <para>Display Name: Body</para>
        /// </summary>
        [AttributeLogicalName("body")]
        [DisplayName("Body")]
        public string Body {
            get {
                return GetAttributeValue<string>("body");
            }
            set {
                SetAttributeValue("body", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Component State</para>
        /// </summary>
        [AttributeLogicalName("componentstate")]
        [DisplayName("Component State")]
        public componentstate? ComponentState {
            get {
                return GetOptionSetValue<componentstate>("componentstate");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the email template.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        [DisplayName("Created By")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the email template was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        [DisplayName("Created On")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the template.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        [DisplayName("Created By (Delegate)")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Description of the email template.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        [DisplayName("Description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        [AttributeLogicalName("entityimageid")]
        public Guid? EntityImageId {
            get {
                return GetAttributeValue<Guid?>("entityimageid");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Generation Type Code</para>
        /// </summary>
        [AttributeLogicalName("generationtypecode")]
        [DisplayName("Generation Type Code")]
        [Range(0, 2147483647)]
        public int? GenerationTypeCode {
            get {
                return GetAttributeValue<int?>("generationtypecode");
            }
            set {
                SetAttributeValue("generationtypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        [DisplayName("Import Sequence Number")]
        [Range(-2147483648, 2147483647)]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Version in which the form is introduced.</para>
        /// <para>Display Name: Introduced Version</para>
        /// </summary>
        [AttributeLogicalName("introducedversion")]
        [DisplayName("Introduced Version")]
        [MaxLength(48)]
        public string IntroducedVersion {
            get {
                return GetAttributeValue<string>("introducedversion");
            }
            set {
                SetAttributeValue("introducedversion", value);
            }
        }
        
        /// <summary>
        /// <para>Information that specifies whether this component can be customized.</para>
        /// <para>Display Name: Customizable</para>
        /// </summary>
        [AttributeLogicalName("iscustomizable")]
        [DisplayName("Customizable")]
        public BooleanManagedProperty IsCustomizable {
            get {
                return GetAttributeValue<BooleanManagedProperty>("iscustomizable");
            }
            set {
                SetAttributeValue("iscustomizable", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the solution component is part of a managed solution.</para>
        /// <para>Display Name: Is Managed</para>
        /// </summary>
        [AttributeLogicalName("ismanaged")]
        [DisplayName("Is Managed")]
        public bool? IsManaged {
            get {
                return GetAttributeValue<bool?>("ismanaged");
            }
        }
        
        /// <summary>
        /// <para>Information about whether the template is personal or is available to all users.</para>
        /// <para>Display Name: Viewable By</para>
        /// </summary>
        [AttributeLogicalName("ispersonal")]
        [DisplayName("Viewable By")]
        public bool? IsPersonal {
            get {
                return GetAttributeValue<bool?>("ispersonal");
            }
            set {
                SetAttributeValue("ispersonal", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates if a template is recommended by Dynamics 365.</para>
        /// <para>Display Name: Recommended</para>
        /// </summary>
        [AttributeLogicalName("isrecommended")]
        [DisplayName("Recommended")]
        public bool? IsRecommended {
            get {
                return GetAttributeValue<bool?>("isrecommended");
            }
        }
        
        /// <summary>
        /// <para>Language of the email template.</para>
        /// <para>Display Name: Language</para>
        /// </summary>
        [AttributeLogicalName("languagecode")]
        [DisplayName("Language")]
        [Range(0, 2147483647)]
        public int? LanguageCode {
            get {
                return GetAttributeValue<int?>("languagecode");
            }
            set {
                SetAttributeValue("languagecode", value);
            }
        }
        
        /// <summary>
        /// <para>MIME type of the email template.</para>
        /// <para>Display Name: Mime Type</para>
        /// </summary>
        [AttributeLogicalName("mimetype")]
        [DisplayName("Mime Type")]
        [MaxLength(256)]
        public string MimeType {
            get {
                return GetAttributeValue<string>("mimetype");
            }
            set {
                SetAttributeValue("mimetype", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who last modified the template.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        [DisplayName("Modified By")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the email template was last modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        [DisplayName("Modified On")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who last modified the template.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        [DisplayName("Modified By (Delegate)")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>For internal use only. Shows the number of times emails that use this template have been opened.</para>
        /// <para>Display Name: Open Count</para>
        /// </summary>
        [AttributeLogicalName("opencount")]
        [DisplayName("Open Count")]
        [Range(0, 2147483647)]
        public int? OpenCount {
            get {
                return GetAttributeValue<int?>("opencount");
            }
        }
        
        /// <summary>
        /// <para>Shows the open rate of this template. This is based on number of opens on followed emails that use this template.</para>
        /// <para>Display Name: Open Rate</para>
        /// </summary>
        [AttributeLogicalName("openrate")]
        [DisplayName("Open Rate")]
        [Range(0, 2147483647)]
        public int? OpenRate {
            get {
                return GetAttributeValue<int?>("openrate");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Record Overwrite Time</para>
        /// </summary>
        [AttributeLogicalName("overwritetime")]
        [DisplayName("Record Overwrite Time")]
        public DateTime? OverwriteTime {
            get {
                return GetAttributeValue<DateTime?>("overwritetime");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the template for the email activity.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        [DisplayName("Owner")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit that owns the template.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        [DisplayName("Owning Business Unit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team who owns the template.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        [DisplayName("Owning Team")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who owns the template.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        [DisplayName("Owning User")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>XML data for the body of the email template.</para>
        /// <para>Display Name: Presentation XML</para>
        /// </summary>
        [AttributeLogicalName("presentationxml")]
        [DisplayName("Presentation XML")]
        public string PresentationXml {
            get {
                return GetAttributeValue<string>("presentationxml");
            }
            set {
                SetAttributeValue("presentationxml", value);
            }
        }
        
        /// <summary>
        /// <para>Title of the template.</para>
        /// <para>Display Name: Title</para>
        /// </summary>
        [AttributeLogicalName("title")]
        [DisplayName("Title")]
        [MaxLength(200)]
        public string PrimaryNameField {
            get {
                return GetAttributeValue<string>("title");
            }
            set {
                SetAttributeValue("title", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only. Shows the number of times emails that use this template have received replies.</para>
        /// <para>Display Name: Reply Count</para>
        /// </summary>
        [AttributeLogicalName("replycount")]
        [DisplayName("Reply Count")]
        [Range(0, 2147483647)]
        public int? ReplyCount {
            get {
                return GetAttributeValue<int?>("replycount");
            }
        }
        
        /// <summary>
        /// <para>Shows the reply rate for this template. This is based on number of replies received on followed emails that use this template.</para>
        /// <para>Display Name: Reply Rate</para>
        /// </summary>
        [AttributeLogicalName("replyrate")]
        [DisplayName("Reply Rate")]
        [Range(0, 2147483647)]
        public int? ReplyRate {
            get {
                return GetAttributeValue<int?>("replyrate");
            }
        }
        
        /// <summary>
        /// <para>Safe html of email template.</para>
        /// <para>Display Name: Safe HTML of email template</para>
        /// </summary>
        [AttributeLogicalName("safehtml")]
        [DisplayName("Safe HTML of email template")]
        public string SafeHtml {
            get {
                return GetAttributeValue<string>("safehtml");
            }
            set {
                SetAttributeValue("safehtml", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the associated solution.</para>
        /// <para>Display Name: Solution</para>
        /// </summary>
        [AttributeLogicalName("solutionid")]
        [DisplayName("Solution")]
        public Guid? SolutionId {
            get {
                return GetAttributeValue<Guid?>("solutionid");
            }
        }
        
        /// <summary>
        /// <para>Subject associated with the email template.</para>
        /// <para>Display Name: Subject</para>
        /// </summary>
        [AttributeLogicalName("subject")]
        [DisplayName("Subject")]
        public string Subject {
            get {
                return GetAttributeValue<string>("subject");
            }
            set {
                SetAttributeValue("subject", value);
            }
        }
        
        /// <summary>
        /// <para>XML data for the subject of the email template.</para>
        /// <para>Display Name: Subject XML</para>
        /// </summary>
        [AttributeLogicalName("subjectpresentationxml")]
        [DisplayName("Subject XML")]
        public string SubjectPresentationXml {
            get {
                return GetAttributeValue<string>("subjectpresentationxml");
            }
            set {
                SetAttributeValue("subjectpresentationxml", value);
            }
        }
        
        /// <summary>
        /// <para>Safe html of email template subject.</para>
        /// <para>Display Name: Safe HTML of email template subject</para>
        /// </summary>
        [AttributeLogicalName("subjectsafehtml")]
        [DisplayName("Safe HTML of email template subject")]
        public string SubjectSafeHtml {
            get {
                return GetAttributeValue<string>("subjectsafehtml");
            }
            set {
                SetAttributeValue("subjectsafehtml", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// </summary>
        [AttributeLogicalName("templateidunique")]
        public Guid? TemplateIdUnique {
            get {
                return GetAttributeValue<Guid?>("templateidunique");
            }
        }
        
        /// <summary>
        /// <para>Type of email template.</para>
        /// <para>Display Name: Template Type</para>
        /// </summary>
        [AttributeLogicalName("templatetypecode")]
        [DisplayName("Template Type")]
        public string TemplateTypeCode {
            get {
                return GetAttributeValue<string>("templatetypecode");
            }
            set {
                SetAttributeValue("templatetypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Title of the template.</para>
        /// <para>Display Name: Title</para>
        /// </summary>
        [AttributeLogicalName("title")]
        [DisplayName("Title")]
        [MaxLength(200)]
        public string Title {
            get {
                return GetAttributeValue<string>("title");
            }
            set {
                SetAttributeValue("title", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the number of sent emails that use this template.</para>
        /// <para>Display Name: Sent email count</para>
        /// </summary>
        [AttributeLogicalName("usedcount")]
        [DisplayName("Sent email count")]
        [Range(0, 2147483647)]
        public int? UsedCount {
            get {
                return GetAttributeValue<int?>("usedcount");
            }
        }
        
        /// <summary>
        /// <para>Version number of the template.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        [DisplayName("Version Number")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Display Name: field</para>
        /// </summary>
        [AttributeLogicalName("enhancededitorhtml")]
        [DisplayName("field")]
        public string enhancededitorhtml {
            get {
                return GetAttributeValue<string>("enhancededitorhtml");
            }
            set {
                SetAttributeValue("enhancededitorhtml", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: isenhancededitorenabled</para>
        /// </summary>
        [AttributeLogicalName("isenhancededitorenabled")]
        [DisplayName("isenhancededitorenabled")]
        public bool? isenhancededitorenabled {
            get {
                return GetAttributeValue<bool?>("isenhancededitorenabled");
            }
            set {
                SetAttributeValue("isenhancededitorenabled", value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_templatebase_createdby")]
        public SystemUser lk_templatebase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_templatebase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_templatebase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_templatebase_createdonbehalfby")]
        public SystemUser lk_templatebase_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_templatebase_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_templatebase_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_templatebase_modifiedby")]
        public SystemUser lk_templatebase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_templatebase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_templatebase_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_templatebase_modifiedonbehalfby")]
        public SystemUser lk_templatebase_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_templatebase_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_templatebase_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("system_user_email_templates")]
        public SystemUser system_user_email_templates {
            get {
                return GetRelatedEntity<SystemUser>("system_user_email_templates", null);
            }
            set {
                SetRelatedEntity("system_user_email_templates", null, value);
            }
        }
        
        public static Template Retrieve(IOrganizationService service, Guid id, params Expression<Func<Template,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Notification to be provided to a user.</para>
    /// <para>Display Name: Notification</para>
    /// </summary>
    [EntityLogicalName("appnotification")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class appnotification : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "appnotification";
        
        public const int EntityTypeCode = 10258;
        
        public appnotification() : 
                base(EntityLogicalName) {
        }
        
        public appnotification(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("title");
            }
        }
        
        [AttributeLogicalName("appnotificationid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("appnotificationid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for entity instances</para>
        /// <para>Display Name: Notification</para>
        /// </summary>
        [AttributeLogicalName("appnotificationid")]
        [DisplayName("Notification")]
        public Guid? appnotificationId {
            get {
                return GetAttributeValue<Guid?>("appnotificationid");
            }
            set {
                SetId("appnotificationid", value);
            }
        }
        
        /// <summary>
        /// <para>This field is not used</para>
        /// <para>Display Name: Model-driven app</para>
        /// </summary>
        [AttributeLogicalName("appmoduleid")]
        [DisplayName("Model-driven app")]
        public EntityReference AppModuleId {
            get {
                return GetAttributeValue<EntityReference>("appmoduleid");
            }
            set {
                SetAttributeValue("appmoduleid", value);
            }
        }
        
        /// <summary>
        /// <para>Body of the notification</para>
        /// <para>Display Name: Body</para>
        /// </summary>
        [AttributeLogicalName("body")]
        [DisplayName("Body")]
        [MaxLength(500)]
        public string Body {
            get {
                return GetAttributeValue<string>("body");
            }
            set {
                SetAttributeValue("body", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        [DisplayName("Created By")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        [DisplayName("Created On")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        [DisplayName("Created By (Delegate)")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Custom data for the notification that can be used by the notification card</para>
        /// <para>Display Name: Data</para>
        /// </summary>
        [AttributeLogicalName("data")]
        [DisplayName("Data")]
        public string Data {
            get {
                return GetAttributeValue<string>("data");
            }
            set {
                SetAttributeValue("data", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: IconType</para>
        /// </summary>
        [AttributeLogicalName("icontype")]
        [DisplayName("IconType")]
        public appnotification_IconType? IconType {
            get {
                return GetOptionSetValue<appnotification_IconType>("icontype");
            }
            set {
                SetOptionSetValue("icontype", value);
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        [DisplayName("Import Sequence Number")]
        [Range(-2147483648, 2147483647)]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        [DisplayName("Modified By")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        [DisplayName("Modified On")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        [DisplayName("Modified By (Delegate)")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        [DisplayName("Record Created On")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Owner Id</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        [DisplayName("Owner")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        [DisplayName("Owning Business Unit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        [DisplayName("Owning Team")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        [DisplayName("Owning User")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Partitioning will be based on owner and it is recommended to specify this field for all operations for performance reason</para>
        /// <para>Display Name: Partition Id</para>
        /// </summary>
        [AttributeLogicalName("partitionid")]
        [DisplayName("Partition Id")]
        [MaxLength(100)]
        public string PartitionId {
            get {
                return GetAttributeValue<string>("partitionid");
            }
            set {
                SetAttributeValue("partitionid", value);
            }
        }
        
        /// <summary>
        /// <para>Title for the notification</para>
        /// <para>Display Name: Title</para>
        /// </summary>
        [AttributeLogicalName("title")]
        [DisplayName("Title")]
        [MaxLength(256)]
        public string PrimaryNameField {
            get {
                return GetAttributeValue<string>("title");
            }
            set {
                SetAttributeValue("title", value);
            }
        }
        
        /// <summary>
        /// <para>Priority of the notification</para>
        /// <para>Display Name: Priority</para>
        /// </summary>
        [AttributeLogicalName("priority")]
        [DisplayName("Priority")]
        public appnotification_Priority? Priority {
            get {
                return GetOptionSetValue<appnotification_Priority>("priority");
            }
            set {
                SetOptionSetValue("priority", value);
            }
        }
        
        /// <summary>
        /// <para>After the specified number of seconds the notification will be deleted</para>
        /// <para>Display Name: Expiry (seconds)</para>
        /// </summary>
        [AttributeLogicalName("ttlinseconds")]
        [DisplayName("Expiry (seconds)")]
        [Range(1, 2147483647)]
        public int? TTLInSeconds {
            get {
                return GetAttributeValue<int?>("ttlinseconds");
            }
            set {
                SetAttributeValue("ttlinseconds", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        [DisplayName("Time Zone Rule Version Number")]
        [Range(-1, 2147483647)]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Title for the notification</para>
        /// <para>Display Name: Title</para>
        /// </summary>
        [AttributeLogicalName("title")]
        [DisplayName("Title")]
        [MaxLength(256)]
        public string Title {
            get {
                return GetAttributeValue<string>("title");
            }
            set {
                SetAttributeValue("title", value);
            }
        }
        
        /// <summary>
        /// <para>Type of toast behavior for the notification</para>
        /// <para>Display Name: Toast Type</para>
        /// </summary>
        [AttributeLogicalName("toasttype")]
        [DisplayName("Toast Type")]
        public appnotification_ToastType? ToastType {
            get {
                return GetOptionSetValue<appnotification_ToastType>("toasttype");
            }
            set {
                SetOptionSetValue("toasttype", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        [DisplayName("UTC Conversion Time Zone Code")]
        [Range(-1, 2147483647)]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Version Number</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        [DisplayName("Version Number")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_appnotification_createdby")]
        public SystemUser lk_appnotification_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_appnotification_createdby", null);
            }
            set {
                SetRelatedEntity("lk_appnotification_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_appnotification_createdonbehalfby")]
        public SystemUser lk_appnotification_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_appnotification_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_appnotification_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_appnotification_modifiedby")]
        public SystemUser lk_appnotification_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_appnotification_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_appnotification_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_appnotification_modifiedonbehalfby")]
        public SystemUser lk_appnotification_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_appnotification_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_appnotification_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_appnotification")]
        public SystemUser user_appnotification {
            get {
                return GetRelatedEntity<SystemUser>("user_appnotification", null);
            }
            set {
                SetRelatedEntity("user_appnotification", null, value);
            }
        }
        
        public static appnotification Retrieve(IOrganizationService service, Guid id, params Expression<Func<appnotification,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
        
        /// <summary>
        /// <para>Retrieves the record using the alternate key called 'Entity key for NoSql Entity that contains PrimaryKey and PartitionId attributes'</para>
        /// </summary>
        public static appnotification Retrieve_KeyForNoSqlEntityWithPKPartitionId(IOrganizationService service, Guid appnotificationId, string PartitionId, params Expression<Func<appnotification,object>>[] attrs) {
            KeyAttributeCollection keys = new KeyAttributeCollection();
            keys.Add("appnotificationid", appnotificationId);
            keys.Add("partitionid", PartitionId);
            return Retrieve_AltKey(service, keys, attrs);
        }
        
        /// <summary>
        /// <para>Set values for the alternate key called 'Entity key for NoSql Entity that contains PrimaryKey and PartitionId attributes'</para>
        /// </summary>
        public void AltKey_KeyForNoSqlEntityWithPKPartitionId(Guid appnotificationId, string PartitionId) {
            KeyAttributes.Clear();
            KeyAttributes.Add("appnotificationid", appnotificationId);
            KeyAttributes.Add("partitionid", PartitionId);
        }
    }
    
    /// <summary>
    /// <para>This table contains records of invoice information</para>
    /// <para>Display Name: Invoice</para>
    /// </summary>
    [EntityLogicalName("mgs_invoice")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class mgs_Invoice : ExtendedEntity<mgs_InvoiceState, mgs_Invoice_statuscode> {
        
        public const string EntityLogicalName = "mgs_invoice";
        
        public const int EntityTypeCode = 11144;
        
        public mgs_Invoice() : 
                base(EntityLogicalName) {
        }
        
        public mgs_Invoice(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("mgs_invoice1");
            }
        }
        
        [AttributeLogicalName("mgs_invoiceid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("mgs_invoiceid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for entity instances</para>
        /// <para>Display Name: Invoice</para>
        /// </summary>
        [AttributeLogicalName("mgs_invoiceid")]
        [DisplayName("Invoice")]
        public Guid? mgs_InvoiceId {
            get {
                return GetAttributeValue<Guid?>("mgs_invoiceid");
            }
            set {
                SetId("mgs_invoiceid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        [DisplayName("Created By")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        [DisplayName("Created On")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        [DisplayName("Created By (Delegate)")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the entity with respect to the base currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        [DisplayName("Exchange Rate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        [DisplayName("Import Sequence Number")]
        [Range(-2147483648, 2147483647)]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        [DisplayName("Modified By")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        [DisplayName("Modified On")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        [DisplayName("Modified By (Delegate)")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        [DisplayName("Record Created On")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Owner Id</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        [DisplayName("Owner")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        [DisplayName("Owning Business Unit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        [DisplayName("Owning Team")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        [DisplayName("Owning User")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Invoice</para>
        /// </summary>
        [AttributeLogicalName("mgs_invoice1")]
        [DisplayName("Invoice")]
        [MaxLength(850)]
        public string PrimaryNameField {
            get {
                return GetAttributeValue<string>("mgs_invoice1");
            }
            set {
                SetAttributeValue("mgs_invoice1", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        [DisplayName("Time Zone Rule Version Number")]
        [Range(-1, 2147483647)]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the currency associated with the entity.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        [DisplayName("Currency")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        [DisplayName("UTC Conversion Time Zone Code")]
        [Range(-1, 2147483647)]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Version Number</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        [DisplayName("Version Number")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Contact</para>
        /// </summary>
        [AttributeLogicalName("mgs_contact")]
        [DisplayName("Contact")]
        public EntityReference mgs_Contact {
            get {
                return GetAttributeValue<EntityReference>("mgs_contact");
            }
            set {
                SetAttributeValue("mgs_contact", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Invoice</para>
        /// </summary>
        [AttributeLogicalName("mgs_invoice1")]
        [DisplayName("Invoice")]
        [MaxLength(850)]
        public string mgs_Invoice1 {
            get {
                return GetAttributeValue<string>("mgs_invoice1");
            }
            set {
                SetAttributeValue("mgs_invoice1", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Invoice Collection</para>
        /// </summary>
        [AttributeLogicalName("mgs_invoicecollection")]
        [DisplayName("Invoice Collection")]
        public EntityReference mgs_InvoiceCollection {
            get {
                return GetAttributeValue<EntityReference>("mgs_invoicecollection");
            }
            set {
                SetAttributeValue("mgs_invoicecollection", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Invoice Date</para>
        /// </summary>
        [AttributeLogicalName("mgs_invoicedate")]
        [DisplayName("Invoice Date")]
        public DateTime? mgs_InvoiceDate {
            get {
                return GetAttributeValue<DateTime?>("mgs_invoicedate");
            }
            set {
                SetAttributeValue("mgs_invoicedate", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Total Amount</para>
        /// </summary>
        [AttributeLogicalName("mgs_totalamount")]
        [DisplayName("Total Amount")]
        public decimal? mgs_TotalAmount {
            get {
                return GetMoneyValue("mgs_totalamount");
            }
            set {
                SetMoneyValue("mgs_totalamount", value);
            }
        }
        
        /// <summary>
        /// <para>Value of the Total Amount in base currency.</para>
        /// <para>Display Name: Total Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("mgs_totalamount_base")]
        [DisplayName("Total Amount (Base)")]
        public decimal? mgs_totalamount_Base {
            get {
                return GetMoneyValue("mgs_totalamount_base");
            }
        }
        
        /// <summary>
        /// <para>Status of the Invoice</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        [DisplayName("Status")]
        public mgs_InvoiceState? statecode {
            get {
                return GetOptionSetValue<mgs_InvoiceState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the Invoice</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        [DisplayName("Status Reason")]
        public mgs_Invoice_statuscode? statuscode {
            get {
                return GetOptionSetValue<mgs_Invoice_statuscode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_mgs_invoice_createdby")]
        public SystemUser lk_mgs_invoice_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_mgs_invoice_createdby", null);
            }
            set {
                SetRelatedEntity("lk_mgs_invoice_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_mgs_invoice_createdonbehalfby")]
        public SystemUser lk_mgs_invoice_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_mgs_invoice_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_mgs_invoice_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_mgs_invoice_modifiedby")]
        public SystemUser lk_mgs_invoice_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_mgs_invoice_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_mgs_invoice_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_mgs_invoice_modifiedonbehalfby")]
        public SystemUser lk_mgs_invoice_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_mgs_invoice_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_mgs_invoice_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("mgs_invoice_Annotations")]
        public IEnumerable<Annotation> mgs_invoice_Annotations {
            get {
                return GetRelatedEntities<Annotation>("mgs_invoice_Annotations", null);
            }
            set {
                SetRelatedEntities("mgs_invoice_Annotations", null, value);
            }
        }
        
        [AttributeLogicalName("mgs_contact")]
        [RelationshipSchemaName("mgs_invoice_Contact_contact")]
        public Contact mgs_invoice_Contact_contact {
            get {
                return GetRelatedEntity<Contact>("mgs_invoice_Contact_contact", null);
            }
            set {
                SetRelatedEntity("mgs_invoice_Contact_contact", null, value);
            }
        }
        
        [AttributeLogicalName("mgs_invoicecollection")]
        [RelationshipSchemaName("mgs_invoice_InvoiceCollection_mgs_invoicecollection")]
        public mgs_InvoiceCollection mgs_invoice_InvoiceCollection_mgs_invoicecollection {
            get {
                return GetRelatedEntity<mgs_InvoiceCollection>("mgs_invoice_InvoiceCollection_mgs_invoicecollection", null);
            }
            set {
                SetRelatedEntity("mgs_invoice_InvoiceCollection_mgs_invoicecollection", null, value);
            }
        }
        
        [RelationshipSchemaName("mgs_transaction_Invoice_mgs_invoice")]
        public IEnumerable<mgs_Transaction> mgs_transaction_Invoice_mgs_invoice {
            get {
                return GetRelatedEntities<mgs_Transaction>("mgs_transaction_Invoice_mgs_invoice", null);
            }
            set {
                SetRelatedEntities("mgs_transaction_Invoice_mgs_invoice", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_mgs_invoice")]
        public SystemUser user_mgs_invoice {
            get {
                return GetRelatedEntity<SystemUser>("user_mgs_invoice", null);
            }
            set {
                SetRelatedEntity("user_mgs_invoice", null, value);
            }
        }
        
        public static mgs_Invoice Retrieve(IOrganizationService service, Guid id, params Expression<Func<mgs_Invoice,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Display Name: Invoice Collection</para>
    /// </summary>
    [EntityLogicalName("mgs_invoicecollection")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class mgs_InvoiceCollection : ExtendedEntity<mgs_InvoiceCollectionState, mgs_InvoiceCollection_statuscode> {
        
        public const string EntityLogicalName = "mgs_invoicecollection";
        
        public const int EntityTypeCode = 11051;
        
        public mgs_InvoiceCollection() : 
                base(EntityLogicalName) {
        }
        
        public mgs_InvoiceCollection(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("mgs_name");
            }
        }
        
        [AttributeLogicalName("mgs_invoicecollectionid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("mgs_invoicecollectionid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for entity instances</para>
        /// <para>Display Name: Invoice Collection</para>
        /// </summary>
        [AttributeLogicalName("mgs_invoicecollectionid")]
        [DisplayName("Invoice Collection")]
        public Guid? mgs_InvoiceCollectionId {
            get {
                return GetAttributeValue<Guid?>("mgs_invoicecollectionid");
            }
            set {
                SetId("mgs_invoicecollectionid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        [DisplayName("Created By")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        [DisplayName("Created On")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        [DisplayName("Created By (Delegate)")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        [DisplayName("Import Sequence Number")]
        [Range(-2147483648, 2147483647)]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        [DisplayName("Modified By")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        [DisplayName("Modified On")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        [DisplayName("Modified By (Delegate)")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        [DisplayName("Record Created On")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Owner Id</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        [DisplayName("Owner")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        [DisplayName("Owning Business Unit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        [DisplayName("Owning Team")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        [DisplayName("Owning User")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("mgs_name")]
        [DisplayName("Name")]
        [MaxLength(850)]
        public string PrimaryNameField {
            get {
                return GetAttributeValue<string>("mgs_name");
            }
            set {
                SetAttributeValue("mgs_name", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        [DisplayName("Time Zone Rule Version Number")]
        [Range(-1, 2147483647)]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        [DisplayName("UTC Conversion Time Zone Code")]
        [Range(-1, 2147483647)]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Version Number</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        [DisplayName("Version Number")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Invoice Until</para>
        /// </summary>
        [AttributeLogicalName("mgs_invoiceuntil")]
        [DisplayName("Invoice Until")]
        public DateTime? mgs_InvoiceUntil {
            get {
                return GetAttributeValue<DateTime?>("mgs_invoiceuntil");
            }
            set {
                SetAttributeValue("mgs_invoiceuntil", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("mgs_name")]
        [DisplayName("Name")]
        [MaxLength(850)]
        public string mgs_Name {
            get {
                return GetAttributeValue<string>("mgs_name");
            }
            set {
                SetAttributeValue("mgs_name", value);
            }
        }
        
        /// <summary>
        /// <para>Status of the Invoice Collection</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        [DisplayName("Status")]
        public mgs_InvoiceCollectionState? statecode {
            get {
                return GetOptionSetValue<mgs_InvoiceCollectionState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the Invoice Collection</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        [DisplayName("Status Reason")]
        public mgs_InvoiceCollection_statuscode? statuscode {
            get {
                return GetOptionSetValue<mgs_InvoiceCollection_statuscode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_mgs_invoicecollection_createdby")]
        public SystemUser lk_mgs_invoicecollection_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_mgs_invoicecollection_createdby", null);
            }
            set {
                SetRelatedEntity("lk_mgs_invoicecollection_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_mgs_invoicecollection_createdonbehalfby")]
        public SystemUser lk_mgs_invoicecollection_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_mgs_invoicecollection_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_mgs_invoicecollection_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_mgs_invoicecollection_modifiedby")]
        public SystemUser lk_mgs_invoicecollection_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_mgs_invoicecollection_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_mgs_invoicecollection_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_mgs_invoicecollection_modifiedonbehalfby")]
        public SystemUser lk_mgs_invoicecollection_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_mgs_invoicecollection_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_mgs_invoicecollection_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("mgs_invoice_InvoiceCollection_mgs_invoicecollection")]
        public IEnumerable<mgs_Invoice> mgs_invoice_InvoiceCollection_mgs_invoicecollection {
            get {
                return GetRelatedEntities<mgs_Invoice>("mgs_invoice_InvoiceCollection_mgs_invoicecollection", null);
            }
            set {
                SetRelatedEntities("mgs_invoice_InvoiceCollection_mgs_invoicecollection", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_mgs_invoicecollection")]
        public SystemUser user_mgs_invoicecollection {
            get {
                return GetRelatedEntity<SystemUser>("user_mgs_invoicecollection", null);
            }
            set {
                SetRelatedEntity("user_mgs_invoicecollection", null, value);
            }
        }
        
        public static mgs_InvoiceCollection Retrieve(IOrganizationService service, Guid id, params Expression<Func<mgs_InvoiceCollection,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Display Name: Product</para>
    /// </summary>
    [EntityLogicalName("mgs_product")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class mgs_Product : ExtendedEntity<mgs_ProductState, mgs_Product_statuscode> {
        
        public const string EntityLogicalName = "mgs_product";
        
        public const int EntityTypeCode = 10959;
        
        public mgs_Product() : 
                base(EntityLogicalName) {
        }
        
        public mgs_Product(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("mgs_name");
            }
        }
        
        [AttributeLogicalName("mgs_productid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("mgs_productid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for entity instances</para>
        /// <para>Display Name: Product</para>
        /// </summary>
        [AttributeLogicalName("mgs_productid")]
        [DisplayName("Product")]
        public Guid? mgs_ProductId {
            get {
                return GetAttributeValue<Guid?>("mgs_productid");
            }
            set {
                SetId("mgs_productid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        [DisplayName("Created By")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        [DisplayName("Created On")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        [DisplayName("Created By (Delegate)")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the entity with respect to the base currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        [DisplayName("Exchange Rate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        [DisplayName("Import Sequence Number")]
        [Range(-2147483648, 2147483647)]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        [DisplayName("Modified By")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        [DisplayName("Modified On")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        [DisplayName("Modified By (Delegate)")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        [DisplayName("Record Created On")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Owner Id</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        [DisplayName("Owner")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        [DisplayName("Owning Business Unit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        [DisplayName("Owning Team")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        [DisplayName("Owning User")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("mgs_name")]
        [DisplayName("Name")]
        [MaxLength(850)]
        public string PrimaryNameField {
            get {
                return GetAttributeValue<string>("mgs_name");
            }
            set {
                SetAttributeValue("mgs_name", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        [DisplayName("Time Zone Rule Version Number")]
        [Range(-1, 2147483647)]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the currency associated with the entity.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        [DisplayName("Currency")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        [DisplayName("UTC Conversion Time Zone Code")]
        [Range(-1, 2147483647)]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Version Number</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        [DisplayName("Version Number")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Billing Interval</para>
        /// </summary>
        [AttributeLogicalName("mgs_billinginterval")]
        [DisplayName("Billing Interval")]
        public mgs_billinginterval? mgs_BillingInterval {
            get {
                return GetOptionSetValue<mgs_billinginterval>("mgs_billinginterval");
            }
            set {
                SetOptionSetValue("mgs_billinginterval", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("mgs_name")]
        [DisplayName("Name")]
        [MaxLength(850)]
        public string mgs_Name {
            get {
                return GetAttributeValue<string>("mgs_name");
            }
            set {
                SetAttributeValue("mgs_name", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Price</para>
        /// </summary>
        [AttributeLogicalName("mgs_price")]
        [DisplayName("Price")]
        public decimal? mgs_Price {
            get {
                return GetMoneyValue("mgs_price");
            }
            set {
                SetMoneyValue("mgs_price", value);
            }
        }
        
        /// <summary>
        /// <para>Value of the Price in base currency.</para>
        /// <para>Display Name: Price (Base)</para>
        /// </summary>
        [AttributeLogicalName("mgs_price_base")]
        [DisplayName("Price (Base)")]
        public decimal? mgs_price_Base {
            get {
                return GetMoneyValue("mgs_price_base");
            }
        }
        
        /// <summary>
        /// <para>Status of the Product</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        [DisplayName("Status")]
        public mgs_ProductState? statecode {
            get {
                return GetOptionSetValue<mgs_ProductState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the Product</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        [DisplayName("Status Reason")]
        public mgs_Product_statuscode? statuscode {
            get {
                return GetOptionSetValue<mgs_Product_statuscode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_mgs_product_createdby")]
        public SystemUser lk_mgs_product_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_mgs_product_createdby", null);
            }
            set {
                SetRelatedEntity("lk_mgs_product_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_mgs_product_createdonbehalfby")]
        public SystemUser lk_mgs_product_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_mgs_product_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_mgs_product_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_mgs_product_modifiedby")]
        public SystemUser lk_mgs_product_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_mgs_product_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_mgs_product_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_mgs_product_modifiedonbehalfby")]
        public SystemUser lk_mgs_product_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_mgs_product_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_mgs_product_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("mgs_subscription_Product_mgs_product")]
        public IEnumerable<mgs_Subscription> mgs_subscription_Product_mgs_product {
            get {
                return GetRelatedEntities<mgs_Subscription>("mgs_subscription_Product_mgs_product", null);
            }
            set {
                SetRelatedEntities("mgs_subscription_Product_mgs_product", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_mgs_product")]
        public SystemUser user_mgs_product {
            get {
                return GetRelatedEntity<SystemUser>("user_mgs_product", null);
            }
            set {
                SetRelatedEntity("user_mgs_product", null, value);
            }
        }
        
        public static mgs_Product Retrieve(IOrganizationService service, Guid id, params Expression<Func<mgs_Product,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Entity description</para>
    /// <para>Display Name: Subscription</para>
    /// </summary>
    [EntityLogicalName("mgs_subscription")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class mgs_Subscription : ExtendedEntity<mgs_SubscriptionState, mgs_Subscription_statuscode> {
        
        public const string EntityLogicalName = "mgs_subscription";
        
        public const int EntityTypeCode = 11060;
        
        public mgs_Subscription() : 
                base(EntityLogicalName) {
        }
        
        public mgs_Subscription(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("mgs_subscriptionname");
            }
        }
        
        [AttributeLogicalName("mgs_subscriptionid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("mgs_subscriptionid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for entity instances</para>
        /// <para>Display Name: Subscription</para>
        /// </summary>
        [AttributeLogicalName("mgs_subscriptionid")]
        [DisplayName("Subscription")]
        public Guid? mgs_SubscriptionId {
            get {
                return GetAttributeValue<Guid?>("mgs_subscriptionid");
            }
            set {
                SetId("mgs_subscriptionid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        [DisplayName("Created By")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        [DisplayName("Created On")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        [DisplayName("Created By (Delegate)")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        [DisplayName("Import Sequence Number")]
        [Range(-2147483648, 2147483647)]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        [DisplayName("Modified By")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        [DisplayName("Modified On")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        [DisplayName("Modified By (Delegate)")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        [DisplayName("Record Created On")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Owner Id</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        [DisplayName("Owner")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        [DisplayName("Owning Business Unit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        [DisplayName("Owning Team")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        [DisplayName("Owning User")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Subscription Name</para>
        /// </summary>
        [AttributeLogicalName("mgs_subscriptionname")]
        [DisplayName("Subscription Name")]
        [MaxLength(850)]
        public string PrimaryNameField {
            get {
                return GetAttributeValue<string>("mgs_subscriptionname");
            }
            set {
                SetAttributeValue("mgs_subscriptionname", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        [DisplayName("Time Zone Rule Version Number")]
        [Range(-1, 2147483647)]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        [DisplayName("UTC Conversion Time Zone Code")]
        [Range(-1, 2147483647)]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Version Number</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        [DisplayName("Version Number")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Contact</para>
        /// </summary>
        [AttributeLogicalName("mgs_contact")]
        [DisplayName("Contact")]
        public EntityReference mgs_Contact {
            get {
                return GetAttributeValue<EntityReference>("mgs_contact");
            }
            set {
                SetAttributeValue("mgs_contact", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: End Date</para>
        /// </summary>
        [AttributeLogicalName("mgs_enddate")]
        [DisplayName("End Date")]
        public DateTime? mgs_EndDate {
            get {
                return GetAttributeValue<DateTime?>("mgs_enddate");
            }
            set {
                SetAttributeValue("mgs_enddate", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Invoiced Until</para>
        /// </summary>
        [AttributeLogicalName("mgs_invoiceduntil")]
        [DisplayName("Invoiced Until")]
        public DateTime? mgs_InvoicedUntil {
            get {
                return GetAttributeValue<DateTime?>("mgs_invoiceduntil");
            }
            set {
                SetAttributeValue("mgs_invoiceduntil", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Product</para>
        /// </summary>
        [AttributeLogicalName("mgs_product")]
        [DisplayName("Product")]
        public EntityReference mgs_Product {
            get {
                return GetAttributeValue<EntityReference>("mgs_product");
            }
            set {
                SetAttributeValue("mgs_product", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Start Date</para>
        /// </summary>
        [AttributeLogicalName("mgs_startdate")]
        [DisplayName("Start Date")]
        public DateTime? mgs_StartDate {
            get {
                return GetAttributeValue<DateTime?>("mgs_startdate");
            }
            set {
                SetAttributeValue("mgs_startdate", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Subscription Name</para>
        /// </summary>
        [AttributeLogicalName("mgs_subscriptionname")]
        [DisplayName("Subscription Name")]
        [MaxLength(850)]
        public string mgs_SubscriptionName {
            get {
                return GetAttributeValue<string>("mgs_subscriptionname");
            }
            set {
                SetAttributeValue("mgs_subscriptionname", value);
            }
        }
        
        /// <summary>
        /// <para>Status of the Subscription</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        [DisplayName("Status")]
        public mgs_SubscriptionState? statecode {
            get {
                return GetOptionSetValue<mgs_SubscriptionState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the Subscription</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        [DisplayName("Status Reason")]
        public mgs_Subscription_statuscode? statuscode {
            get {
                return GetOptionSetValue<mgs_Subscription_statuscode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_mgs_subscription_createdby")]
        public SystemUser lk_mgs_subscription_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_mgs_subscription_createdby", null);
            }
            set {
                SetRelatedEntity("lk_mgs_subscription_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_mgs_subscription_createdonbehalfby")]
        public SystemUser lk_mgs_subscription_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_mgs_subscription_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_mgs_subscription_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_mgs_subscription_modifiedby")]
        public SystemUser lk_mgs_subscription_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_mgs_subscription_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_mgs_subscription_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_mgs_subscription_modifiedonbehalfby")]
        public SystemUser lk_mgs_subscription_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_mgs_subscription_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_mgs_subscription_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("mgs_contact")]
        [RelationshipSchemaName("mgs_subscription_Contact_contact")]
        public Contact mgs_subscription_Contact_contact {
            get {
                return GetRelatedEntity<Contact>("mgs_subscription_Contact_contact", null);
            }
            set {
                SetRelatedEntity("mgs_subscription_Contact_contact", null, value);
            }
        }
        
        [AttributeLogicalName("mgs_product")]
        [RelationshipSchemaName("mgs_subscription_Product_mgs_product")]
        public mgs_Product mgs_subscription_Product_mgs_product {
            get {
                return GetRelatedEntity<mgs_Product>("mgs_subscription_Product_mgs_product", null);
            }
            set {
                SetRelatedEntity("mgs_subscription_Product_mgs_product", null, value);
            }
        }
        
        [RelationshipSchemaName("mgs_transaction_Subscription_mgs_subscription")]
        public IEnumerable<mgs_Transaction> mgs_transaction_Subscription_mgs_subscription {
            get {
                return GetRelatedEntities<mgs_Transaction>("mgs_transaction_Subscription_mgs_subscription", null);
            }
            set {
                SetRelatedEntities("mgs_transaction_Subscription_mgs_subscription", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_mgs_subscription")]
        public SystemUser user_mgs_subscription {
            get {
                return GetRelatedEntity<SystemUser>("user_mgs_subscription", null);
            }
            set {
                SetRelatedEntity("user_mgs_subscription", null, value);
            }
        }
        
        public static mgs_Subscription Retrieve(IOrganizationService service, Guid id, params Expression<Func<mgs_Subscription,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>This table contains records of transaction information</para>
    /// <para>Display Name: Transaction</para>
    /// </summary>
    [EntityLogicalName("mgs_transaction")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class mgs_Transaction : ExtendedEntity<mgs_TransactionState, mgs_Transaction_statuscode> {
        
        public const string EntityLogicalName = "mgs_transaction";
        
        public const int EntityTypeCode = 11143;
        
        public mgs_Transaction() : 
                base(EntityLogicalName) {
        }
        
        public mgs_Transaction(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("mgs_transaction1");
            }
        }
        
        [AttributeLogicalName("mgs_transactionid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("mgs_transactionid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for entity instances</para>
        /// <para>Display Name: Transaction</para>
        /// </summary>
        [AttributeLogicalName("mgs_transactionid")]
        [DisplayName("Transaction")]
        public Guid? mgs_TransactionId {
            get {
                return GetAttributeValue<Guid?>("mgs_transactionid");
            }
            set {
                SetId("mgs_transactionid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        [DisplayName("Created By")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        [DisplayName("Created On")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        [DisplayName("Created By (Delegate)")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the entity with respect to the base currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        [DisplayName("Exchange Rate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        [DisplayName("Import Sequence Number")]
        [Range(-2147483648, 2147483647)]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        [DisplayName("Modified By")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        [DisplayName("Modified On")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        [DisplayName("Modified By (Delegate)")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        [DisplayName("Record Created On")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Owner Id</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        [DisplayName("Owner")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        [DisplayName("Owning Business Unit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        [DisplayName("Owning Team")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        [DisplayName("Owning User")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Transaction</para>
        /// </summary>
        [AttributeLogicalName("mgs_transaction1")]
        [DisplayName("Transaction")]
        [MaxLength(850)]
        public string PrimaryNameField {
            get {
                return GetAttributeValue<string>("mgs_transaction1");
            }
            set {
                SetAttributeValue("mgs_transaction1", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        [DisplayName("Time Zone Rule Version Number")]
        [Range(-1, 2147483647)]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the currency associated with the entity.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        [DisplayName("Currency")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        [DisplayName("UTC Conversion Time Zone Code")]
        [Range(-1, 2147483647)]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Version Number</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        [DisplayName("Version Number")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Amount</para>
        /// </summary>
        [AttributeLogicalName("mgs_amount")]
        [DisplayName("Amount")]
        public decimal? mgs_Amount {
            get {
                return GetMoneyValue("mgs_amount");
            }
            set {
                SetMoneyValue("mgs_amount", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: End</para>
        /// </summary>
        [AttributeLogicalName("mgs_end")]
        [DisplayName("End")]
        public DateTime? mgs_End {
            get {
                return GetAttributeValue<DateTime?>("mgs_end");
            }
            set {
                SetAttributeValue("mgs_end", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Invoice</para>
        /// </summary>
        [AttributeLogicalName("mgs_invoice")]
        [DisplayName("Invoice")]
        public EntityReference mgs_Invoice {
            get {
                return GetAttributeValue<EntityReference>("mgs_invoice");
            }
            set {
                SetAttributeValue("mgs_invoice", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Start</para>
        /// </summary>
        [AttributeLogicalName("mgs_start")]
        [DisplayName("Start")]
        public DateTime? mgs_Start {
            get {
                return GetAttributeValue<DateTime?>("mgs_start");
            }
            set {
                SetAttributeValue("mgs_start", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Subscription</para>
        /// </summary>
        [AttributeLogicalName("mgs_subscription")]
        [DisplayName("Subscription")]
        public EntityReference mgs_Subscription {
            get {
                return GetAttributeValue<EntityReference>("mgs_subscription");
            }
            set {
                SetAttributeValue("mgs_subscription", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Transaction</para>
        /// </summary>
        [AttributeLogicalName("mgs_transaction1")]
        [DisplayName("Transaction")]
        [MaxLength(850)]
        public string mgs_Transaction1 {
            get {
                return GetAttributeValue<string>("mgs_transaction1");
            }
            set {
                SetAttributeValue("mgs_transaction1", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Type</para>
        /// </summary>
        [AttributeLogicalName("mgs_type")]
        [DisplayName("Type")]
        public mgs_transactiontype? mgs_Type {
            get {
                return GetOptionSetValue<mgs_transactiontype>("mgs_type");
            }
            set {
                SetOptionSetValue("mgs_type", value);
            }
        }
        
        /// <summary>
        /// <para>Value of the Amount in base currency.</para>
        /// <para>Display Name: Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("mgs_amount_base")]
        [DisplayName("Amount (Base)")]
        public decimal? mgs_amount_Base {
            get {
                return GetMoneyValue("mgs_amount_base");
            }
        }
        
        /// <summary>
        /// <para>Status of the Transaction</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        [DisplayName("Status")]
        public mgs_TransactionState? statecode {
            get {
                return GetOptionSetValue<mgs_TransactionState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the Transaction</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        [DisplayName("Status Reason")]
        public mgs_Transaction_statuscode? statuscode {
            get {
                return GetOptionSetValue<mgs_Transaction_statuscode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_mgs_transaction_createdby")]
        public SystemUser lk_mgs_transaction_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_mgs_transaction_createdby", null);
            }
            set {
                SetRelatedEntity("lk_mgs_transaction_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_mgs_transaction_createdonbehalfby")]
        public SystemUser lk_mgs_transaction_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_mgs_transaction_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_mgs_transaction_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_mgs_transaction_modifiedby")]
        public SystemUser lk_mgs_transaction_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_mgs_transaction_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_mgs_transaction_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_mgs_transaction_modifiedonbehalfby")]
        public SystemUser lk_mgs_transaction_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_mgs_transaction_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_mgs_transaction_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("mgs_transaction_Annotations")]
        public IEnumerable<Annotation> mgs_transaction_Annotations {
            get {
                return GetRelatedEntities<Annotation>("mgs_transaction_Annotations", null);
            }
            set {
                SetRelatedEntities("mgs_transaction_Annotations", null, value);
            }
        }
        
        [AttributeLogicalName("mgs_invoice")]
        [RelationshipSchemaName("mgs_transaction_Invoice_mgs_invoice")]
        public mgs_Invoice mgs_transaction_Invoice_mgs_invoice {
            get {
                return GetRelatedEntity<mgs_Invoice>("mgs_transaction_Invoice_mgs_invoice", null);
            }
            set {
                SetRelatedEntity("mgs_transaction_Invoice_mgs_invoice", null, value);
            }
        }
        
        [AttributeLogicalName("mgs_subscription")]
        [RelationshipSchemaName("mgs_transaction_Subscription_mgs_subscription")]
        public mgs_Subscription mgs_transaction_Subscription_mgs_subscription {
            get {
                return GetRelatedEntity<mgs_Subscription>("mgs_transaction_Subscription_mgs_subscription", null);
            }
            set {
                SetRelatedEntity("mgs_transaction_Subscription_mgs_subscription", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_mgs_transaction")]
        public SystemUser user_mgs_transaction {
            get {
                return GetRelatedEntity<SystemUser>("user_mgs_transaction", null);
            }
            set {
                SetRelatedEntity("user_mgs_transaction", null, value);
            }
        }
        
        public static mgs_Transaction Retrieve(IOrganizationService service, Guid id, params Expression<Func<mgs_Transaction,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    public partial class Xrm : ExtendedOrganizationServiceContext {
        
        public Xrm(IOrganizationService service) : 
                base(service) {
        }
        
        public IQueryable<Account> AccountSet {
            get {
                return CreateQuery<Account>();
            }
        }
        
        public IQueryable<Annotation> AnnotationSet {
            get {
                return CreateQuery<Annotation>();
            }
        }
        
        public IQueryable<Contact> ContactSet {
            get {
                return CreateQuery<Contact>();
            }
        }
        
        public IQueryable<DuplicateRule> DuplicateRuleSet {
            get {
                return CreateQuery<DuplicateRule>();
            }
        }
        
        public IQueryable<EnvironmentVariableDefinition> EnvironmentVariableDefinitionSet {
            get {
                return CreateQuery<EnvironmentVariableDefinition>();
            }
        }
        
        public IQueryable<EnvironmentVariableValue> EnvironmentVariableValueSet {
            get {
                return CreateQuery<EnvironmentVariableValue>();
            }
        }
        
        public IQueryable<Queue> QueueSet {
            get {
                return CreateQuery<Queue>();
            }
        }
        
        public IQueryable<QueueMembership> QueueMembershipSet {
            get {
                return CreateQuery<QueueMembership>();
            }
        }
        
        public IQueryable<SavedQuery> SavedQuerySet {
            get {
                return CreateQuery<SavedQuery>();
            }
        }
        
        public IQueryable<SystemUser> SystemUserSet {
            get {
                return CreateQuery<SystemUser>();
            }
        }
        
        public IQueryable<Task> TaskSet {
            get {
                return CreateQuery<Task>();
            }
        }
        
        public IQueryable<Template> TemplateSet {
            get {
                return CreateQuery<Template>();
            }
        }
        
        public IQueryable<appnotification> appnotificationSet {
            get {
                return CreateQuery<appnotification>();
            }
        }
        
        public IQueryable<mgs_Invoice> mgs_InvoiceSet {
            get {
                return CreateQuery<mgs_Invoice>();
            }
        }
        
        public IQueryable<mgs_InvoiceCollection> mgs_InvoiceCollectionSet {
            get {
                return CreateQuery<mgs_InvoiceCollection>();
            }
        }
        
        public IQueryable<mgs_Product> mgs_ProductSet {
            get {
                return CreateQuery<mgs_Product>();
            }
        }
        
        public IQueryable<mgs_Subscription> mgs_SubscriptionSet {
            get {
                return CreateQuery<mgs_Subscription>();
            }
        }
        
        public IQueryable<mgs_Transaction> mgs_TransactionSet {
            get {
                return CreateQuery<mgs_Transaction>();
            }
        }
    }
    
    [DataContract()]
    public enum AccountState {
        
        [EnumMember()]
        [OptionSetMetadata("Active", Index=0, Lcid=1033)]
        Active = 0,
        
        [EnumMember()]
        [OptionSetMetadata("Inactive", Index=1, Lcid=1033)]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum Account_AccountCategoryCode {
        
        [EnumMember()]
        [OptionSetMetadata("Preferred Customer", Index=0, Lcid=1033)]
        PreferredCustomer = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Standard", Index=1, Lcid=1033)]
        Standard = 2,
    }
    
    [DataContract()]
    public enum Account_AccountClassificationCode {
        
        [EnumMember()]
        [OptionSetMetadata("Default Value", Index=0, Lcid=1033)]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Account_AccountRatingCode {
        
        [EnumMember()]
        [OptionSetMetadata("Default Value", Index=0, Lcid=1033)]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Account_Address1_AddressTypeCode {
        
        [EnumMember()]
        [OptionSetMetadata("Bill To", Index=0, Lcid=1033)]
        BillTo = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Ship To", Index=1, Lcid=1033)]
        ShipTo = 2,
        
        [EnumMember()]
        [OptionSetMetadata("Primary", Index=2, Lcid=1033)]
        Primary = 3,
        
        [EnumMember()]
        [OptionSetMetadata("Other", Index=3, Lcid=1033)]
        Other = 4,
    }
    
    [DataContract()]
    public enum Account_Address1_FreightTermsCode {
        
        [EnumMember()]
        [OptionSetMetadata("FOB", Index=0, Lcid=1033)]
        FOB = 1,
        
        [EnumMember()]
        [OptionSetMetadata("No Charge", Index=1, Lcid=1033)]
        NoCharge = 2,
    }
    
    [DataContract()]
    public enum Account_Address1_ShippingMethodCode {
        
        [EnumMember()]
        [OptionSetMetadata("Airborne", Index=0, Lcid=1033)]
        Airborne = 1,
        
        [EnumMember()]
        [OptionSetMetadata("DHL", Index=1, Lcid=1033)]
        DHL = 2,
        
        [EnumMember()]
        [OptionSetMetadata("FedEx", Index=2, Lcid=1033)]
        FedEx = 3,
        
        [EnumMember()]
        [OptionSetMetadata("UPS", Index=3, Lcid=1033)]
        UPS = 4,
        
        [EnumMember()]
        [OptionSetMetadata("Postal Mail", Index=4, Lcid=1033)]
        PostalMail = 5,
        
        [EnumMember()]
        [OptionSetMetadata("Full Load", Index=5, Lcid=1033)]
        FullLoad = 6,
        
        [EnumMember()]
        [OptionSetMetadata("Will Call", Index=6, Lcid=1033)]
        WillCall = 7,
    }
    
    [DataContract()]
    public enum Account_Address2_AddressTypeCode {
        
        [EnumMember()]
        [OptionSetMetadata("Default Value", Index=0, Lcid=1033)]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Account_Address2_FreightTermsCode {
        
        [EnumMember()]
        [OptionSetMetadata("Default Value", Index=0, Lcid=1033)]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Account_Address2_ShippingMethodCode {
        
        [EnumMember()]
        [OptionSetMetadata("Default Value", Index=0, Lcid=1033)]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Account_BusinessTypeCode {
        
        [EnumMember()]
        [OptionSetMetadata("Default Value", Index=0, Lcid=1033)]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Account_CustomerSizeCode {
        
        [EnumMember()]
        [OptionSetMetadata("Default Value", Index=0, Lcid=1033)]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Account_CustomerTypeCode {
        
        [EnumMember()]
        [OptionSetMetadata("Competitor", Index=0, Lcid=1033)]
        Competitor = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Consultant", Index=1, Lcid=1033)]
        Consultant = 2,
        
        [EnumMember()]
        [OptionSetMetadata("Customer", Index=2, Lcid=1033)]
        Customer = 3,
        
        [EnumMember()]
        [OptionSetMetadata("Investor", Index=3, Lcid=1033)]
        Investor = 4,
        
        [EnumMember()]
        [OptionSetMetadata("Partner", Index=4, Lcid=1033)]
        Partner = 5,
        
        [EnumMember()]
        [OptionSetMetadata("Influencer", Index=5, Lcid=1033)]
        Influencer = 6,
        
        [EnumMember()]
        [OptionSetMetadata("Press", Index=6, Lcid=1033)]
        Press = 7,
        
        [EnumMember()]
        [OptionSetMetadata("Prospect", Index=7, Lcid=1033)]
        Prospect = 8,
        
        [EnumMember()]
        [OptionSetMetadata("Reseller", Index=8, Lcid=1033)]
        Reseller = 9,
        
        [EnumMember()]
        [OptionSetMetadata("Supplier", Index=9, Lcid=1033)]
        Supplier = 10,
        
        [EnumMember()]
        [OptionSetMetadata("Vendor", Index=10, Lcid=1033)]
        Vendor = 11,
        
        [EnumMember()]
        [OptionSetMetadata("Other", Index=11, Lcid=1033)]
        Other = 12,
    }
    
    [DataContract()]
    public enum Account_IndustryCode {
        
        [EnumMember()]
        [OptionSetMetadata("Accounting", Index=0, Lcid=1033)]
        Accounting = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Agriculture and Non-petrol Natural Resource Extraction", Index=1, Lcid=1033)]
        AgricultureandNonpetrolNaturalResourceExtraction = 2,
        
        [EnumMember()]
        [OptionSetMetadata("Broadcasting Printing and Publishing", Index=2, Lcid=1033)]
        BroadcastingPrintingandPublishing = 3,
        
        [EnumMember()]
        [OptionSetMetadata("Brokers", Index=3, Lcid=1033)]
        Brokers = 4,
        
        [EnumMember()]
        [OptionSetMetadata("Building Supply Retail", Index=4, Lcid=1033)]
        BuildingSupplyRetail = 5,
        
        [EnumMember()]
        [OptionSetMetadata("Business Services", Index=5, Lcid=1033)]
        BusinessServices = 6,
        
        [EnumMember()]
        [OptionSetMetadata("Consulting", Index=6, Lcid=1033)]
        Consulting = 7,
        
        [EnumMember()]
        [OptionSetMetadata("Consumer Services", Index=7, Lcid=1033)]
        ConsumerServices = 8,
        
        [EnumMember()]
        [OptionSetMetadata("Design, Direction and Creative Management", Index=8, Lcid=1033)]
        DesignDirectionandCreativeManagement = 9,
        
        [EnumMember()]
        [OptionSetMetadata("Distributors, Dispatchers and Processors", Index=9, Lcid=1033)]
        DistributorsDispatchersandProcessors = 10,
        
        [EnumMember()]
        [OptionSetMetadata("Doctor\'s Offices and Clinics", Index=10, Lcid=1033)]
        DoctorsOfficesandClinics = 11,
        
        [EnumMember()]
        [OptionSetMetadata("Durable Manufacturing", Index=11, Lcid=1033)]
        DurableManufacturing = 12,
        
        [EnumMember()]
        [OptionSetMetadata("Eating and Drinking Places", Index=12, Lcid=1033)]
        EatingandDrinkingPlaces = 13,
        
        [EnumMember()]
        [OptionSetMetadata("Entertainment Retail", Index=13, Lcid=1033)]
        EntertainmentRetail = 14,
        
        [EnumMember()]
        [OptionSetMetadata("Equipment Rental and Leasing", Index=14, Lcid=1033)]
        EquipmentRentalandLeasing = 15,
        
        [EnumMember()]
        [OptionSetMetadata("Financial", Index=15, Lcid=1033)]
        Financial = 16,
        
        [EnumMember()]
        [OptionSetMetadata("Food and Tobacco Processing", Index=16, Lcid=1033)]
        FoodandTobaccoProcessing = 17,
        
        [EnumMember()]
        [OptionSetMetadata("Inbound Capital Intensive Processing", Index=17, Lcid=1033)]
        InboundCapitalIntensiveProcessing = 18,
        
        [EnumMember()]
        [OptionSetMetadata("Inbound Repair and Services", Index=18, Lcid=1033)]
        InboundRepairandServices = 19,
        
        [EnumMember()]
        [OptionSetMetadata("Insurance", Index=19, Lcid=1033)]
        Insurance = 20,
        
        [EnumMember()]
        [OptionSetMetadata("Legal Services", Index=20, Lcid=1033)]
        LegalServices = 21,
        
        [EnumMember()]
        [OptionSetMetadata("Non-Durable Merchandise Retail", Index=21, Lcid=1033)]
        NonDurableMerchandiseRetail = 22,
        
        [EnumMember()]
        [OptionSetMetadata("Outbound Consumer Service", Index=22, Lcid=1033)]
        OutboundConsumerService = 23,
        
        [EnumMember()]
        [OptionSetMetadata("Petrochemical Extraction and Distribution", Index=23, Lcid=1033)]
        PetrochemicalExtractionandDistribution = 24,
        
        [EnumMember()]
        [OptionSetMetadata("Service Retail", Index=24, Lcid=1033)]
        ServiceRetail = 25,
        
        [EnumMember()]
        [OptionSetMetadata("SIG Affiliations", Index=25, Lcid=1033)]
        SIGAffiliations = 26,
        
        [EnumMember()]
        [OptionSetMetadata("Social Services", Index=26, Lcid=1033)]
        SocialServices = 27,
        
        [EnumMember()]
        [OptionSetMetadata("Special Outbound Trade Contractors", Index=27, Lcid=1033)]
        SpecialOutboundTradeContractors = 28,
        
        [EnumMember()]
        [OptionSetMetadata("Specialty Realty", Index=28, Lcid=1033)]
        SpecialtyRealty = 29,
        
        [EnumMember()]
        [OptionSetMetadata("Transportation", Index=29, Lcid=1033)]
        Transportation = 30,
        
        [EnumMember()]
        [OptionSetMetadata("Utility Creation and Distribution", Index=30, Lcid=1033)]
        UtilityCreationandDistribution = 31,
        
        [EnumMember()]
        [OptionSetMetadata("Vehicle Retail", Index=31, Lcid=1033)]
        VehicleRetail = 32,
        
        [EnumMember()]
        [OptionSetMetadata("Wholesale", Index=32, Lcid=1033)]
        Wholesale = 33,
    }
    
    [DataContract()]
    public enum Account_OwnershipCode {
        
        [EnumMember()]
        [OptionSetMetadata("Public", Index=0, Lcid=1033)]
        Public = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Private", Index=1, Lcid=1033)]
        Private = 2,
        
        [EnumMember()]
        [OptionSetMetadata("Subsidiary", Index=2, Lcid=1033)]
        Subsidiary = 3,
        
        [EnumMember()]
        [OptionSetMetadata("Other", Index=3, Lcid=1033)]
        Other = 4,
    }
    
    [DataContract()]
    public enum Account_PaymentTermsCode {
        
        [EnumMember()]
        [OptionSetMetadata("Net 30", Index=0, Lcid=1033)]
        Net30 = 1,
        
        [EnumMember()]
        [OptionSetMetadata("2% 10, Net 30", Index=1, Lcid=1033)]
        _210Net30 = 2,
        
        [EnumMember()]
        [OptionSetMetadata("Net 45", Index=2, Lcid=1033)]
        Net45 = 3,
        
        [EnumMember()]
        [OptionSetMetadata("Net 60", Index=3, Lcid=1033)]
        Net60 = 4,
    }
    
    [DataContract()]
    public enum Account_PreferredAppointmentDayCode {
        
        [EnumMember()]
        [OptionSetMetadata("Sunday", Index=0, Lcid=1033)]
        Sunday = 0,
        
        [EnumMember()]
        [OptionSetMetadata("Monday", Index=1, Lcid=1033)]
        Monday = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Tuesday", Index=2, Lcid=1033)]
        Tuesday = 2,
        
        [EnumMember()]
        [OptionSetMetadata("Wednesday", Index=3, Lcid=1033)]
        Wednesday = 3,
        
        [EnumMember()]
        [OptionSetMetadata("Thursday", Index=4, Lcid=1033)]
        Thursday = 4,
        
        [EnumMember()]
        [OptionSetMetadata("Friday", Index=5, Lcid=1033)]
        Friday = 5,
        
        [EnumMember()]
        [OptionSetMetadata("Saturday", Index=6, Lcid=1033)]
        Saturday = 6,
    }
    
    [DataContract()]
    public enum Account_PreferredAppointmentTimeCode {
        
        [EnumMember()]
        [OptionSetMetadata("Morning", Index=0, Lcid=1033)]
        Morning = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Afternoon", Index=1, Lcid=1033)]
        Afternoon = 2,
        
        [EnumMember()]
        [OptionSetMetadata("Evening", Index=2, Lcid=1033)]
        Evening = 3,
    }
    
    [DataContract()]
    public enum Account_PreferredContactMethodCode {
        
        [EnumMember()]
        [OptionSetMetadata("Any", Index=0, Lcid=1033)]
        Any = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Email", Index=1, Lcid=1033)]
        Email = 2,
        
        [EnumMember()]
        [OptionSetMetadata("Phone", Index=2, Lcid=1033)]
        Phone = 3,
        
        [EnumMember()]
        [OptionSetMetadata("Fax", Index=3, Lcid=1033)]
        Fax = 4,
        
        [EnumMember()]
        [OptionSetMetadata("Mail", Index=4, Lcid=1033)]
        Mail = 5,
    }
    
    [DataContract()]
    public enum Account_ShippingMethodCode {
        
        [EnumMember()]
        [OptionSetMetadata("Default Value", Index=0, Lcid=1033)]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Account_StatusCode {
        
        [EnumMember()]
        [OptionSetMetadata("Active", Index=0, Lcid=1033)]
        Active = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Inactive", Index=1, Lcid=1033)]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum Account_TerritoryCode {
        
        [EnumMember()]
        [OptionSetMetadata("Default Value", Index=0, Lcid=1033)]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Annotation_ObjectTypeCode {
        
        [EnumMember()]
        [OptionSetMetadata("Account", Index=0, Lcid=1033)]
        Account = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Contact", Index=11, Lcid=1033)]
        Contact = 2,
        
        [EnumMember()]
        [OptionSetMetadata("Opportunity", Index=21, Lcid=1033)]
        Opportunity = 3,
        
        [EnumMember()]
        [OptionSetMetadata("Lead", Index=18, Lcid=1033)]
        Lead = 4,
        
        [EnumMember()]
        [OptionSetMetadata("Case", Index=7, Lcid=1033)]
        Case = 112,
        
        [EnumMember()]
        [OptionSetMetadata("Competitor", Index=10, Lcid=1033)]
        Competitor = 123,
        
        [EnumMember()]
        [OptionSetMetadata("Contract", Index=12, Lcid=1033)]
        Contract = 1010,
        
        [EnumMember()]
        [OptionSetMetadata("Contract Line", Index=13, Lcid=1033)]
        ContractLine = 1011,
        
        [EnumMember()]
        [OptionSetMetadata("Product", Index=26, Lcid=1033)]
        Product = 1024,
        
        [EnumMember()]
        [OptionSetMetadata("Quote", Index=27, Lcid=1033)]
        Quote = 1084,
        
        [EnumMember()]
        [OptionSetMetadata("Order", Index=23, Lcid=1033)]
        Order = 1088,
        
        [EnumMember()]
        [OptionSetMetadata("Invoice", Index=17, Lcid=1033)]
        Invoice = 1090,
        
        [EnumMember()]
        [OptionSetMetadata("Facility/Equipment", Index=15, Lcid=1033)]
        FacilityEquipment = 4000,
        
        [EnumMember()]
        [OptionSetMetadata("Service", Index=30, Lcid=1033)]
        Service = 4001,
        
        [EnumMember()]
        [OptionSetMetadata("Calendar", Index=3, Lcid=1033)]
        Calendar = 4003,
        
        [EnumMember()]
        [OptionSetMetadata("Resource Specification", Index=29, Lcid=1033)]
        ResourceSpecification = 4006,
        
        [EnumMember()]
        [OptionSetMetadata("Appointment", Index=1, Lcid=1033)]
        Appointment = 4201,
        
        [EnumMember()]
        [OptionSetMetadata("Email", Index=14, Lcid=1033)]
        Email = 4202,
        
        [EnumMember()]
        [OptionSetMetadata("Fax", Index=16, Lcid=1033)]
        Fax = 4204,
        
        [EnumMember()]
        [OptionSetMetadata("Case Resolution", Index=8, Lcid=1033)]
        CaseResolution = 4206,
        
        [EnumMember()]
        [OptionSetMetadata("Letter", Index=19, Lcid=1033)]
        Letter = 4207,
        
        [EnumMember()]
        [OptionSetMetadata("Opportunity Close", Index=22, Lcid=1033)]
        OpportunityClose = 4208,
        
        [EnumMember()]
        [OptionSetMetadata("Order Close", Index=24, Lcid=1033)]
        OrderClose = 4209,
        
        [EnumMember()]
        [OptionSetMetadata("Phone Call", Index=25, Lcid=1033)]
        PhoneCall = 4210,
        
        [EnumMember()]
        [OptionSetMetadata("Quote Close", Index=28, Lcid=1033)]
        QuoteClose = 4211,
        
        [EnumMember()]
        [OptionSetMetadata("Task", Index=32, Lcid=1033)]
        Task = 4212,
        
        [EnumMember()]
        [OptionSetMetadata("Service Activity", Index=31, Lcid=1033)]
        ServiceActivity = 4214,
        
        [EnumMember()]
        [OptionSetMetadata("Commitment", Index=9, Lcid=1033)]
        Commitment = 4215,
        
        [EnumMember()]
        [OptionSetMetadata("Marketing List", Index=20, Lcid=1033)]
        MarketingList = 4300,
        
        [EnumMember()]
        [OptionSetMetadata("Campaign", Index=4, Lcid=1033)]
        Campaign = 4400,
        
        [EnumMember()]
        [OptionSetMetadata("Campaign Response", Index=6, Lcid=1033)]
        CampaignResponse = 4401,
        
        [EnumMember()]
        [OptionSetMetadata("Campaign Activity", Index=5, Lcid=1033)]
        CampaignActivity = 4402,
        
        [EnumMember()]
        [OptionSetMetadata("Bulk Import", Index=2, Lcid=1033)]
        BulkImport = 4407,
        
        [EnumMember()]
        [OptionSetMetadata("Routing Rule", Index=33, Lcid=1033)]
        RoutingRule = 8181,
        
        [EnumMember()]
        [OptionSetMetadata("Routing Rule Item", Index=34, Lcid=1033)]
        RoutingRuleItem = 8199,
    }
    
    [DataContract()]
    public enum ContactState {
        
        [EnumMember()]
        [OptionSetMetadata("Active", Index=0, Lcid=1033)]
        Active = 0,
        
        [EnumMember()]
        [OptionSetMetadata("Inactive", Index=1, Lcid=1033)]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum Contact_AccountRoleCode {
        
        [EnumMember()]
        [OptionSetMetadata("Decision Maker", Index=0, Lcid=1033)]
        DecisionMaker = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Employee", Index=1, Lcid=1033)]
        Employee = 2,
        
        [EnumMember()]
        [OptionSetMetadata("Influencer", Index=2, Lcid=1033)]
        Influencer = 3,
    }
    
    [DataContract()]
    public enum Contact_Address1_AddressTypeCode {
        
        [EnumMember()]
        [OptionSetMetadata("Bill To", Index=0, Lcid=1033)]
        BillTo = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Ship To", Index=1, Lcid=1033)]
        ShipTo = 2,
        
        [EnumMember()]
        [OptionSetMetadata("Primary", Index=2, Lcid=1033)]
        Primary = 3,
        
        [EnumMember()]
        [OptionSetMetadata("Other", Index=3, Lcid=1033)]
        Other = 4,
    }
    
    [DataContract()]
    public enum Contact_Address1_FreightTermsCode {
        
        [EnumMember()]
        [OptionSetMetadata("FOB", Index=0, Lcid=1033)]
        FOB = 1,
        
        [EnumMember()]
        [OptionSetMetadata("No Charge", Index=1, Lcid=1033)]
        NoCharge = 2,
    }
    
    [DataContract()]
    public enum Contact_Address1_ShippingMethodCode {
        
        [EnumMember()]
        [OptionSetMetadata("Airborne", Index=0, Lcid=1033)]
        Airborne = 1,
        
        [EnumMember()]
        [OptionSetMetadata("DHL", Index=1, Lcid=1033)]
        DHL = 2,
        
        [EnumMember()]
        [OptionSetMetadata("FedEx", Index=2, Lcid=1033)]
        FedEx = 3,
        
        [EnumMember()]
        [OptionSetMetadata("UPS", Index=3, Lcid=1033)]
        UPS = 4,
        
        [EnumMember()]
        [OptionSetMetadata("Postal Mail", Index=4, Lcid=1033)]
        PostalMail = 5,
        
        [EnumMember()]
        [OptionSetMetadata("Full Load", Index=5, Lcid=1033)]
        FullLoad = 6,
        
        [EnumMember()]
        [OptionSetMetadata("Will Call", Index=6, Lcid=1033)]
        WillCall = 7,
    }
    
    [DataContract()]
    public enum Contact_Address2_AddressTypeCode {
        
        [EnumMember()]
        [OptionSetMetadata("Default Value", Index=0, Lcid=1033)]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Contact_Address2_FreightTermsCode {
        
        [EnumMember()]
        [OptionSetMetadata("Default Value", Index=0, Lcid=1033)]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Contact_Address2_ShippingMethodCode {
        
        [EnumMember()]
        [OptionSetMetadata("Default Value", Index=0, Lcid=1033)]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Contact_Address3_AddressTypeCode {
        
        [EnumMember()]
        [OptionSetMetadata("Default Value", Index=0, Lcid=1033)]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Contact_Address3_FreightTermsCode {
        
        [EnumMember()]
        [OptionSetMetadata("Default Value", Index=0, Lcid=1033)]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Contact_Address3_ShippingMethodCode {
        
        [EnumMember()]
        [OptionSetMetadata("Default Value", Index=0, Lcid=1033)]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Contact_CustomerSizeCode {
        
        [EnumMember()]
        [OptionSetMetadata("Default Value", Index=0, Lcid=1033)]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Contact_CustomerTypeCode {
        
        [EnumMember()]
        [OptionSetMetadata("Default Value", Index=0, Lcid=1033)]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Contact_EducationCode {
        
        [EnumMember()]
        [OptionSetMetadata("Default Value", Index=0, Lcid=1033)]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Contact_FamilyStatusCode {
        
        [EnumMember()]
        [OptionSetMetadata("Single", Index=0, Lcid=1033)]
        Single = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Married", Index=1, Lcid=1033)]
        Married = 2,
        
        [EnumMember()]
        [OptionSetMetadata("Divorced", Index=2, Lcid=1033)]
        Divorced = 3,
        
        [EnumMember()]
        [OptionSetMetadata("Widowed", Index=3, Lcid=1033)]
        Widowed = 4,
    }
    
    [DataContract()]
    public enum Contact_GenderCode {
        
        [EnumMember()]
        [OptionSetMetadata("Male", Index=0, Lcid=1033)]
        Male = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Female", Index=1, Lcid=1033)]
        Female = 2,
    }
    
    [DataContract()]
    public enum Contact_HasChildrenCode {
        
        [EnumMember()]
        [OptionSetMetadata("Default Value", Index=0, Lcid=1033)]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Contact_LeadSourceCode {
        
        [EnumMember()]
        [OptionSetMetadata("Default Value", Index=0, Lcid=1033)]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Contact_PaymentTermsCode {
        
        [EnumMember()]
        [OptionSetMetadata("Net 30", Index=0, Lcid=1033)]
        Net30 = 1,
        
        [EnumMember()]
        [OptionSetMetadata("2% 10, Net 30", Index=1, Lcid=1033)]
        _210Net30 = 2,
        
        [EnumMember()]
        [OptionSetMetadata("Net 45", Index=2, Lcid=1033)]
        Net45 = 3,
        
        [EnumMember()]
        [OptionSetMetadata("Net 60", Index=3, Lcid=1033)]
        Net60 = 4,
    }
    
    [DataContract()]
    public enum Contact_PreferredAppointmentDayCode {
        
        [EnumMember()]
        [OptionSetMetadata("Sunday", Index=0, Lcid=1033)]
        Sunday = 0,
        
        [EnumMember()]
        [OptionSetMetadata("Monday", Index=1, Lcid=1033)]
        Monday = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Tuesday", Index=2, Lcid=1033)]
        Tuesday = 2,
        
        [EnumMember()]
        [OptionSetMetadata("Wednesday", Index=3, Lcid=1033)]
        Wednesday = 3,
        
        [EnumMember()]
        [OptionSetMetadata("Thursday", Index=4, Lcid=1033)]
        Thursday = 4,
        
        [EnumMember()]
        [OptionSetMetadata("Friday", Index=5, Lcid=1033)]
        Friday = 5,
        
        [EnumMember()]
        [OptionSetMetadata("Saturday", Index=6, Lcid=1033)]
        Saturday = 6,
    }
    
    [DataContract()]
    public enum Contact_PreferredAppointmentTimeCode {
        
        [EnumMember()]
        [OptionSetMetadata("Morning", Index=0, Lcid=1033)]
        Morning = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Afternoon", Index=1, Lcid=1033)]
        Afternoon = 2,
        
        [EnumMember()]
        [OptionSetMetadata("Evening", Index=2, Lcid=1033)]
        Evening = 3,
    }
    
    [DataContract()]
    public enum Contact_PreferredContactMethodCode {
        
        [EnumMember()]
        [OptionSetMetadata("Any", Index=0, Lcid=1033)]
        Any = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Email", Index=1, Lcid=1033)]
        Email = 2,
        
        [EnumMember()]
        [OptionSetMetadata("Phone", Index=2, Lcid=1033)]
        Phone = 3,
        
        [EnumMember()]
        [OptionSetMetadata("Fax", Index=3, Lcid=1033)]
        Fax = 4,
        
        [EnumMember()]
        [OptionSetMetadata("Mail", Index=4, Lcid=1033)]
        Mail = 5,
    }
    
    [DataContract()]
    public enum Contact_ShippingMethodCode {
        
        [EnumMember()]
        [OptionSetMetadata("Default Value", Index=0, Lcid=1033)]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Contact_StatusCode {
        
        [EnumMember()]
        [OptionSetMetadata("Active", Index=0, Lcid=1033)]
        Active = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Inactive", Index=1, Lcid=1033)]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum Contact_TerritoryCode {
        
        [EnumMember()]
        [OptionSetMetadata("Default Value", Index=0, Lcid=1033)]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Contact_msdyn_decisioninfluencetag {
        
        [EnumMember()]
        [OptionSetMetadata("Decision maker", Index=0, Lcid=1033, Color="#32C100")]
        Decisionmaker = 0,
        
        [EnumMember()]
        [OptionSetMetadata("Influencer", Index=1, Lcid=1033, Color="#FFD74B")]
        Influencer = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Blocker", Index=2, Lcid=1033, Color="#FF0000")]
        Blocker = 2,
        
        [EnumMember()]
        [OptionSetMetadata("Unknown", Index=3, Lcid=1033, Color="#E1DFDD")]
        Unknown = 3,
    }
    
    [DataContract()]
    public enum Contact_msdyn_orgchangestatus {
        
        [EnumMember()]
        [OptionSetMetadata("No Feedback", Index=0, Lcid=1033, Color="#0000ff")]
        NoFeedback = 0,
        
        [EnumMember()]
        [OptionSetMetadata("Not at Company", Index=1, Lcid=1033, Color="#0000ff")]
        NotatCompany = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Ignore", Index=2, Lcid=1033, Color="#0000ff")]
        Ignore = 2,
    }
    
    [DataContract()]
    public enum DuplicateRuleState {
        
        [EnumMember()]
        [OptionSetMetadata("Inactive", Index=0, Lcid=1033)]
        Inactive = 0,
        
        [EnumMember()]
        [OptionSetMetadata("Active", Index=1, Lcid=1033)]
        Active = 1,
    }
    
    [DataContract()]
    public enum DuplicateRule_BaseEntityTypeCode {
        
        [EnumMember()]
        [OptionSetMetadata("Account", Index=902, Lcid=1033, Description="Business that represents a customer or potential customer. The company that is bi" +
            "lled in business transactions.")]
        Account = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Contact", Index=936, Lcid=1033, Description="Person with whom a business unit has a relationship, such as customer, supplier, " +
            "and colleague.")]
        Contact = 2,
        
        [EnumMember()]
        [OptionSetMetadata("Opportunity", Index=572, Lcid=1033, Description="Potential revenue-generating event, or sale to an account, which needs to be trac" +
            "ked through a sales process to completion.")]
        Opportunity = 3,
        
        [EnumMember()]
        [OptionSetMetadata("Lead", Index=765, Lcid=1033, Description="Prospect or potential sales opportunity. Leads are converted into accounts, conta" +
            "cts, or opportunities when they are qualified. Otherwise, they are deleted or ar" +
            "chived.")]
        Lead = 4,
        
        [EnumMember()]
        [OptionSetMetadata("Note", Index=916, Lcid=1033, Description="Note that is attached to one or more objects, including other notes.")]
        Note = 5,
        
        [EnumMember()]
        [OptionSetMetadata("Business Unit Map", Index=972, Lcid=1033, Description="Stores mapping attributes for business units.")]
        BusinessUnitMap = 6,
        
        [EnumMember()]
        [OptionSetMetadata("Owner", Index=517, Lcid=1033, Description="Group of undeleted system users and undeleted teams. Owners can be used to contro" +
            "l access to specific objects.")]
        Owner = 7,
        
        [EnumMember()]
        [OptionSetMetadata("User", Index=473, Lcid=1033, Description="Person with access to the Microsoft CRM system and who owns objects in the Micros" +
            "oft CRM database.")]
        User = 8,
        
        [EnumMember()]
        [OptionSetMetadata("Team", Index=499, Lcid=1033, Description="Collection of system users that routinely collaborate. Teams can be used to simpl" +
            "ify record sharing and provide team members with common access to organization d" +
            "ata when team members belong to different Business Units.")]
        Team = 9,
        
        [EnumMember()]
        [OptionSetMetadata("Business Unit", Index=974, Lcid=1033, Description="Business, division, or department in the Microsoft Dynamics 365 database.")]
        BusinessUnit = 10,
        
        [EnumMember()]
        [OptionSetMetadata("System User Principal", Index=471, Lcid=1033, Description="For internal use only.")]
        SystemUserPrincipal = 14,
        
        [EnumMember()]
        [OptionSetMetadata("AccountLeads", Index=900, Lcid=1033, Description="description.")]
        AccountLeads = 16,
        
        [EnumMember()]
        [OptionSetMetadata("ContactInvoices", Index=965, Lcid=1033)]
        ContactInvoices = 17,
        
        [EnumMember()]
        [OptionSetMetadata("ContactQuotes", Index=962, Lcid=1033)]
        ContactQuotes = 18,
        
        [EnumMember()]
        [OptionSetMetadata("ContactOrders", Index=964, Lcid=1033)]
        ContactOrders = 19,
        
        [EnumMember()]
        [OptionSetMetadata("Service Contract Contact", Index=411, Lcid=1033, Description="Item in a Service contract.")]
        ServiceContractContact = 20,
        
        [EnumMember()]
        [OptionSetMetadata("ProductSalesLiterature", Index=668, Lcid=1033)]
        ProductSalesLiterature = 21,
        
        [EnumMember()]
        [OptionSetMetadata("ContactLeads", Index=966, Lcid=1033)]
        ContactLeads = 22,
        
        [EnumMember()]
        [OptionSetMetadata("LeadCompetitors", Index=761, Lcid=1033)]
        LeadCompetitors = 24,
        
        [EnumMember()]
        [OptionSetMetadata("OpportunityCompetitors", Index=571, Lcid=1033)]
        OpportunityCompetitors = 25,
        
        [EnumMember()]
        [OptionSetMetadata("CompetitorSalesLiterature", Index=946, Lcid=1033)]
        CompetitorSalesLiterature = 26,
        
        [EnumMember()]
        [OptionSetMetadata("LeadProduct", Index=762, Lcid=1033)]
        LeadProduct = 27,
        
        [EnumMember()]
        [OptionSetMetadata("Subscription", Index=367, Lcid=1033, Description="For internal use only.")]
        Subscription = 29,
        
        [EnumMember()]
        [OptionSetMetadata("Filter Template", Index=706, Lcid=1033, Description="Template for a filter.")]
        FilterTemplate = 30,
        
        [EnumMember()]
        [OptionSetMetadata("Privilege Object Type Code", Index=636, Lcid=1033, Description="For internal use only.")]
        PrivilegeObjectTypeCode = 31,
        
        [EnumMember()]
        [OptionSetMetadata("Sales Process Instance", Index=397, Lcid=1033, Description="Instance of a sales process.")]
        SalesProcessInstance = 32,
        
        [EnumMember()]
        [OptionSetMetadata("Subscription Synchronization Information", Index=480, Lcid=1033, Description="For internal use only.")]
        SubscriptionSynchronizationInformation = 33,
        
        [EnumMember()]
        [OptionSetMetadata("Tracking information for deleted entities", Index=478, Lcid=1033, Description="For internal use only.")]
        Trackinginformationfordeletedentities = 35,
        
        [EnumMember()]
        [OptionSetMetadata("Client update", Index=945, Lcid=1033, Description="Microsoft Dynamics 365 client for Outlook offline database update.")]
        Clientupdate = 36,
        
        [EnumMember()]
        [OptionSetMetadata("Subscription Manually Tracked Object", Index=366, Lcid=1033, Description="For internal use only.")]
        SubscriptionManuallyTrackedObject = 37,
        
        [EnumMember()]
        [OptionSetMetadata("SystemUser BusinessUnit Entity Map", Index=472, Lcid=1033, Description="Stores mapping attributes for business units.")]
        SystemUserBusinessUnitEntityMap = 42,
        
        [EnumMember()]
        [OptionSetMetadata("Field Sharing", Index=650, Lcid=1033, Description="Defines CRM security principals (users and teams) access rights to secured field " +
            "for an entity instance.")]
        FieldSharing = 44,
        
        [EnumMember()]
        [OptionSetMetadata("Subscription Statistic Offline", Index=364, Lcid=1033, Description="Subscription Statistic Offline")]
        SubscriptionStatisticOffline = 45,
        
        [EnumMember()]
        [OptionSetMetadata("Subscription Statistic Outlook", Index=365, Lcid=1033, Description="Subscription Statistic Outlook")]
        SubscriptionStatisticOutlook = 46,
        
        [EnumMember()]
        [OptionSetMetadata("Subscription Sync Entry Offline", Index=422, Lcid=1033, Description="Used for offline sync, internal use only.")]
        SubscriptionSyncEntryOffline = 47,
        
        [EnumMember()]
        [OptionSetMetadata("Subscription Sync Entry Outlook", Index=479, Lcid=1033, Description="Used for outlook sync, internal use only.")]
        SubscriptionSyncEntryOutlook = 48,
        
        [EnumMember()]
        [OptionSetMetadata("Position", Index=546, Lcid=1033, Description="Position of a user in the hierarchy")]
        Position = 50,
        
        [EnumMember()]
        [OptionSetMetadata("System User Manager Map", Index=470, Lcid=1033, Description="For internal use only.")]
        SystemUserManagerMap = 51,
        
        [EnumMember()]
        [OptionSetMetadata("User Search Facet", Index=459, Lcid=1033)]
        UserSearchFacet = 52,
        
        [EnumMember()]
        [OptionSetMetadata("Global Search Configuration", Index=803, Lcid=1033)]
        GlobalSearchConfiguration = 54,
        
        [EnumMember()]
        [OptionSetMetadata("FileAttachment", Index=705, Lcid=1033, Description="File Attachment")]
        FileAttachment = 55,
        
        [EnumMember()]
        [OptionSetMetadata("SystemUserAuthorizationChangeTracker", Index=474, Lcid=1033, Description="Internal authorization table to track user authorization changes")]
        SystemUserAuthorizationChangeTracker = 60,
        
        [EnumMember()]
        [OptionSetMetadata("PrincipalEntityBusinessUnitMap", Index=652, Lcid=1033, Description="Internal authorization table to track user authorization changes")]
        PrincipalEntityBusinessUnitMap = 61,
        
        [EnumMember()]
        [OptionSetMetadata("Record Filter", Index=607, Lcid=1033, Description="Record Access Filter")]
        RecordFilter = 72,
        
        [EnumMember()]
        [OptionSetMetadata("EntityRecordFilter", Index=684, Lcid=1033, Description="RecordFilter Object Type Codes")]
        EntityRecordFilter = 73,
        
        [EnumMember()]
        [OptionSetMetadata("Secured Masking Rule", Index=784, Lcid=1033, Description="Secured Masking Rules to apply to fields.")]
        SecuredMaskingRule = 74,
        
        [EnumMember()]
        [OptionSetMetadata("Privilege Checker Run", Index=638, Lcid=1033, Description="Entity to keep track of privilege checker tool runs. Parent entity of privilege c" +
            "hecker log.")]
        PrivilegeCheckerRun = 75,
        
        [EnumMember()]
        [OptionSetMetadata("Privilege Checker Log", Index=637, Lcid=1033, Description="Holds information about privilege checks for the user who started (created) a pri" +
            "vilege checker tool run (Privilege Checker Run\'s child entity)")]
        PrivilegeCheckerLog = 76,
        
        [EnumMember()]
        [OptionSetMetadata("Virtual Entity Data Provider", Index=686, Lcid=1033, Description="Developers can register plug-ins on a data provider to enable data access for vir" +
            "tual entities in the system.")]
        VirtualEntityDataProvider = 78,
        
        [EnumMember()]
        [OptionSetMetadata("Virtual Entity Data Source", Index=679, Lcid=1033, Description="Internal entity that stores data source information for all installed providers.")]
        VirtualEntityDataSource = 85,
        
        [EnumMember()]
        [OptionSetMetadata("Team template", Index=506, Lcid=1033, Description="Team template for an entity enabled for automatically created access teams.")]
        Teamtemplate = 92,
        
        [EnumMember()]
        [OptionSetMetadata("Social Profile", Index=346, Lcid=1033, Description="This entity is used to store social profile information of its associated account" +
            " and contacts on different social channels.")]
        SocialProfile = 99,
        
        [EnumMember()]
        [OptionSetMetadata("Service Plan", Index=405, Lcid=1033, Description="Service Plan")]
        ServicePlan = 101,
        
        [EnumMember()]
        [OptionSetMetadata("Privileges Removal Setting", Index=634, Lcid=1033, Description="Privileges Removal Setting")]
        PrivilegesRemovalSetting = 103,
        
        [EnumMember()]
        [OptionSetMetadata("Case", Index=840, Lcid=1033, Description="Service request case associated with a contract.")]
        Case = 112,
        
        [EnumMember()]
        [OptionSetMetadata("Child Incident Count", Index=944, Lcid=1033, Description="For internal use only.")]
        ChildIncidentCount = 113,
        
        [EnumMember()]
        [OptionSetMetadata("Competitor", Index=949, Lcid=1033, Description="Business competing for the sale represented by a lead or opportunity.")]
        Competitor = 123,
        
        [EnumMember()]
        [OptionSetMetadata("Indexed Article", Index=724, Lcid=1033, Description="Article indexed for search purposes.")]
        IndexedArticle = 126,
        
        [EnumMember()]
        [OptionSetMetadata("Article", Index=775, Lcid=1033, Description="Structured content that is part of the knowledge base.")]
        Article = 127,
        
        [EnumMember()]
        [OptionSetMetadata("Subject", Index=360, Lcid=1033, Description="Information regarding subjects available in the system.")]
        Subject = 129,
        
        [EnumMember()]
        [OptionSetMetadata("Announcement", Index=973, Lcid=1033, Description="Announcement associated with an organization.")]
        Announcement = 132,
        
        [EnumMember()]
        [OptionSetMetadata("Activity Party", Index=897, Lcid=1033, Description="Person or group associated with an activity. An activity can have multiple activi" +
            "ty parties.")]
        ActivityParty = 135,
        
        [EnumMember()]
        [OptionSetMetadata("User Settings", Index=457, Lcid=1033, Description="User\'s preferred settings.")]
        UserSettings_2 = 150,
        
        [EnumMember()]
        [OptionSetMetadata("Canvas App", Index=1004, Lcid=1033, Description="An application built through a canvas-based editing experience.")]
        CanvasApp = 300,
        
        [EnumMember()]
        [OptionSetMetadata("Callback Registration", Index=979, Lcid=1033, Description="Callback Registration that stores configuration.")]
        CallbackRegistration = 301,
        
        [EnumMember()]
        [OptionSetMetadata("Connector", Index=937, Lcid=1033, Description="Connector Entity to support Solutioning Integration")]
        Connector = 372,
        
        [EnumMember()]
        [OptionSetMetadata("Connection Instance", Index=930, Lcid=1033, Description="")]
        ConnectionInstance = 373,
        
        [EnumMember()]
        [OptionSetMetadata("Environment Variable Definition", Index=683, Lcid=1033, Description="Contains information about the settable variable: its type, default value, and et" +
            "c.")]
        EnvironmentVariableDefinition = 380,
        
        [EnumMember()]
        [OptionSetMetadata("Environment Variable Value", Index=681, Lcid=1033, Description="Holds the value for the associated EnvironmentVariableDefinition entity.")]
        EnvironmentVariableValue = 381,
        
        [EnumMember()]
        [OptionSetMetadata("AI Template", Index=1202, Lcid=1033, Description="")]
        AITemplate = 400,
        
        [EnumMember()]
        [OptionSetMetadata("AI Model", Index=1197, Lcid=1033, Description="")]
        AIModel = 401,
        
        [EnumMember()]
        [OptionSetMetadata("AI Configuration", Index=1255, Lcid=1033, Description="")]
        AIConfiguration = 402,
        
        [EnumMember()]
        [OptionSetMetadata("Dataflow", Index=1064, Lcid=1033, Description="")]
        Dataflow = 418,
        
        [EnumMember()]
        [OptionSetMetadata("Entity Analytics Config", Index=693, Lcid=1033, Description="This entity contains information about which entities are enabled for Azure Data " +
            "Lake Services integration")]
        EntityAnalyticsConfig = 430,
        
        [EnumMember()]
        [OptionSetMetadata("Image Attribute Configuration", Index=877, Lcid=1033, Description="Store configuration for each image attribute")]
        ImageAttributeConfiguration = 431,
        
        [EnumMember()]
        [OptionSetMetadata("Entity Image Configuration", Index=680, Lcid=1033, Description="Store image configuration for each entity")]
        EntityImageConfiguration = 432,
        
        [EnumMember()]
        [OptionSetMetadata("New Process", Index=588, Lcid=1033, Description="New Process Business Process Flow")]
        NewProcess = 950,
        
        [EnumMember()]
        [OptionSetMetadata("Translation Process", Index=441, Lcid=1033, Description="Translation Process Business Process Flow")]
        TranslationProcess = 951,
        
        [EnumMember()]
        [OptionSetMetadata("Phone To Case Process", Index=514, Lcid=1033, Description="Phone To Case Process Business Process Flow")]
        PhoneToCaseProcess = 952,
        
        [EnumMember()]
        [OptionSetMetadata("Opportunity Sales Process", Index=579, Lcid=1033, Description="Opportunity Sales Process Business Process Flow")]
        OpportunitySalesProcess = 953,
        
        [EnumMember()]
        [OptionSetMetadata("Lead To Opportunity Sales Process", Index=769, Lcid=1033, Description="Lead To Opportunity Sales Process Business Process Flow")]
        LeadToOpportunitySalesProcess = 954,
        
        [EnumMember()]
        [OptionSetMetadata("Expired Process", Index=708, Lcid=1033, Description="Expired Process Business Process Flow")]
        ExpiredProcess = 955,
        
        [EnumMember()]
        [OptionSetMetadata("Attachment", Index=903, Lcid=1033, Description="MIME attachment for an activity.")]
        Attachment_2 = 1001,
        
        [EnumMember()]
        [OptionSetMetadata("Attachment", Index=881, Lcid=1033, Description="Attachment for an email activity.")]
        Attachment = 1002,
        
        [EnumMember()]
        [OptionSetMetadata("Internal Address", Index=824, Lcid=1033, Description="Storage of addresses for a user, business unit, or site.")]
        InternalAddress = 1003,
        
        [EnumMember()]
        [OptionSetMetadata("Competitor Address", Index=950, Lcid=1033, Description="Additional addresses for a competitor. The first two addresses are stored in the " +
            "competitor object.")]
        CompetitorAddress = 1004,
        
        [EnumMember()]
        [OptionSetMetadata("Competitor Product", Index=948, Lcid=1033, Description="Association between a competitor and a product offered by the competitor.")]
        CompetitorProduct = 1006,
        
        [EnumMember()]
        [OptionSetMetadata("Image Descriptor", Index=838, Lcid=1033, Description="For internal use only.")]
        ImageDescriptor = 1007,
        
        [EnumMember()]
        [OptionSetMetadata("Contract", Index=963, Lcid=1033, Description="Agreement to provide customer service during a specified amount of time or number" +
            " of cases.")]
        Contract = 1010,
        
        [EnumMember()]
        [OptionSetMetadata("Contract Line", Index=970, Lcid=1033, Description="Line item in a contract that specifies the type of service a customer is entitled" +
            " to.")]
        ContractLine = 1011,
        
        [EnumMember()]
        [OptionSetMetadata("Discount", Index=726, Lcid=1033, Description="Price reduction made from the list price of a product or service based on the qua" +
            "ntity purchased.")]
        Discount = 1013,
        
        [EnumMember()]
        [OptionSetMetadata("Article Template", Index=774, Lcid=1033, Description="Template for a knowledge base article that contains the standard attributes of an" +
            " article.")]
        ArticleTemplate = 1016,
        
        [EnumMember()]
        [OptionSetMetadata("Lead Address", Index=763, Lcid=1033, Description="Address information for a lead.")]
        LeadAddress = 1017,
        
        [EnumMember()]
        [OptionSetMetadata("Organization", Index=576, Lcid=1033, Description="Top level of the Microsoft Dynamics 365 business hierarchy. The organization can " +
            "be a specific business, holding company, or corporation.")]
        Organization = 1019,
        
        [EnumMember()]
        [OptionSetMetadata("Organization UI", Index=525, Lcid=1033, Description="Entity customizations including form layout and icons. Includes current and past " +
            "versions.")]
        OrganizationUI = 1021,
        
        [EnumMember()]
        [OptionSetMetadata("Price List", Index=654, Lcid=1033, Description="Entity that defines pricing levels.")]
        PriceList = 1022,
        
        [EnumMember()]
        [OptionSetMetadata("Privilege", Index=644, Lcid=1033, Description="Permission to perform an action in Microsoft CRM. The platform checks for the pri" +
            "vilege and rejects the attempt if the user does not hold the privilege.")]
        Privilege = 1023,
        
        [EnumMember()]
        [OptionSetMetadata("Product", Index=640, Lcid=1033, Description="Information about products and their pricing information.")]
        Product = 1024,
        
        [EnumMember()]
        [OptionSetMetadata("Product Association", Index=669, Lcid=1033, Description="Instance of a product added to a bundle or kit.")]
        ProductAssociation = 1025,
        
        [EnumMember()]
        [OptionSetMetadata("Price List Item", Index=670, Lcid=1033, Description="Information about how to price a product in the specified price level, including " +
            "pricing method, rounding option, and discount type based on a specified product " +
            "unit.")]
        PriceListItem = 1026,
        
        [EnumMember()]
        [OptionSetMetadata("Product Relationship", Index=666, Lcid=1033, Description="Information about the selling relationship between two products, including the re" +
            "lationship type, such as up-sell, cross-sell, substitute, or accessory.")]
        ProductRelationship = 1028,
        
        [EnumMember()]
        [OptionSetMetadata("System Form", Index=466, Lcid=1033, Description="Organization-owned entity customizations including form layout and dashboards.")]
        SystemForm = 1030,
        
        [EnumMember()]
        [OptionSetMetadata("User Dashboard", Index=431, Lcid=1033, Description="User-owned dashboards.")]
        UserDashboard = 1031,
        
        [EnumMember()]
        [OptionSetMetadata("Security Role", Index=622, Lcid=1033, Description="Grouping of security privileges. Users are assigned roles that authorize their ac" +
            "cess to the Microsoft CRM system.")]
        SecurityRole = 1036,
        
        [EnumMember()]
        [OptionSetMetadata("Role Template", Index=618, Lcid=1033, Description="Template for a role. Defines initial attributes that will be used when creating a" +
            " new role.")]
        RoleTemplate = 1037,
        
        [EnumMember()]
        [OptionSetMetadata("Sales Literature", Index=399, Lcid=1033, Description="Storage of sales literature, which may contain one or more documents.")]
        SalesLiterature = 1038,
        
        [EnumMember()]
        [OptionSetMetadata("View", Index=383, Lcid=1033, Description="Saved query against the database.")]
        View = 1039,
        
        [EnumMember()]
        [OptionSetMetadata("String Map", Index=359, Lcid=1033, Description="Mapping between strings.")]
        StringMap = 1043,
        
        [EnumMember()]
        [OptionSetMetadata("Property", Index=749, Lcid=1033, Description="Information about a product property.")]
        Property = 1048,
        
        [EnumMember()]
        [OptionSetMetadata("Property Option Set Item", Index=741, Lcid=1033, Description="Item with a name and value in a property option set type.")]
        PropertyOptionSetItem = 1049,
        
        [EnumMember()]
        [OptionSetMetadata("Unit", Index=433, Lcid=1033, Description="Unit of measure.")]
        Unit = 1055,
        
        [EnumMember()]
        [OptionSetMetadata("Unit Group", Index=426, Lcid=1033, Description="Grouping of units.")]
        UnitGroup = 1056,
        
        [EnumMember()]
        [OptionSetMetadata("Sales Attachment", Index=400, Lcid=1033, Description="Item in the sales literature collection.")]
        SalesAttachment = 1070,
        
        [EnumMember()]
        [OptionSetMetadata("Address", Index=957, Lcid=1033, Description="Address and shipping information. Used to store additional addresses for an accou" +
            "nt or contact.")]
        Address = 1071,
        
        [EnumMember()]
        [OptionSetMetadata("Subscription Clients", Index=368, Lcid=1033, Description="For internal use only.")]
        SubscriptionClients = 1072,
        
        [EnumMember()]
        [OptionSetMetadata("Status Map", Index=361, Lcid=1033, Description="Mapping between statuses.")]
        StatusMap = 1075,
        
        [EnumMember()]
        [OptionSetMetadata("Discount List", Index=727, Lcid=1033, Description="Type of discount specified as either a percentage or an amount.")]
        DiscountList = 1080,
        
        [EnumMember()]
        [OptionSetMetadata("Article Comment", Index=776, Lcid=1033, Description="Comment on a knowledge base article.")]
        ArticleComment = 1082,
        
        [EnumMember()]
        [OptionSetMetadata("Opportunity Product", Index=578, Lcid=1033, Description="Association between an opportunity and a product.")]
        OpportunityProduct = 1083,
        
        [EnumMember()]
        [OptionSetMetadata("Quote", Index=659, Lcid=1033, Description="Formal offer for products and/or services, proposed at specific prices and relate" +
            "d payment terms, which is sent to a prospective customer.")]
        Quote = 1084,
        
        [EnumMember()]
        [OptionSetMetadata("Quote Product", Index=655, Lcid=1033, Description="Product line item in a quote. The details include such information as product ID," +
            " description, quantity, and cost.")]
        QuoteProduct = 1085,
        
        [EnumMember()]
        [OptionSetMetadata("User Fiscal Calendar", Index=424, Lcid=1033, Description="Custom fiscal calendar used for tracking sales quotas.")]
        UserFiscalCalendar = 1086,
        
        [EnumMember()]
        [OptionSetMetadata("Order", Index=398, Lcid=1033, Description="Quote that has been accepted.")]
        Order = 1088,
        
        [EnumMember()]
        [OptionSetMetadata("Order Product", Index=396, Lcid=1033, Description="Line item in a sales order.")]
        OrderProduct = 1089,
        
        [EnumMember()]
        [OptionSetMetadata("Invoice", Index=831, Lcid=1033, Description="Order that has been billed.")]
        Invoice_2 = 1090,
        
        [EnumMember()]
        [OptionSetMetadata("Invoice Product", Index=829, Lcid=1033, Description="Line item in an invoice containing detailed billing information for a product.")]
        InvoiceProduct = 1091,
        
        [EnumMember()]
        [OptionSetMetadata("Authorization Server", Index=882, Lcid=1033, Description="Authorization servers that trust this organization")]
        AuthorizationServer = 1094,
        
        [EnumMember()]
        [OptionSetMetadata("Partner Application", Index=507, Lcid=1033, Description="Partner applications registered for this organization")]
        PartnerApplication = 1095,
        
        [EnumMember()]
        [OptionSetMetadata("System Chart", Index=384, Lcid=1033, Description="System chart attached to an entity.")]
        SystemChart = 1111,
        
        [EnumMember()]
        [OptionSetMetadata("User Chart", Index=429, Lcid=1033, Description="Chart attached to an entity.")]
        UserChart = 1112,
        
        [EnumMember()]
        [OptionSetMetadata("Ribbon Tab To Command Mapping", Index=621, Lcid=1033, Description="A mapping between Tab Ids, and the Commands within those tabs.")]
        RibbonTabToCommandMapping = 1113,
        
        [EnumMember()]
        [OptionSetMetadata("Ribbon Context Group", Index=616, Lcid=1033, Description="Groupings of contextual tabs.")]
        RibbonContextGroup = 1115,
        
        [EnumMember()]
        [OptionSetMetadata("Ribbon Command", Index=623, Lcid=1033, Description="Ribbon Commands - the command definition, rules, etc.")]
        RibbonCommand = 1116,
        
        [EnumMember()]
        [OptionSetMetadata("Ribbon Rule", Index=614, Lcid=1033, Description="Ribbon rule definitions, used to enable and disable, show and hide ribbon element" +
            "s.")]
        RibbonRule = 1117,
        
        [EnumMember()]
        [OptionSetMetadata("Application Ribbons", Index=617, Lcid=1033, Description="Ribbon customizations for the application ribbon and entity ribbon templates.")]
        ApplicationRibbons = 1120,
        
        [EnumMember()]
        [OptionSetMetadata("Ribbon Difference", Index=615, Lcid=1033, Description="All layout customizations to be applied to the ribbons, which contain only the di" +
            "fferences from the base ribbon.")]
        RibbonDifference = 1130,
        
        [EnumMember()]
        [OptionSetMetadata("Replication Backlog", Index=609, Lcid=1033, Description="Entity to hold replication backlog tasks. For internal use only.")]
        ReplicationBacklog = 1140,
        
        [EnumMember()]
        [OptionSetMetadata("Characteristic", Index=998, Lcid=1033, Description="Skills, education and certifications of resources.")]
        Characteristic = 1141,
        
        [EnumMember()]
        [OptionSetMetadata("Rating Value", Index=663, Lcid=1033, Description="A unique value associated with a rating model that allows providing a user friend" +
            "ly rating value.")]
        RatingValue = 1142,
        
        [EnumMember()]
        [OptionSetMetadata("Rating Model", Index=656, Lcid=1033, Description="Represents a model to evaluate skills or other related entities.")]
        RatingModel = 1144,
        
        [EnumMember()]
        [OptionSetMetadata("Bookable Resource Booking", Index=866, Lcid=1033, Description="Represents the line details of a resource booking.")]
        BookableResourceBooking = 1145,
        
        [EnumMember()]
        [OptionSetMetadata("Bookable Resource Booking Header", Index=874, Lcid=1033, Description="Reservation entity representing the summary of the associated resource bookings.")]
        BookableResourceBookingHeader = 1146,
        
        [EnumMember()]
        [OptionSetMetadata("Bookable Resource Category", Index=875, Lcid=1033, Description="Categorize resources that have capacity into categories such as roles.")]
        BookableResourceCategory = 1147,
        
        [EnumMember()]
        [OptionSetMetadata("Bookable Resource Characteristic", Index=871, Lcid=1033, Description="Associates resources with their characteristics and specifies the proficiency lev" +
            "el of a resource for that characteristic.")]
        BookableResourceCharacteristic = 1148,
        
        [EnumMember()]
        [OptionSetMetadata("Bookable Resource Category Assn", Index=873, Lcid=1033, Description="Association entity to model the categorization of resources.")]
        BookableResourceCategoryAssn = 1149,
        
        [EnumMember()]
        [OptionSetMetadata("Bookable Resource", Index=868, Lcid=1033, Description="Resource that has capacity which can be allocated to work.")]
        BookableResource = 1150,
        
        [EnumMember()]
        [OptionSetMetadata("Bookable Resource Group", Index=872, Lcid=1033, Description="Associates resources with resource groups that they are a member of.")]
        BookableResourceGroup = 1151,
        
        [EnumMember()]
        [OptionSetMetadata("Booking Status", Index=929, Lcid=1033, Description="Allows creation of multiple sub statuses mapped to a booking status option.")]
        BookingStatus = 1152,
        
        [EnumMember()]
        [OptionSetMetadata("Document Suggestions", Index=662, Lcid=1033, Description="Document Suggestions")]
        DocumentSuggestions = 1189,
        
        [EnumMember()]
        [OptionSetMetadata("SuggestionCardTemplate", Index=476, Lcid=1033, Description="Templates for Suggestion Card in Grid")]
        SuggestionCardTemplate = 1190,
        
        [EnumMember()]
        [OptionSetMetadata("Field Security Profile", Index=698, Lcid=1033, Description="Profile which defines access level for secured attributes")]
        FieldSecurityProfile = 1200,
        
        [EnumMember()]
        [OptionSetMetadata("Field Permission", Index=697, Lcid=1033, Description="Group of privileges used to categorize users to provide appropriate access to sec" +
            "ured columns.")]
        FieldPermission = 1201,
        
        [EnumMember()]
        [OptionSetMetadata("Team Profiles", Index=498, Lcid=1033, Description="Team Profiles")]
        TeamProfiles = 1203,
        
        [EnumMember()]
        [OptionSetMetadata("Application", Index=857, Lcid=1033, Description="Application")]
        Application = 1204,
        
        [EnumMember()]
        [OptionSetMetadata("Channel Property Group", Index=1000, Lcid=1033, Description="Group or collection of channel properties provided by the external channel for a " +
            "Microsoft Dynamics 365 activity.")]
        ChannelPropertyGroup = 1234,
        
        [EnumMember()]
        [OptionSetMetadata("Property Association", Index=742, Lcid=1033, Description="Association of a property definition with another entity in the system.")]
        PropertyAssociation = 1235,
        
        [EnumMember()]
        [OptionSetMetadata("Channel Property", Index=1002, Lcid=1033, Description="Instance of a channel property containing its name and corresponding data type.")]
        ChannelProperty = 1236,
        
        [EnumMember()]
        [OptionSetMetadata("SocialInsightsConfiguration", Index=339, Lcid=1033, Description="Configuration for the social insights.")]
        SocialInsightsConfiguration = 1300,
        
        [EnumMember()]
        [OptionSetMetadata("Saved Organization Insights Configuration", Index=390, Lcid=1033, Description="Saved configuration for the organization insights")]
        SavedOrganizationInsightsConfiguration = 1309,
        
        [EnumMember()]
        [OptionSetMetadata("Property Instance", Index=743, Lcid=1033, Description="Instance of a property with its value.")]
        PropertyInstance = 1333,
        
        [EnumMember()]
        [OptionSetMetadata("Sync Attribute Mapping Profile", Index=469, Lcid=1033, Description="Profile which defines sync attribute mapping")]
        SyncAttributeMappingProfile = 1400,
        
        [EnumMember()]
        [OptionSetMetadata("Sync Attribute Mapping", Index=468, Lcid=1033, Description="Group of Sync-Attribute Mappings used to provide Attribute mappings during sync f" +
            "or a particular user")]
        SyncAttributeMapping = 1401,
        
        [EnumMember()]
        [OptionSetMetadata("Team Sync-Attribute Mapping Profiles", Index=505, Lcid=1033, Description="Team Sync-Attribute Mapping Profiles")]
        TeamSyncAttributeMappingProfiles = 1403,
        
        [EnumMember()]
        [OptionSetMetadata("Principal Sync Attribute Map", Index=651, Lcid=1033, Description="Maps security principals (users and teams) to sync attribute mappings.")]
        PrincipalSyncAttributeMap = 1404,
        
        [EnumMember()]
        [OptionSetMetadata("Annual Fiscal Calendar", Index=917, Lcid=1033, Description="Year long fiscal calendar of an organization. A span of time during which the fin" +
            "ancial activities of an organization are calculated.")]
        AnnualFiscalCalendar = 2000,
        
        [EnumMember()]
        [OptionSetMetadata("Semiannual Fiscal Calendar", Index=419, Lcid=1033, Description="Calendar representing the semi-annual span of time during which the financial act" +
            "ivities of an organization are calculated.")]
        SemiannualFiscalCalendar = 2001,
        
        [EnumMember()]
        [OptionSetMetadata("Quarterly Fiscal Calendar", Index=673, Lcid=1033, Description="Quarterly fiscal calendar of an organization. A span of time during which the fin" +
            "ancial activities of an organization are calculated.")]
        QuarterlyFiscalCalendar = 2002,
        
        [EnumMember()]
        [OptionSetMetadata("Monthly Fiscal Calendar", Index=1245, Lcid=1033, Description="Monthly fiscal calendar of an organization. A span of time during which the finan" +
            "cial activities of an organization are calculated.")]
        MonthlyFiscalCalendar = 2003,
        
        [EnumMember()]
        [OptionSetMetadata("Fixed Monthly Fiscal Calendar", Index=704, Lcid=1033, Description="Fixed monthly fiscal calendar of an organization. A span of time during which the" +
            " financial activities of an organization are calculated.")]
        FixedMonthlyFiscalCalendar = 2004,
        
        [EnumMember()]
        [OptionSetMetadata("Email Template", Index=504, Lcid=1033, Description="Template for an email message that contains the standard attributes of an email m" +
            "essage.")]
        EmailTemplate = 2010,
        
        [EnumMember()]
        [OptionSetMetadata("Contract Template", Index=971, Lcid=1033, Description="Template for a contract containing the standard attributes of a contract.")]
        ContractTemplate = 2011,
        
        [EnumMember()]
        [OptionSetMetadata("Unresolved Address", Index=439, Lcid=1033, Description="For internal use only.")]
        UnresolvedAddress = 2012,
        
        [EnumMember()]
        [OptionSetMetadata("Territory", Index=502, Lcid=1033, Description="Territory represents sales regions.")]
        Territory = 2013,
        
        [EnumMember()]
        [OptionSetMetadata("Theme", Index=496, Lcid=1033, Description="Information that\'s used to set custom visual theme options for client application" +
            "s.")]
        Theme = 2015,
        
        [EnumMember()]
        [OptionSetMetadata("User Mapping", Index=432, Lcid=1033, Description="User Mapping")]
        UserMapping = 2016,
        
        [EnumMember()]
        [OptionSetMetadata("Queue", Index=671, Lcid=1033, Description="A list of records that require action, such as accounts, activities, and cases.")]
        Queue = 2020,
        
        [EnumMember()]
        [OptionSetMetadata("QueueItemCount", Index=665, Lcid=1033, Description="For internal use only.")]
        QueueItemCount = 2023,
        
        [EnumMember()]
        [OptionSetMetadata("QueueMemberCount", Index=658, Lcid=1033, Description="For internal use only.")]
        QueueMemberCount = 2024,
        
        [EnumMember()]
        [OptionSetMetadata("License", Index=768, Lcid=1033, Description="Stores information about a Microsoft CRM license.")]
        License = 2027,
        
        [EnumMember()]
        [OptionSetMetadata("Queue Item", Index=672, Lcid=1033, Description="A specific item in a queue, such as a case record or an activity record.")]
        QueueItem = 2029,
        
        [EnumMember()]
        [OptionSetMetadata("User Entity UI Settings", Index=423, Lcid=1033, Description="Stores user settings for entity views.")]
        UserEntityUISettings = 2500,
        
        [EnumMember()]
        [OptionSetMetadata("User Entity Instance Data", Index=425, Lcid=1033, Description="Per User item instance data")]
        UserEntityInstanceData = 2501,
        
        [EnumMember()]
        [OptionSetMetadata("Integration Status", Index=828, Lcid=1033, Description="Contains integration status information.")]
        IntegrationStatus = 3000,
        
        [EnumMember()]
        [OptionSetMetadata("Channel Access Profile", Index=993, Lcid=1033, Description="Information about permissions needed to access Dynamics 365 through external chan" +
            "nels.For internal use only")]
        ChannelAccessProfile = 3005,
        
        [EnumMember()]
        [OptionSetMetadata("External Party", Index=717, Lcid=1033, Description="Information about external parties that need to access Dynamics 365 from external" +
            " channels.For internal use only")]
        ExternalParty = 3008,
        
        [EnumMember()]
        [OptionSetMetadata("Connection Role", Index=938, Lcid=1033, Description="Role describing a relationship between a two records.")]
        ConnectionRole = 3231,
        
        [EnumMember()]
        [OptionSetMetadata("Connection Role Object Type Code", Index=939, Lcid=1033, Description="Specifies the entity type that can play specific role in a connection.")]
        ConnectionRoleObjectTypeCode = 3233,
        
        [EnumMember()]
        [OptionSetMetadata("Connection", Index=932, Lcid=1033, Description="Relationship between two entities.")]
        Connection = 3234,
        
        [EnumMember()]
        [OptionSetMetadata("Facility/Equipment", Index=682, Lcid=1033, Description="Resource that can be scheduled.")]
        FacilityEquipment = 4000,
        
        [EnumMember()]
        [OptionSetMetadata("Service", Index=417, Lcid=1033, Description="Activity that represents work done to satisfy a customer\'s need.")]
        Service = 4001,
        
        [EnumMember()]
        [OptionSetMetadata("Resource", Index=600, Lcid=1033, Description="User or facility/equipment that can be scheduled for a service.")]
        Resource = 4002,
        
        [EnumMember()]
        [OptionSetMetadata("Calendar", Index=980, Lcid=1033, Description="Calendar used by the scheduling system to define when an appointment or activity " +
            "is to occur.")]
        Calendar = 4003,
        
        [EnumMember()]
        [OptionSetMetadata("Calendar Rule", Index=981, Lcid=1033, Description="Defines free/busy times for a service and for resources or resource groups, such " +
            "as working, non-working, vacation, and blocked.")]
        CalendarRule = 4004,
        
        [EnumMember()]
        [OptionSetMetadata("Scheduling Group", Index=601, Lcid=1033, Description="Resource group or team whose members can be scheduled for a service.")]
        SchedulingGroup = 4005,
        
        [EnumMember()]
        [OptionSetMetadata("Resource Specification", Index=598, Lcid=1033, Description="Selection rule that allows the scheduling engine to select a number of resources " +
            "from a pool of resources. The rules can be associated with a service.")]
        ResourceSpecification = 4006,
        
        [EnumMember()]
        [OptionSetMetadata("Resource Group", Index=935, Lcid=1033, Description="Group or collection of people, equipment, and/or facilities that can be scheduled" +
            ".")]
        ResourceGroup = 4007,
        
        [EnumMember()]
        [OptionSetMetadata("Site", Index=355, Lcid=1033, Description="Location or branch office where an organization does business. An organization ca" +
            "n have multiple sites.")]
        Site = 4009,
        
        [EnumMember()]
        [OptionSetMetadata("Resource Expansion", Index=597, Lcid=1033, Description="Resource Expansions.")]
        ResourceExpansion = 4010,
        
        [EnumMember()]
        [OptionSetMetadata("Inter Process Lock", Index=832, Lcid=1033, Description="Inter Process Locks.")]
        InterProcessLock = 4011,
        
        [EnumMember()]
        [OptionSetMetadata("Email Hash", Index=747, Lcid=1033, Description="Email activity hashes used for correlation purposes.")]
        EmailHash = 4023,
        
        [EnumMember()]
        [OptionSetMetadata("Display String Map", Index=723, Lcid=1033, Description="Maps customized display strings to entities.")]
        DisplayStringMap = 4101,
        
        [EnumMember()]
        [OptionSetMetadata("Display String", Index=725, Lcid=1033, Description="Customized messages for an entity that has been renamed.")]
        DisplayString = 4102,
        
        [EnumMember()]
        [OptionSetMetadata("Notification", Index=587, Lcid=1033, Description="For internal use only.")]
        Notification = 4110,
        
        [EnumMember()]
        [OptionSetMetadata("Exchange Sync Id Mapping", Index=712, Lcid=1033, Description="The mapping used to keep track of the IDs for items synced between CRM and Exchan" +
            "ge.")]
        ExchangeSyncIdMapping = 4120,
        
        [EnumMember()]
        [OptionSetMetadata("Activity", Index=890, Lcid=1033, Description="Task performed, or to be performed, by a user. An activity is any action for whic" +
            "h an entry can be made on a calendar.")]
        Activity = 4200,
        
        [EnumMember()]
        [OptionSetMetadata("Appointment", Index=853, Lcid=1033, Description="Commitment representing a time interval with start/end times and duration.")]
        Appointment = 4201,
        
        [EnumMember()]
        [OptionSetMetadata("Email", Index=740, Lcid=1033, Description="Activity that is delivered using email protocols.")]
        Email = 4202,
        
        [EnumMember()]
        [OptionSetMetadata("Fax", Index=714, Lcid=1033, Description="Activity that tracks call outcome and number of pages for a fax and optionally st" +
            "ores an electronic copy of the document.")]
        Fax = 4204,
        
        [EnumMember()]
        [OptionSetMetadata("Case Resolution", Index=834, Lcid=1033, Description="Special type of activity that includes description of the resolution, billing sta" +
            "tus, and the duration of the case.")]
        CaseResolution = 4206,
        
        [EnumMember()]
        [OptionSetMetadata("Letter", Index=770, Lcid=1033, Description="Activity that tracks the delivery of a letter. The activity can contain the elect" +
            "ronic copy of the letter.")]
        Letter = 4207,
        
        [EnumMember()]
        [OptionSetMetadata("Opportunity Close", Index=570, Lcid=1033, Description="Activity that is created automatically when an opportunity is closed, containing " +
            "information such as the description of the closing and actual revenue.")]
        OpportunityClose = 4208,
        
        [EnumMember()]
        [OptionSetMetadata("Order Close", Index=575, Lcid=1033, Description="Activity generated automatically when an order is closed.")]
        OrderClose = 4209,
        
        [EnumMember()]
        [OptionSetMetadata("Phone Call", Index=516, Lcid=1033, Description="Activity to track a telephone call.")]
        PhoneCall = 4210,
        
        [EnumMember()]
        [OptionSetMetadata("Quote Close", Index=657, Lcid=1033, Description="Activity generated when a quote is closed.")]
        QuoteClose = 4211,
        
        [EnumMember()]
        [OptionSetMetadata("Task", Index=500, Lcid=1033, Description="Generic activity representing work needed to be done.")]
        Task = 4212,
        
        [EnumMember()]
        [OptionSetMetadata("Service Activity", Index=418, Lcid=1033, Description="Activity offered by the organization to satisfy its customer\'s needs. Each servic" +
            "e activity includes date, time, duration, and required resources.")]
        ServiceActivity = 4214,
        
        [EnumMember()]
        [OptionSetMetadata("Commitment", Index=942, Lcid=1033, Description="For internal use only.")]
        Commitment = 4215,
        
        [EnumMember()]
        [OptionSetMetadata("Social Activity", Index=338, Lcid=1033, Description="For internal use only.")]
        SocialActivity = 4216,
        
        [EnumMember()]
        [OptionSetMetadata("UntrackedEmail", Index=440, Lcid=1033, Description="Activity that is delivered using UntrackedEmail protocols.")]
        UntrackedEmail = 4220,
        
        [EnumMember()]
        [OptionSetMetadata("Saved View", Index=428, Lcid=1033, Description="Saved database query that is owned by a user.")]
        SavedView = 4230,
        
        [EnumMember()]
        [OptionSetMetadata("Metadata Difference", Index=782, Lcid=1033, Description="Metadata Difference")]
        MetadataDifference = 4231,
        
        [EnumMember()]
        [OptionSetMetadata("Business Data Localized Label", Index=975, Lcid=1033, Description="Business Data Localized Label")]
        BusinessDataLocalizedLabel = 4232,
        
        [EnumMember()]
        [OptionSetMetadata("Recurrence Rule", Index=605, Lcid=1033, Description="Recurrence Rule represents the pattern of incidence of recurring entities.")]
        RecurrenceRule = 4250,
        
        [EnumMember()]
        [OptionSetMetadata("Recurring Appointment", Index=603, Lcid=1033, Description="The Master appointment of a recurring appointment series.")]
        RecurringAppointment = 4251,
        
        [EnumMember()]
        [OptionSetMetadata("Email Search", Index=748, Lcid=1033, Description="Email Address Search Table.")]
        EmailSearch = 4299,
        
        [EnumMember()]
        [OptionSetMetadata("Marketing List", Index=766, Lcid=1033, Description="Group of existing or potential customers created for a marketing campaign or othe" +
            "r sales purposes.")]
        MarketingList = 4300,
        
        [EnumMember()]
        [OptionSetMetadata("Marketing List Member", Index=767, Lcid=1033, Description="Item in a marketing list.")]
        MarketingListMember = 4301,
        
        [EnumMember()]
        [OptionSetMetadata("Campaign", Index=977, Lcid=1033, Description="Container for campaign activities and responses, sales literature, products, and " +
            "lists to create, plan, execute, and track the results of a specific marketing ca" +
            "mpaign through its life.")]
        Campaign = 4400,
        
        [EnumMember()]
        [OptionSetMetadata("Campaign Response", Index=1006, Lcid=1033, Description="Response from an existing or a potential new customer for a campaign.")]
        CampaignResponse = 4401,
        
        [EnumMember()]
        [OptionSetMetadata("Campaign Activity", Index=978, Lcid=1033, Description="Task performed, or to be performed, by a user for planning or running a campaign." +
            "")]
        CampaignActivity = 4402,
        
        [EnumMember()]
        [OptionSetMetadata("Campaign Item", Index=1008, Lcid=1033, Description="Work item in a campaign, a list or sales literature.")]
        CampaignItem = 4403,
        
        [EnumMember()]
        [OptionSetMetadata("Campaign Activity Item", Index=1007, Lcid=1033, Description="Work item of a campaign activity, such as a list or sales literature.")]
        CampaignActivityItem = 4404,
        
        [EnumMember()]
        [OptionSetMetadata("Bulk Operation Log", Index=982, Lcid=1033, Description="Log used to track bulk operation execution, successes, and failures.")]
        BulkOperationLog = 4405,
        
        [EnumMember()]
        [OptionSetMetadata("Quick Campaign", Index=989, Lcid=1033, Description="System operation used to perform lengthy and asynchronous operations on large dat" +
            "a sets, such as distributing a campaign activity or quick campaign.")]
        QuickCampaign = 4406,
        
        [EnumMember()]
        [OptionSetMetadata("Data Import", Index=839, Lcid=1033, Description="Status and ownership information for an import job.")]
        DataImport = 4410,
        
        [EnumMember()]
        [OptionSetMetadata("Data Map", Index=842, Lcid=1033, Description="Data map used in import.")]
        DataMap = 4411,
        
        [EnumMember()]
        [OptionSetMetadata("Import Source File", Index=836, Lcid=1033, Description="File name of file used for import.")]
        ImportSourceFile = 4412,
        
        [EnumMember()]
        [OptionSetMetadata("Import Data", Index=837, Lcid=1033, Description="Unprocessed data from imported files.")]
        ImportData = 4413,
        
        [EnumMember()]
        [OptionSetMetadata("Duplicate Detection Rule", Index=752, Lcid=1033, Description="Rule used to identify potential duplicates.")]
        DuplicateDetectionRule = 4414,
        
        [EnumMember()]
        [OptionSetMetadata("Duplicate Record", Index=754, Lcid=1033, Description="Potential duplicate record.")]
        DuplicateRecord = 4415,
        
        [EnumMember()]
        [OptionSetMetadata("Duplicate Rule Condition", Index=750, Lcid=1033, Description="Condition of a duplicate detection rule.")]
        DuplicateRuleCondition = 4416,
        
        [EnumMember()]
        [OptionSetMetadata("Column Mapping", Index=943, Lcid=1033, Description="Mapping for columns in a data map.")]
        ColumnMapping = 4417,
        
        [EnumMember()]
        [OptionSetMetadata("List Value Mapping", Index=512, Lcid=1033, Description="In a data map, maps list values from the source file to Microsoft Dynamics 365.")]
        ListValueMapping = 4418,
        
        [EnumMember()]
        [OptionSetMetadata("Lookup Mapping", Index=795, Lcid=1033, Description="In a data map, maps a lookup attribute in a source file to Microsoft Dynamics 365" +
            ".")]
        LookupMapping = 4419,
        
        [EnumMember()]
        [OptionSetMetadata("Owner Mapping", Index=510, Lcid=1033, Description="In a data map, maps ownership data from the source file to Microsoft Dynamics 365" +
            ".")]
        OwnerMapping = 4420,
        
        [EnumMember()]
        [OptionSetMetadata("Bookable Resource Booking to Exchange Id Mapping", Index=867, Lcid=1033, Description="The mapping used to keep track of the IDs for items synced between Dynamics 365 B" +
            "ookable Resource Booking and Exchange.")]
        BookableResourceBookingtoExchangeIdMapping = 4421,
        
        [EnumMember()]
        [OptionSetMetadata("Import Log", Index=844, Lcid=1033, Description="Failure reason and other detailed information for a record that failed to import." +
            "")]
        ImportLog = 4423,
        
        [EnumMember()]
        [OptionSetMetadata("Bulk Delete Operation", Index=988, Lcid=1033, Description="User-submitted bulk deletion job.")]
        BulkDeleteOperation = 4424,
        
        [EnumMember()]
        [OptionSetMetadata("Bulk Delete Failure", Index=990, Lcid=1033, Description="Record that was not deleted during a bulk deletion job.")]
        BulkDeleteFailure = 4425,
        
        [EnumMember()]
        [OptionSetMetadata("Transformation Mapping", Index=442, Lcid=1033, Description="In a data map, maps the transformation of source attributes to Microsoft Dynamics" +
            " 365 attributes.")]
        TransformationMapping = 4426,
        
        [EnumMember()]
        [OptionSetMetadata("Transformation Parameter Mapping", Index=443, Lcid=1033, Description="In a data map, defines parameters for a transformation.")]
        TransformationParameterMapping = 4427,
        
        [EnumMember()]
        [OptionSetMetadata("Import Entity Mapping", Index=835, Lcid=1033, Description="Mapping for entities in a data map.")]
        ImportEntityMapping = 4428,
        
        [EnumMember()]
        [OptionSetMetadata("Data Performance Dashboard", Index=738, Lcid=1033, Description="Data Performance Dashboard.")]
        DataPerformanceDashboard = 4450,
        
        [EnumMember()]
        [OptionSetMetadata("Office Document", Index=580, Lcid=1033, Description="Used to store Office Documents in database in binary format.")]
        OfficeDocument = 4490,
        
        [EnumMember()]
        [OptionSetMetadata("Relationship Role", Index=610, Lcid=1033, Description="Relationship between an account or contact and an opportunity.")]
        RelationshipRole = 4500,
        
        [EnumMember()]
        [OptionSetMetadata("Relationship Role Map", Index=608, Lcid=1033, Description="Mapping of the primary associated objects between which the relationship role is " +
            "valid.")]
        RelationshipRoleMap = 4501,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Relationship", Index=733, Lcid=1033, Description="Relationship between a customer and a partner in which either can be an account o" +
            "r contact.")]
        CustomerRelationship = 4502,
        
        [EnumMember()]
        [OptionSetMetadata("Opportunity Relationship", Index=732, Lcid=1033, Description="Relationship between an account or contact and an opportunity.")]
        OpportunityRelationship = 4503,
        
        [EnumMember()]
        [OptionSetMetadata("Entitlement Template Product", Index=694, Lcid=1033)]
        EntitlementTemplateProduct = 4545,
        
        [EnumMember()]
        [OptionSetMetadata("Auditing", Index=884, Lcid=1033, Description="Track changes to records for analysis, record keeping, and compliance.")]
        Auditing = 4567,
        
        [EnumMember()]
        [OptionSetMetadata("Ribbon Client Metadata.", Index=630, Lcid=1033, Description="A ribbon client metadata.")]
        RibbonClientMetadata = 4579,
        
        [EnumMember()]
        [OptionSetMetadata("Entity Map", Index=677, Lcid=1033, Description="Represents a mapping between two related entities so that data from one record ca" +
            "n be copied into the form of a new related record.")]
        EntityMap = 4600,
        
        [EnumMember()]
        [OptionSetMetadata("Attribute Map", Index=878, Lcid=1033, Description="Represents a mapping between attributes where the attribute values should be copi" +
            "ed from a record into the form of a new related record.")]
        AttributeMap = 4601,
        
        [EnumMember()]
        [OptionSetMetadata("Plug-in Type", Index=547, Lcid=1033, Description="Type that inherits from the IPlugin interface and is contained within a plug-in a" +
            "ssembly.")]
        PluginType = 4602,
        
        [EnumMember()]
        [OptionSetMetadata("Plug-in Type Statistic", Index=548, Lcid=1033, Description="Plug-in type statistic.")]
        PluginTypeStatistic = 4603,
        
        [EnumMember()]
        [OptionSetMetadata("Plug-in Assembly", Index=541, Lcid=1033, Description="Assembly that contains one or more plug-in types.")]
        PluginAssembly = 4605,
        
        [EnumMember()]
        [OptionSetMetadata("Sdk Message", Index=382, Lcid=1033, Description="Message that is supported by the SDK.")]
        SdkMessage = 4606,
        
        [EnumMember()]
        [OptionSetMetadata("Sdk Message Filter", Index=380, Lcid=1033, Description="Filter that defines which SDK messages are valid for each type of entity.")]
        SdkMessageFilter = 4607,
        
        [EnumMember()]
        [OptionSetMetadata("Sdk Message Processing Step", Index=388, Lcid=1033, Description="Stage in the execution pipeline that a plug-in is to execute.")]
        SdkMessageProcessingStep = 4608,
        
        [EnumMember()]
        [OptionSetMetadata("Sdk Message Request", Index=385, Lcid=1033, Description="For internal use only.")]
        SdkMessageRequest = 4609,
        
        [EnumMember()]
        [OptionSetMetadata("Sdk Message Response", Index=415, Lcid=1033, Description="For internal use only.")]
        SdkMessageResponse = 4610,
        
        [EnumMember()]
        [OptionSetMetadata("Sdk Message Response Field", Index=416, Lcid=1033, Description="For internal use only.")]
        SdkMessageResponseField = 4611,
        
        [EnumMember()]
        [OptionSetMetadata("Sdk Message Pair", Index=381, Lcid=1033, Description="For internal use only.")]
        SdkMessagePair = 4613,
        
        [EnumMember()]
        [OptionSetMetadata("Sdk Message Request Field", Index=386, Lcid=1033, Description="For internal use only.")]
        SdkMessageRequestField = 4614,
        
        [EnumMember()]
        [OptionSetMetadata("Sdk Message Processing Step Image", Index=389, Lcid=1033, Description="Copy of an entity\'s attributes before or after the core system operation.")]
        SdkMessageProcessingStepImage = 4615,
        
        [EnumMember()]
        [OptionSetMetadata("Sdk Message Processing Step Secure Configuration", Index=387, Lcid=1033, Description="Non-public custom configuration that is passed to a plug-in\'s constructor.")]
        SdkMessageProcessingStepSecureConfiguration = 4616,
        
        [EnumMember()]
        [OptionSetMetadata("Service Endpoint", Index=404, Lcid=1033, Description="Service endpoint that can be contacted.")]
        ServiceEndpoint = 4618,
        
        [EnumMember()]
        [OptionSetMetadata("Plug-in Trace Log", Index=540, Lcid=1033, Description="Trace and exception information generated by plug-ins and custom workflow activit" +
            "ies.")]
        PluginTraceLog = 4619,
        
        [EnumMember()]
        [OptionSetMetadata("System Job", Index=880, Lcid=1033, Description="Process whose execution can proceed independently or in the background.")]
        SystemJob = 4700,
        
        [EnumMember()]
        [OptionSetMetadata("Workflow Wait Subscription", Index=444, Lcid=1033, Description="For internal use only.")]
        WorkflowWaitSubscription = 4702,
        
        [EnumMember()]
        [OptionSetMetadata("Process", Index=454, Lcid=1033, Description="Set of logical rules that define the steps necessary to automate a specific busin" +
            "ess process, task, or set of actions to be performed.")]
        Process = 4703,
        
        [EnumMember()]
        [OptionSetMetadata("Process Dependency", Index=448, Lcid=1033, Description="Dependencies for a process.")]
        ProcessDependency = 4704,
        
        [EnumMember()]
        [OptionSetMetadata("ISV Config", Index=830, Lcid=1033, Description="An XML document used to configure client extension controls.")]
        ISVConfig = 4705,
        
        [EnumMember()]
        [OptionSetMetadata("Process Log", Index=446, Lcid=1033, Description="Log used to track process execution.")]
        ProcessLog = 4706,
        
        [EnumMember()]
        [OptionSetMetadata("Application File", Index=864, Lcid=1033, Description="Files used by the application")]
        ApplicationFile = 4707,
        
        [EnumMember()]
        [OptionSetMetadata("Organization Statistic", Index=527, Lcid=1033, Description="Statistics measuring the organization\'s usage of the Microsoft Dynamics 365 syste" +
            "m over the past 24 hours.")]
        OrganizationStatistic = 4708,
        
        [EnumMember()]
        [OptionSetMetadata("Site Map", Index=348, Lcid=1033, Description="XML data used to control the application navigation pane.")]
        SiteMap = 4709,
        
        [EnumMember()]
        [OptionSetMetadata("Process Session", Index=642, Lcid=1033, Description="Information that is generated when a dialog is run. Every time that you run a dia" +
            "log, a dialog session is created.")]
        ProcessSession = 4710,
        
        [EnumMember()]
        [OptionSetMetadata("Expander Event", Index=710, Lcid=1033, Description="For internal use only. An event that will be expanded into jobs whose executions " +
            "can proceed in the background.")]
        ExpanderEvent = 4711,
        
        [EnumMember()]
        [OptionSetMetadata("Process Trigger", Index=639, Lcid=1033, Description="Trigger that invoke a rule.")]
        ProcessTrigger = 4712,
        
        [EnumMember()]
        [OptionSetMetadata("Flow Session", Index=821, Lcid=1033, Description="Entity to store the information that is generated when a Power Automate Desktop f" +
            "low runs.")]
        FlowSession = 4720,
        
        [EnumMember()]
        [OptionSetMetadata("Process Stage", Index=643, Lcid=1033, Description="Stage associated with a process.")]
        ProcessStage = 4724,
        
        [EnumMember()]
        [OptionSetMetadata("Business Process Flow Instance", Index=976, Lcid=1033, Description="Active path associated with every Business Process Flow instance")]
        BusinessProcessFlowInstance = 4725,
        
        [EnumMember()]
        [OptionSetMetadata("Web Wizard", Index=462, Lcid=1033, Description="Definition for a Web-based wizard.")]
        WebWizard = 4800,
        
        [EnumMember()]
        [OptionSetMetadata("Wizard Page", Index=461, Lcid=1033, Description="Page in a Web-based wizard.")]
        WizardPage = 4802,
        
        [EnumMember()]
        [OptionSetMetadata("Web Wizard Access Privilege", Index=460, Lcid=1033, Description="Privilege needed to access a Web-based wizard.")]
        WebWizardAccessPrivilege = 4803,
        
        [EnumMember()]
        [OptionSetMetadata("Time Zone Definition", Index=490, Lcid=1033, Description="Time zone definition, including name and time zone code.")]
        TimeZoneDefinition = 4810,
        
        [EnumMember()]
        [OptionSetMetadata("Time Zone Rule", Index=486, Lcid=1033, Description="Definition for time conversion between local time and Coordinated Universal Time " +
            "(UTC) for a particular time zone at a particular time period.")]
        TimeZoneRule = 4811,
        
        [EnumMember()]
        [OptionSetMetadata("Time Zone Localized Name", Index=488, Lcid=1033, Description="Localized name of the time zone.")]
        TimeZoneLocalizedName = 4812,
        
        [EnumMember()]
        [OptionSetMetadata("Recently Used", Index=664, Lcid=1033, Description="Most recently used data table.")]
        RecentlyUsed = 5000,
        
        [EnumMember()]
        [OptionSetMetadata("NL2SQ Registration Information", Index=586, Lcid=1033, Description="Org registration status, AllowedEntity list, and registration error message.")]
        NL2SQRegistrationInformation = 5004,
        
        [EnumMember()]
        [OptionSetMetadata("Event Expander Breadcrumb", Index=711, Lcid=1033, Description="Table to store breadcrumb records of Event Expander pipeline.")]
        EventExpanderBreadcrumb = 5006,
        
        [EnumMember()]
        [OptionSetMetadata("Entitlement Product", Index=688, Lcid=1033)]
        EntitlementProduct = 6363,
        
        [EnumMember()]
        [OptionSetMetadata("System Application Metadata", Index=465, Lcid=1033, Description="For internal use only.")]
        SystemApplicationMetadata = 7000,
        
        [EnumMember()]
        [OptionSetMetadata("User Application Metadata", Index=427, Lcid=1033, Description="For internal use only.")]
        UserApplicationMetadata = 7001,
        
        [EnumMember()]
        [OptionSetMetadata("Solution", Index=347, Lcid=1033, Description="A solution which contains CRM customizations.")]
        Solution = 7100,
        
        [EnumMember()]
        [OptionSetMetadata("Publisher", Index=674, Lcid=1033, Description="A publisher of a CRM solution.")]
        Publisher = 7101,
        
        [EnumMember()]
        [OptionSetMetadata("Publisher Address", Index=675, Lcid=1033, Description="Address and shipping information. Used to store additional addresses for a publis" +
            "her.")]
        PublisherAddress = 7102,
        
        [EnumMember()]
        [OptionSetMetadata("Solution Component", Index=345, Lcid=1033, Description="A component of a CRM solution.")]
        SolutionComponent = 7103,
        
        [EnumMember()]
        [OptionSetMetadata("Solution Component Definition", Index=374, Lcid=1033, Description="Contains all the information required to process a solution aware entity")]
        SolutionComponentDefinition = 7104,
        
        [EnumMember()]
        [OptionSetMetadata("Dependency", Index=721, Lcid=1033, Description="A component dependency in CRM.")]
        Dependency = 7105,
        
        [EnumMember()]
        [OptionSetMetadata("Dependency Node", Index=720, Lcid=1033, Description="The representation of a component dependency node in CRM.")]
        DependencyNode = 7106,
        
        [EnumMember()]
        [OptionSetMetadata("Invalid Dependency", Index=833, Lcid=1033, Description="An invalid dependency in the CRM system.")]
        InvalidDependency = 7107,
        
        [EnumMember()]
        [OptionSetMetadata("Dependency Feature", Index=722, Lcid=1033, Description="A dependency feature.")]
        DependencyFeature = 7108,
        
        [EnumMember()]
        [OptionSetMetadata("RuntimeDependency", Index=392, Lcid=1033, Description="Form Level dependencies in CRM.")]
        RuntimeDependency = 7200,
        
        [EnumMember()]
        [OptionSetMetadata("Entitlement Contact", Index=689, Lcid=1033)]
        EntitlementContact = 7272,
        
        [EnumMember()]
        [OptionSetMetadata("ElasticFileAttachment", Index=739, Lcid=1033, Description="Elastic File Attachment")]
        ElasticFileAttachment = 7755,
        
        [EnumMember()]
        [OptionSetMetadata("Post", Index=544, Lcid=1033, Description="An activity feed post.")]
        Post = 8000,
        
        [EnumMember()]
        [OptionSetMetadata("Post Role", Index=530, Lcid=1033, Description="Represents the objects with which an activity feed post is associated. For intern" +
            "al use only.")]
        PostRole = 8001,
        
        [EnumMember()]
        [OptionSetMetadata("Post Regarding", Index=532, Lcid=1033, Description="Represents which object an activity feed post is regarding. For internal use only" +
            ".")]
        PostRegarding = 8002,
        
        [EnumMember()]
        [OptionSetMetadata("Follow", Index=538, Lcid=1033, Description="Represents a user following the activity feed of an object.")]
        Follow = 8003,
        
        [EnumMember()]
        [OptionSetMetadata("Comment", Index=545, Lcid=1033, Description="A comment on an activity feed post.")]
        Comment = 8005,
        
        [EnumMember()]
        [OptionSetMetadata("Like", Index=531, Lcid=1033, Description="A like on an activity feed post.")]
        Like = 8006,
        
        [EnumMember()]
        [OptionSetMetadata("ACIViewMapper", Index=898, Lcid=1033, Description="Customized messages for an entity that has been renamed.")]
        ACIViewMapper = 8040,
        
        [EnumMember()]
        [OptionSetMetadata("Trace", Index=437, Lcid=1033, Description="A trace log.")]
        Trace = 8050,
        
        [EnumMember()]
        [OptionSetMetadata("Trace Association", Index=492, Lcid=1033, Description="Represents the objects with which a trace record is associated. For internal use " +
            "only.")]
        TraceAssociation = 8051,
        
        [EnumMember()]
        [OptionSetMetadata("Trace Regarding", Index=438, Lcid=1033, Description="Represents which object a trace record is regarding. For internal use only.")]
        TraceRegarding = 8052,
        
        [EnumMember()]
        [OptionSetMetadata("Routing Rule Set", Index=393, Lcid=1033, Description="Define Routing Rule to route cases to right people at the right time")]
        RoutingRuleSet = 8181,
        
        [EnumMember()]
        [OptionSetMetadata("Rule Item", Index=391, Lcid=1033, Description="Please provide the description for entity")]
        RuleItem_2 = 8199,
        
        [EnumMember()]
        [OptionSetMetadata("AppModule Metadata", Index=848, Lcid=1033, Description="For internal use only.")]
        AppModuleMetadata = 8700,
        
        [EnumMember()]
        [OptionSetMetadata("AppModule Metadata Dependency", Index=849, Lcid=1033, Description="For internal use only.")]
        AppModuleMetadataDependency = 8701,
        
        [EnumMember()]
        [OptionSetMetadata("AppModule Metadata Async Operation", Index=847, Lcid=1033, Description="For internal use only.")]
        AppModuleMetadataAsyncOperation = 8702,
        
        [EnumMember()]
        [OptionSetMetadata("Hierarchy Rule", Index=810, Lcid=1033, Description="Organization-owned entity customizations including mapping Quick view form with R" +
            "elationship Id")]
        HierarchyRule = 8840,
        
        [EnumMember()]
        [OptionSetMetadata("Model-driven App", Index=863, Lcid=1033, Description="A role-based, modular business app that provides task-based functionality for a p" +
            "articular area of work.")]
        ModeldrivenApp = 9006,
        
        [EnumMember()]
        [OptionSetMetadata("App Module Component", Index=861, Lcid=1033, Description="A component available in a business app such as entity, dashboard, form, view, ch" +
            "art, and business process.")]
        AppModuleComponent = 9007,
        
        [EnumMember()]
        [OptionSetMetadata("App Module Roles", Index=845, Lcid=1033, Description="Security roles that have access to a business app.")]
        AppModuleRoles = 9009,
        
        [EnumMember()]
        [OptionSetMetadata("App Config Master", Index=858, Lcid=1033, Description="Contains the master list of all properties that can be customized for apps in Dyn" +
            "amics 365. For internal use only.")]
        AppConfigMaster = 9011,
        
        [EnumMember()]
        [OptionSetMetadata("App Configuration", Index=859, Lcid=1033, Description="Contains a mapping between an app configuration instance and an app, which define" +
            "s the properties that can be customized for the app. Optionally, also contains n" +
            "avigation setting for an app. For internal use only.")]
        AppConfiguration = 9012,
        
        [EnumMember()]
        [OptionSetMetadata("App Configuration Instance", Index=860, Lcid=1033, Description="Contains a property or a list of properties from the app configuration master lis" +
            "t that can be customized for any app in Dynamics 365. For internal use only.")]
        AppConfigurationInstance = 9013,
        
        [EnumMember()]
        [OptionSetMetadata("Report", Index=602, Lcid=1033, Description="Data summary in an easy-to-read layout.")]
        Report = 9100,
        
        [EnumMember()]
        [OptionSetMetadata("Report Related Entity", Index=596, Lcid=1033, Description="Entities related to a report. A report can be related to multiple entities.")]
        ReportRelatedEntity = 9101,
        
        [EnumMember()]
        [OptionSetMetadata("Report Related Category", Index=595, Lcid=1033, Description="Categories related to a report. A report can be related to multiple categories.")]
        ReportRelatedCategory = 9102,
        
        [EnumMember()]
        [OptionSetMetadata("Report Visibility", Index=593, Lcid=1033, Description="Area in which to show a report. A report can be shown in multiple areas.")]
        ReportVisibility = 9103,
        
        [EnumMember()]
        [OptionSetMetadata("Report Link", Index=594, Lcid=1033, Description="Links and dependencies between reports. A report may drill through to another rep" +
            "ort, or it may have another report as a sub-report.")]
        ReportLink = 9104,
        
        [EnumMember()]
        [OptionSetMetadata("Currency", Index=435, Lcid=1033, Description="Currency in which a financial transaction is carried out.")]
        Currency = 9105,
        
        [EnumMember()]
        [OptionSetMetadata("Mail Merge Template", Index=800, Lcid=1033, Description="Template for a mail merge document that contains the standard attributes of that " +
            "document.")]
        MailMergeTemplate = 9106,
        
        [EnumMember()]
        [OptionSetMetadata("Import Job", Index=843, Lcid=1033, Description="For internal use only.")]
        ImportJob = 9107,
        
        [EnumMember()]
        [OptionSetMetadata("LocalConfigStore", Index=797, Lcid=1033, Description="")]
        LocalConfigStore = 9201,
        
        [EnumMember()]
        [OptionSetMetadata("Record Creation and Update Rule", Index=967, Lcid=1033, Description="Defines the settings for automatic record creation.")]
        RecordCreationandUpdateRule = 9300,
        
        [EnumMember()]
        [OptionSetMetadata("Record Creation and Update Rule Item", Index=968, Lcid=1033, Description="Defines the individual conditions required for creating records automatically.")]
        RecordCreationandUpdateRuleItem = 9301,
        
        [EnumMember()]
        [OptionSetMetadata("Web Resource", Index=464, Lcid=1033, Description="Data equivalent to files used in Web development. Web resources provide client-si" +
            "de components that are used to provide custom user interface elements.")]
        WebResource = 9333,
        
        [EnumMember()]
        [OptionSetMetadata("Channel Access Profile Rule", Index=994, Lcid=1033, Description="Defines the rules for automatically associating channel access profiles to extern" +
            "al party records.For internal use only")]
        ChannelAccessProfileRule = 9400,
        
        [EnumMember()]
        [OptionSetMetadata("Channel Access Profile Rule Item", Index=1001, Lcid=1033, Description="Defines the rule items of a profile rule set for the automated profile associatio" +
            "n.For internal use only")]
        ChannelAccessProfileRuleItem = 9401,
        
        [EnumMember()]
        [OptionSetMetadata("SharePoint Site", Index=350, Lcid=1033, Description="SharePoint site from where documents can be managed in Microsoft Dynamics 365.")]
        SharePointSite = 9502,
        
        [EnumMember()]
        [OptionSetMetadata("Sharepoint Document", Index=353, Lcid=1033, Description="Document libraries or folders on a SharePoint server from where documents can be " +
            "managed in Microsoft Dynamics 365.")]
        SharepointDocument = 9507,
        
        [EnumMember()]
        [OptionSetMetadata("Document Location", Index=351, Lcid=1033, Description="Document libraries or folders on a SharePoint server from where documents can be " +
            "managed in Microsoft Dynamics 365.")]
        DocumentLocation = 9508,
        
        [EnumMember()]
        [OptionSetMetadata("SharePoint Data", Index=352, Lcid=1033, Description="SharePoint\'s Data Corresponding to a user , Record , Location and Page")]
        SharePointData = 9509,
        
        [EnumMember()]
        [OptionSetMetadata("Rollup Properties", Index=395, Lcid=1033, Description="Stores properties related to rollup fields.")]
        RollupProperties = 9510,
        
        [EnumMember()]
        [OptionSetMetadata("Rollup Job", Index=394, Lcid=1033, Description="Stores rollup jobs.")]
        RollupJob = 9511,
        
        [EnumMember()]
        [OptionSetMetadata("Goal", Index=804, Lcid=1033, Description="Target objective for a user or a team for a specified time period.")]
        Goal = 9600,
        
        [EnumMember()]
        [OptionSetMetadata("Rollup Query", Index=811, Lcid=1033, Description="Query that is used to filter the results of the goal rollup.")]
        RollupQuery = 9602,
        
        [EnumMember()]
        [OptionSetMetadata("Goal Metric", Index=790, Lcid=1033, Description="Type of measurement for a goal, such as money amount or count.")]
        GoalMetric = 9603,
        
        [EnumMember()]
        [OptionSetMetadata("Rollup Field", Index=619, Lcid=1033, Description="Field to be rolled up to calculate the actual and in-progress values against the " +
            "goal.")]
        RollupField = 9604,
        
        [EnumMember()]
        [OptionSetMetadata("Email Server Profile", Index=746, Lcid=1033, Description="Holds the Email Server Profiles of an organization")]
        EmailServerProfile = 9605,
        
        [EnumMember()]
        [OptionSetMetadata("Mailbox", Index=793, Lcid=1033, Description="")]
        Mailbox = 9606,
        
        [EnumMember()]
        [OptionSetMetadata("Mailbox Statistics", Index=794, Lcid=1033, Description="Stores data regarding Mailbox processing cycles")]
        MailboxStatistics = 9607,
        
        [EnumMember()]
        [OptionSetMetadata("Mailbox Auto Tracking Folder", Index=802, Lcid=1033, Description="Stores data about what folders for a mailbox are auto tracked")]
        MailboxAutoTrackingFolder = 9608,
        
        [EnumMember()]
        [OptionSetMetadata("Mailbox Tracking Category", Index=801, Lcid=1033, Description="Stores data about what categories for a mailbox are tracked")]
        MailboxTrackingCategory = 9609,
        
        [EnumMember()]
        [OptionSetMetadata("Process Configuration", Index=947, Lcid=1033, Description="For internal use only.")]
        ProcessConfiguration = 9650,
        
        [EnumMember()]
        [OptionSetMetadata("Organization Insights Notification", Index=524, Lcid=1033, Description="Stores data regarding organization insights notification")]
        OrganizationInsightsNotification = 9690,
        
        [EnumMember()]
        [OptionSetMetadata("Organization Insights Metric", Index=523, Lcid=1033, Description="Stores data regarding organization insights metric")]
        OrganizationInsightsMetric = 9699,
        
        [EnumMember()]
        [OptionSetMetadata("Entitlement", Index=690, Lcid=1033, Description="Defines the amount and type of support a customer should receive.")]
        Entitlement = 9700,
        
        [EnumMember()]
        [OptionSetMetadata("Entitlement Channel", Index=691, Lcid=1033, Description="Defines the amount and type of support for a channel.")]
        EntitlementChannel = 9701,
        
        [EnumMember()]
        [OptionSetMetadata("Entitlement Template", Index=695, Lcid=1033, Description="Contains predefined customer support terms that can be used to created entitlemen" +
            "ts for customers.")]
        EntitlementTemplate = 9702,
        
        [EnumMember()]
        [OptionSetMetadata("Entitlement Template Channel", Index=696, Lcid=1033, Description="Contains predefined support terms for a channel to create entitlements for custom" +
            "ers.")]
        EntitlementTemplateChannel = 9703,
        
        [EnumMember()]
        [OptionSetMetadata("Entitlement Entity Allocation Type Mapping", Index=687, Lcid=1033, Description="Mapping to define which Allocation Types are available for Entity Type to be used" +
            " on Entitlement")]
        EntitlementEntityAllocationTypeMapping = 9704,
        
        [EnumMember()]
        [OptionSetMetadata("SLA", Index=341, Lcid=1033, Description="Contains information about the tracked service-level KPIs for cases that belong t" +
            "o different customers.")]
        SLA = 9750,
        
        [EnumMember()]
        [OptionSetMetadata("SLA Item", Index=342, Lcid=1033, Description="Contains information about a tracked support KPI for a specific customer.")]
        SLAItem = 9751,
        
        [EnumMember()]
        [OptionSetMetadata("SLA KPI Instance", Index=340, Lcid=1033, Description="Service level agreement (SLA) key performance indicator (KPI) instance that is tr" +
            "acked for an individual case")]
        SLAKPIInstance = 9752,
        
        [EnumMember()]
        [OptionSetMetadata("Custom Control", Index=960, Lcid=1033, Description="For internal use only.")]
        CustomControl = 9753,
        
        [EnumMember()]
        [OptionSetMetadata("Custom Control Resource", Index=956, Lcid=1033, Description="Custom Control Resource Id")]
        CustomControlResource = 9754,
        
        [EnumMember()]
        [OptionSetMetadata("Custom Control Default Config", Index=958, Lcid=1033, Description="For internal use only.")]
        CustomControlDefaultConfig = 9755,
        
        [EnumMember()]
        [OptionSetMetadata("Entity", Index=692, Lcid=1033)]
        Entity = 9800,
        
        [EnumMember()]
        [OptionSetMetadata("Attribute", Index=879, Lcid=1033)]
        Attribute = 9808,
        
        [EnumMember()]
        [OptionSetMetadata("OptionSet", Index=577, Lcid=1033)]
        OptionSet = 9809,
        
        [EnumMember()]
        [OptionSetMetadata("Entity Key", Index=676, Lcid=1033)]
        EntityKey = 9810,
        
        [EnumMember()]
        [OptionSetMetadata("Entity Relationship", Index=685, Lcid=1033)]
        EntityRelationship = 9811,
        
        [EnumMember()]
        [OptionSetMetadata("Managed Property", Index=785, Lcid=1033)]
        ManagedProperty = 9812,
        
        [EnumMember()]
        [OptionSetMetadata("Relationship Entity", Index=611, Lcid=1033)]
        RelationshipEntity = 9813,
        
        [EnumMember()]
        [OptionSetMetadata("Relationship Attribute", Index=612, Lcid=1033, Description="Stores relationship attributes mapping for Multi-predicate relationship")]
        RelationshipAttribute = 9814,
        
        [EnumMember()]
        [OptionSetMetadata("Entity Index", Index=678, Lcid=1033, Description="Metadata describing index of an entity")]
        EntityIndex = 9815,
        
        [EnumMember()]
        [OptionSetMetadata("Index Attribute", Index=827, Lcid=1033, Description="Stores index attributes")]
        IndexAttribute = 9816,
        
        [EnumMember()]
        [OptionSetMetadata("Option Set Value", Index=886, Lcid=1033, Description="Option Set Value")]
        OptionSetValue = 9817,
        
        [EnumMember()]
        [OptionSetMetadata("Secured Masking Column", Index=885, Lcid=1033, Description="Defines secured masking rule for column")]
        SecuredMaskingColumn = 9820,
        
        [EnumMember()]
        [OptionSetMetadata("Mobile Offline Profile", Index=1240, Lcid=1033, Description="Information to administer and manage the data available to mobile devices in offl" +
            "ine mode.")]
        MobileOfflineProfile = 9866,
        
        [EnumMember()]
        [OptionSetMetadata("Mobile Offline Profile Item", Index=1236, Lcid=1033, Description="Information on entity availability to mobile devices in offline mode for a mobile" +
            " offline profile item.")]
        MobileOfflineProfileItem = 9867,
        
        [EnumMember()]
        [OptionSetMetadata("Mobile Offline Profile Item Association", Index=1237, Lcid=1033, Description="Information on relationships to be used to follow related entity\'s records for mo" +
            "bile offline profile item.")]
        MobileOfflineProfileItemAssociation = 9868,
        
        [EnumMember()]
        [OptionSetMetadata("Sync Error", Index=467, Lcid=1033, Description="Failure reason and other detailed information for a record that failed to sync.")]
        SyncError = 9869,
        
        [EnumMember()]
        [OptionSetMetadata("Offline Command Definition", Index=574, Lcid=1033, Description="For internal use only.")]
        OfflineCommandDefinition = 9870,
        
        [EnumMember()]
        [OptionSetMetadata("Language Provisioning State", Index=764, Lcid=1033, Description="Container for language provisioning checkpoint states")]
        LanguageProvisioningState = 9875,
        
        [EnumMember()]
        [OptionSetMetadata("Ribbon Metadata To Process", Index=613, Lcid=1033, Description="Container for Ribbon Metadata To Process")]
        RibbonMetadataToProcess = 9880,
        
        [EnumMember()]
        [OptionSetMetadata("SolutionHistoryData", Index=370, Lcid=1033, Description="solution history data")]
        SolutionHistoryData = 9890,
        
        [EnumMember()]
        [OptionSetMetadata("Navigation Setting", Index=590, Lcid=1033, Description="Navigation Setting: A setting page or group of pages available for configuration " +
            "within an app. A record representing a group of pages is regarded as the parent " +
            "navigation setting of one or more other records. For internal use only.")]
        NavigationSetting = 9900,
        
        [EnumMember()]
        [OptionSetMetadata("MultiEntitySearch", Index=582, Lcid=1033, Description="Multi Entity Search.")]
        MultiEntitySearch = 9910,
        
        [EnumMember()]
        [OptionSetMetadata("Multi Select Option Value", Index=589, Lcid=1033, Description="Multi Select Option Value")]
        MultiSelectOptionValue = 9912,
        
        [EnumMember()]
        [OptionSetMetadata("Hierarchy Security Configuration", Index=808, Lcid=1033)]
        HierarchySecurityConfiguration = 9919,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge Base Record", Index=777, Lcid=1033, Description="Metadata of knowledge base (KB) articles associated with Microsoft Dynamics 365 e" +
            "ntities.")]
        KnowledgeBaseRecord = 9930,
        
        [EnumMember()]
        [OptionSetMetadata("Incident KnowledgeBaseRecord", Index=841, Lcid=1033)]
        IncidentKnowledgeBaseRecord = 9931,
        
        [EnumMember()]
        [OptionSetMetadata("Time Stamp Date Mapping", Index=489, Lcid=1033, Description="For internal use only.`")]
        TimeStampDateMapping = 9932,
        
        [EnumMember()]
        [OptionSetMetadata("Azure Service Connection", Index=869, Lcid=1033, Description="Stores connection information for an Azure service")]
        AzureServiceConnection = 9936,
        
        [EnumMember()]
        [OptionSetMetadata("Document Template", Index=753, Lcid=1033, Description="Used to store Document Templates in database in binary format.")]
        DocumentTemplate = 9940,
        
        [EnumMember()]
        [OptionSetMetadata("Personal Document Template", Index=515, Lcid=1033, Description="Used to store Personal Document Templates in database in binary format.")]
        PersonalDocumentTemplate = 9941,
        
        [EnumMember()]
        [OptionSetMetadata("Topic Model Configuration", Index=493, Lcid=1033, Description="Configuration settings for identification of topics using text analytics.")]
        TopicModelConfiguration = 9942,
        
        [EnumMember()]
        [OptionSetMetadata("Topic Model Execution History", Index=491, Lcid=1033, Description="Entity for Topic Model Execution History")]
        TopicModelExecutionHistory = 9943,
        
        [EnumMember()]
        [OptionSetMetadata("Topic Model", Index=495, Lcid=1033, Description="The model for automatic identification of topics using text analytics.")]
        TopicModel = 9944,
        
        [EnumMember()]
        [OptionSetMetadata("Text Analytics Entity Mapping", Index=503, Lcid=1033, Description="")]
        TextAnalyticsEntityMapping = 9945,
        
        [EnumMember()]
        [OptionSetMetadata("Topic History", Index=494, Lcid=1033, Description="Entity for Topic History")]
        TopicHistory = 9946,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge Search Model", Index=778, Lcid=1033, Description="Configuration for automatic suggestion of knowledge articles using text analytics" +
            " and search")]
        KnowledgeSearchModel = 9947,
        
        [EnumMember()]
        [OptionSetMetadata("Text Analytics Topic", Index=487, Lcid=1033, Description="Text Analytics Topics")]
        TextAnalyticsTopic = 9948,
        
        [EnumMember()]
        [OptionSetMetadata("Advanced Similarity Rule", Index=889, Lcid=1033, Description="A text match rule identifies similar records using keywords and key phrases deter" +
            "mined with text analytics")]
        AdvancedSimilarityRule = 9949,
        
        [EnumMember()]
        [OptionSetMetadata("Office Graph Document", Index=573, Lcid=1033, Description="Office Graph Documents Description")]
        OfficeGraphDocument = 9950,
        
        [EnumMember()]
        [OptionSetMetadata("Similarity Rule", Index=354, Lcid=1033, Description="")]
        SimilarityRule = 9951,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge Article", Index=773, Lcid=1033, Description="Organizational knowledge for internal and external use.")]
        KnowledgeArticle = 9953,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge Article Incident", Index=780, Lcid=1033, Description="Association between an knowledge article and incident.")]
        KnowledgeArticleIncident = 9954,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge Article Views", Index=779, Lcid=1033, Description="No of times an article is viewed per day")]
        KnowledgeArticleViews = 9955,
        
        [EnumMember()]
        [OptionSetMetadata("Language", Index=771, Lcid=1033, Description="Language")]
        Language_2 = 9957,
        
        [EnumMember()]
        [OptionSetMetadata("Feedback", Index=699, Lcid=1033, Description="Feedback and rating.")]
        Feedback = 9958,
        
        [EnumMember()]
        [OptionSetMetadata("Category", Index=997, Lcid=1033, Description="Entity for categorizing records to make it easier for your customers to find them" +
            " on portals and through search.")]
        Category = 9959,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge Article Category", Index=781, Lcid=1033, Description="Category for a Knowledge Article.")]
        KnowledgeArticleCategory = 9960,
        
        [EnumMember()]
        [OptionSetMetadata("DelveActionHub", Index=728, Lcid=1033, Description="Delve Action Hubs Description")]
        DelveActionHub = 9961,
        
        [EnumMember()]
        [OptionSetMetadata("Action Card", Index=899, Lcid=1033, Description="Action card entity to show action cards.")]
        ActionCard = 9962,
        
        [EnumMember()]
        [OptionSetMetadata("ActionCardUserState", Index=907, Lcid=1033, Description="")]
        ActionCardUserState = 9968,
        
        [EnumMember()]
        [OptionSetMetadata("Action Card User Settings", Index=906, Lcid=1033, Description="Stores user settings for action cards")]
        ActionCardUserSettings = 9973,
        
        [EnumMember()]
        [OptionSetMetadata("Action Card Type", Index=1011, Lcid=1033, Description="To provide master data for the card types list. For internal use only")]
        ActionCardType = 9983,
        
        [EnumMember()]
        [OptionSetMetadata("Interaction for Email", Index=826, Lcid=1033, Description="")]
        InteractionforEmail = 9986,
        
        [EnumMember()]
        [OptionSetMetadata("External Party Item", Index=715, Lcid=1033, Description="Information about external party items that need to access Dynamics 365 from exte" +
            "rnal channels.For internal use only")]
        ExternalPartyItem = 9987,
        
        [EnumMember()]
        [OptionSetMetadata("HolidayWrapper", Index=809, Lcid=1033, Description="")]
        HolidayWrapper = 9996,
        
        [EnumMember()]
        [OptionSetMetadata("Email Signature", Index=744, Lcid=1033, Description="Signature for email message")]
        EmailSignature = 9997,
        
        [EnumMember()]
        [OptionSetMetadata("Solution Component Attribute Configuration", Index=343, Lcid=1033, Description="")]
        SolutionComponentAttributeConfiguration = 10000,
        
        [EnumMember()]
        [OptionSetMetadata("Solution Component Batch Configuration", Index=344, Lcid=1033, Description="")]
        SolutionComponentBatchConfiguration = 10001,
        
        [EnumMember()]
        [OptionSetMetadata("Solution Component Configuration", Index=373, Lcid=1033, Description="")]
        SolutionComponentConfiguration = 10002,
        
        [EnumMember()]
        [OptionSetMetadata("Solution Component Relationship Configuration", Index=372, Lcid=1033, Description="")]
        SolutionComponentRelationshipConfiguration = 10003,
        
        [EnumMember()]
        [OptionSetMetadata("Solution History", Index=63, Lcid=1033, Description="")]
        SolutionHistory = 10004,
        
        [EnumMember()]
        [OptionSetMetadata("Solution History Data Source", Index=64, Lcid=1033, Description="")]
        SolutionHistoryDataSource = 10005,
        
        [EnumMember()]
        [OptionSetMetadata("Component Layer", Index=1316, Lcid=1033, Description="")]
        ComponentLayer = 10006,
        
        [EnumMember()]
        [OptionSetMetadata("Component Layer Data Source", Index=1345, Lcid=1033, Description="")]
        ComponentLayerDataSource = 10007,
        
        [EnumMember()]
        [OptionSetMetadata("Package", Index=511, Lcid=1033, Description="")]
        Package = 10008,
        
        [EnumMember()]
        [OptionSetMetadata("Package History", Index=509, Lcid=1033, Description="")]
        PackageHistory = 10009,
        
        [EnumMember()]
        [OptionSetMetadata("StageSolutionUpload", Index=363, Lcid=1033, Description="")]
        StageSolutionUpload = 10011,
        
        [EnumMember()]
        [OptionSetMetadata("ExportSolutionUpload", Index=716, Lcid=1033, Description="")]
        ExportSolutionUpload = 10012,
        
        [EnumMember()]
        [OptionSetMetadata("FeatureControlSetting", Index=707, Lcid=1033, Description="featurecontrolsetting")]
        FeatureControlSetting = 10013,
        
        [EnumMember()]
        [OptionSetMetadata("Solution Component Summary", Index=73, Lcid=1033, Description="")]
        SolutionComponentSummary = 10014,
        
        [EnumMember()]
        [OptionSetMetadata("Solution Component Count Summary", Index=79, Lcid=1033, Description="")]
        SolutionComponentCountSummary = 10015,
        
        [EnumMember()]
        [OptionSetMetadata("Solution Component Data Source", Index=80, Lcid=1033, Description="")]
        SolutionComponentDataSource = 10016,
        
        [EnumMember()]
        [OptionSetMetadata("Solution Component Count Data Source", Index=81, Lcid=1033, Description="")]
        SolutionComponentCountDataSource = 10017,
        
        [EnumMember()]
        [OptionSetMetadata("Microsoft Entra ID", Index=901, Lcid=1033, Description="Virtual entity that represents Microsoft Entra ID")]
        MicrosoftEntraID = 10018,
        
        [EnumMember()]
        [OptionSetMetadata("Staged Entity", Index=375, Lcid=1033, Description="Stores staged entity metadata to be processed before fully created.")]
        StagedEntity = 10019,
        
        [EnumMember()]
        [OptionSetMetadata("Staged Entity Attribute", Index=376, Lcid=1033, Description="Stores staged entity attribute metadata to be processed in async.")]
        StagedEntityAttribute = 10020,
        
        [EnumMember()]
        [OptionSetMetadata("Staged Metadata Async Operation", Index=369, Lcid=1033, Description="Stores staged entity metadata to be processed before fully created.")]
        StagedMetadataAsyncOperation = 10021,
        
        [EnumMember()]
        [OptionSetMetadata("Key Vault Reference", Index=772, Lcid=1033, Description="Contains data that refers to an Azure Key Vault containing credentials used to co" +
            "nnect to secure web-hosted resources.")]
        KeyVaultReference = 10022,
        
        [EnumMember()]
        [OptionSetMetadata("Managed Identity", Index=792, Lcid=1033, Description="Contains data to represent an Azure Active Directory Application used to connect " +
            "to secure web-hosted resources.")]
        ManagedIdentity = 10023,
        
        [EnumMember()]
        [OptionSetMetadata("Catalog", Index=1003, Lcid=1033, Description="Entity for cataloging records to make it easier for your customers to find them o" +
            "n portals and through search.")]
        Catalog = 10024,
        
        [EnumMember()]
        [OptionSetMetadata("Catalog Assignment", Index=996, Lcid=1033, Description="Entity for assigning records to a specific catalog ")]
        CatalogAssignment = 10025,
        
        [EnumMember()]
        [OptionSetMetadata("Internal Catalog Assignment", Index=825, Lcid=1033, Description="")]
        InternalCatalogAssignment = 10026,
        
        [EnumMember()]
        [OptionSetMetadata("Custom API", Index=951, Lcid=1033, Description="Entity that defines a custom API")]
        CustomAPI = 10027,
        
        [EnumMember()]
        [OptionSetMetadata("Custom API Request Parameter", Index=952, Lcid=1033, Description="Entity that defines a request parameter for a custom API")]
        CustomAPIRequestParameter = 10028,
        
        [EnumMember()]
        [OptionSetMetadata("Custom API Response Property", Index=959, Lcid=1033, Description="Entity that defines a response property for a custom API ")]
        CustomAPIResponseProperty = 10029,
        
        [EnumMember()]
        [OptionSetMetadata("Plugin Package", Index=539, Lcid=1033, Description="")]
        PluginPackage = 10030,
        
        [EnumMember()]
        [OptionSetMetadata("NonRelational Data Source", Index=223, Lcid=1033, Description="")]
        NonRelationalDataSource = 10031,
        
        [EnumMember()]
        [OptionSetMetadata("ProvisionLanguageForUser", Index=667, Lcid=1033, Description="")]
        ProvisionLanguageForUser = 10032,
        
        [EnumMember()]
        [OptionSetMetadata("Shared Object", Index=410, Lcid=1033, Description="A record that is being shared in a real time collaboration session.")]
        SharedObject = 10033,
        
        [EnumMember()]
        [OptionSetMetadata("Shared Workspace", Index=408, Lcid=1033, Description="References a container that stores real-time collaboration data.")]
        SharedWorkspace = 10034,
        
        [EnumMember()]
        [OptionSetMetadata("Shared Workspace Access Token", Index=406, Lcid=1033, Description="Contains information about the shared workspace access tokens.")]
        SharedWorkspaceAccessToken = 10035,
        
        [EnumMember()]
        [OptionSetMetadata("Shared Workspace Pool", Index=407, Lcid=1033, Description="Contains metadata about a container used to store real-time collaboration data. O" +
            "nce claimed, a sharedworkspace record would be created with copied metadata.")]
        SharedWorkspacePool = 10036,
        
        [EnumMember()]
        [OptionSetMetadata("Data Lake Folder", Index=731, Lcid=1033, Description="A folder is a place to store data in Azure Data Lake.")]
        DataLakeFolder = 10037,
        
        [EnumMember()]
        [OptionSetMetadata("Data Lake Folder Permission", Index=729, Lcid=1033, Description="")]
        DataLakeFolderPermission = 10038,
        
        [EnumMember()]
        [OptionSetMetadata("Data Lake Workspace", Index=730, Lcid=1033, Description="A workspace is a place to store data in Azure Data Lake.")]
        DataLakeWorkspace = 10039,
        
        [EnumMember()]
        [OptionSetMetadata("Data Lake Workspace Permission", Index=737, Lcid=1033, Description="")]
        DataLakeWorkspacePermission = 10040,
        
        [EnumMember()]
        [OptionSetMetadata("Data Processing configuration", Index=736, Lcid=1033, Description="")]
        DataProcessingconfiguration = 10041,
        
        [EnumMember()]
        [OptionSetMetadata("Exported Excel", Index=709, Lcid=1033, Description="A Place holder entity to save excel file for each exportretaineddata custom api r" +
            "equests.")]
        ExportedExcel = 10042,
        
        [EnumMember()]
        [OptionSetMetadata("RetainedData Excel", Index=627, Lcid=1033, Description="A Place holder entity to save excel file for each exportretaineddata custom api r" +
            "equests.")]
        RetainedDataExcel = 10043,
        
        [EnumMember()]
        [OptionSetMetadata("Synapse Database", Index=484, Lcid=1033, Description="This entity represents an external Synapse database and its associated datalake f" +
            "older link.")]
        SynapseDatabase = 10044,
        
        [EnumMember()]
        [OptionSetMetadata("Synapse Link External Table State", Index=485, Lcid=1033, Description="Synapse Link external table states")]
        SynapseLinkExternalTableState = 10045,
        
        [EnumMember()]
        [OptionSetMetadata("Synapse Link Profile", Index=483, Lcid=1033, Description="Synapse Link Profile")]
        SynapseLinkProfile = 10046,
        
        [EnumMember()]
        [OptionSetMetadata("Synapse Link Profile Entity", Index=481, Lcid=1033, Description="Entities associated with the Synapse Link profile")]
        SynapseLinkProfileEntity = 10047,
        
        [EnumMember()]
        [OptionSetMetadata("Synapse Link Profile Entity State", Index=482, Lcid=1033, Description="Runtime state of the Synapse Link entity")]
        SynapseLinkProfileEntityState = 10048,
        
        [EnumMember()]
        [OptionSetMetadata("Synapse Link Schedule", Index=475, Lcid=1033, Description="Synapse link schedules")]
        SynapseLinkSchedule = 10049,
        
        [EnumMember()]
        [OptionSetMetadata("Component Version", Index=940, Lcid=1033, Description="")]
        ComponentVersion = 10050,
        
        [EnumMember()]
        [OptionSetMetadata("Component Version Data Source", Index=933, Lcid=1033, Description="")]
        ComponentVersionDataSource = 10051,
        
        [EnumMember()]
        [OptionSetMetadata("Component Version (Internal)", Index=934, Lcid=1033)]
        ComponentVersionInternal = 10052,
        
        [EnumMember()]
        [OptionSetMetadata("Git Branch", Index=820, Lcid=1033, Description="")]
        GitBranch = 10053,
        
        [EnumMember()]
        [OptionSetMetadata("Git Configuration Retrieval Data Source", Index=813, Lcid=1033, Description="")]
        GitConfigurationRetrievalDataSource = 10054,
        
        [EnumMember()]
        [OptionSetMetadata("Git Organization", Index=806, Lcid=1033, Description="")]
        GitOrganization = 10055,
        
        [EnumMember()]
        [OptionSetMetadata("Git Project", Index=807, Lcid=1033, Description="")]
        GitProject = 10056,
        
        [EnumMember()]
        [OptionSetMetadata("Git Repository", Index=805, Lcid=1033, Description="")]
        GitRepository = 10057,
        
        [EnumMember()]
        [OptionSetMetadata("Source Control Branch Configuration", Index=371, Lcid=1033, Description="Stores the source control branch configuration associated with the organization o" +
            "r solution")]
        SourceControlBranchConfiguration = 10058,
        
        [EnumMember()]
        [OptionSetMetadata("Source Control Component", Index=378, Lcid=1033, Description="Stores the Source Control Components associated with the organization or solution" +
            "")]
        SourceControlComponent = 10059,
        
        [EnumMember()]
        [OptionSetMetadata("Source Control Component Payload", Index=379, Lcid=1033, Description="Stores the Source Control Component Payloads associated with components.")]
        SourceControlComponentPayload = 10060,
        
        [EnumMember()]
        [OptionSetMetadata("Source Control Configuration", Index=377, Lcid=1033, Description="Stores the git configuration associated with the environment ")]
        SourceControlConfiguration = 10061,
        
        [EnumMember()]
        [OptionSetMetadata("Staged Source Control Component", Index=362, Lcid=1033, Description="Stores the source control components that needs to be processed")]
        StagedSourceControlComponent = 10062,
        
        [EnumMember()]
        [OptionSetMetadata("DataflowRefreshHistory", Index=1061, Lcid=1033, Description="")]
        DataflowRefreshHistory = 10063,
        
        [EnumMember()]
        [OptionSetMetadata("EntityRefreshHistory", Index=1030, Lcid=1033, Description="")]
        EntityRefreshHistory = 10064,
        
        [EnumMember()]
        [OptionSetMetadata("Shared Link Setting", Index=409, Lcid=1033, Description="Shared Link Setting")]
        SharedLinkSetting = 10065,
        
        [EnumMember()]
        [OptionSetMetadata("DelegatedAuthorization", Index=734, Lcid=1033, Description="Context for delegated authorization.")]
        DelegatedAuthorization = 10066,
        
        [EnumMember()]
        [OptionSetMetadata("CascadeGrantRevokeAccessRecordsTracker", Index=1009, Lcid=1033, Description="")]
        CascadeGrantRevokeAccessRecordsTracker = 10068,
        
        [EnumMember()]
        [OptionSetMetadata("CascadeGrantRevokeAccessVersionTracker", Index=1010, Lcid=1033, Description="")]
        CascadeGrantRevokeAccessVersionTracker = 10069,
        
        [EnumMember()]
        [OptionSetMetadata("RevokeInheritedAccessRecordsTracker", Index=629, Lcid=1033, Description="")]
        RevokeInheritedAccessRecordsTracker = 10070,
        
        [EnumMember()]
        [OptionSetMetadata("TdsMetadata", Index=501, Lcid=1033, Description="")]
        TdsMetadata = 10071,
        
        [EnumMember()]
        [OptionSetMetadata("Model-Driven App Element", Index=856, Lcid=1033, Description="Associates a model-driven app with its components.")]
        ModelDrivenAppElement = 10072,
        
        [EnumMember()]
        [OptionSetMetadata("Model-Driven App Component Node\'s Edge", Index=862, Lcid=1033, Description="Contains Model-Driven App Component Node\'s Edge Information.")]
        ModelDrivenAppComponentNodesEdge = 10073,
        
        [EnumMember()]
        [OptionSetMetadata("Model-Driven App Component Node", Index=855, Lcid=1033, Description="Contains Model-Driven App Component Node Information")]
        ModelDrivenAppComponentNode = 10074,
        
        [EnumMember()]
        [OptionSetMetadata("Model-Driven App Setting", Index=854, Lcid=1033, Description="Holds the value for the associated App Setting Definition.")]
        ModelDrivenAppSetting = 10075,
        
        [EnumMember()]
        [OptionSetMetadata("Model-Driven App User Setting", Index=852, Lcid=1033, Description="Holds the value for the associated App User Setting Definition.")]
        ModelDrivenAppUserSetting = 10076,
        
        [EnumMember()]
        [OptionSetMetadata("Organization Setting", Index=526, Lcid=1033, Description="Holds the value for the associated Organization Setting Definition.")]
        OrganizationSetting = 10077,
        
        [EnumMember()]
        [OptionSetMetadata("Setting Definition", Index=402, Lcid=1033, Description="Contains Setting Definitions")]
        SettingDefinition = 10078,
        
        [EnumMember()]
        [OptionSetMetadata("CanvasApp Extended Metadata", Index=1005, Lcid=1033, Description="Holds extended metadata values for canvas apps that are not solution aware")]
        CanvasAppExtendedMetadata = 10079,
        
        [EnumMember()]
        [OptionSetMetadata("Service Plan Mapping", Index=401, Lcid=1033, Description="Service Plan Mapping")]
        ServicePlanMapping = 10080,
        
        [EnumMember()]
        [OptionSetMetadata("Service Plan Custom Control", Index=403, Lcid=1033, Description="Service Plan Custom Controls")]
        ServicePlanCustomControl = 10081,
        
        [EnumMember()]
        [OptionSetMetadata("ApplicationUser", Index=865, Lcid=1033, Description="Application User that has non-interactive access to the CDS system")]
        ApplicationUser = 10083,
        
        [EnumMember()]
        [OptionSetMetadata("OData v4 Data Source", Index=179, Lcid=1033, Description="Data sources used by the OData v4 data provider to access data from an external w" +
            "eb service.")]
        ODatav4DataSource = 10086,
        
        [EnumMember()]
        [OptionSetMetadata("Workflow Binary", Index=447, Lcid=1033, Description="")]
        WorkflowBinary = 10087,
        
        [EnumMember()]
        [OptionSetMetadata("Credential", Index=953, Lcid=1033, Description="")]
        Credential = 10088,
        
        [EnumMember()]
        [OptionSetMetadata("Desktop Flow Module", Index=719, Lcid=1033, Description="")]
        DesktopFlowModule = 10089,
        
        [EnumMember()]
        [OptionSetMetadata("Flow Capacity Assignment", Index=702, Lcid=1033, Description="Capacity assignment for usage in Power Automate")]
        FlowCapacityAssignment = 10090,
        
        [EnumMember()]
        [OptionSetMetadata("Flow Credential Application", Index=703, Lcid=1033, Description="")]
        FlowCredentialApplication = 10091,
        
        [EnumMember()]
        [OptionSetMetadata("Flow Event", Index=760, Lcid=1033, Description="Entity to store the events that happen during usage of Power Automate.")]
        FlowEvent = 10092,
        
        [EnumMember()]
        [OptionSetMetadata("Flow Machine", Index=818, Lcid=1033, Description="")]
        FlowMachine = 10093,
        
        [EnumMember()]
        [OptionSetMetadata("Flow Machine Group", Index=816, Lcid=1033, Description="")]
        FlowMachineGroup = 10094,
        
        [EnumMember()]
        [OptionSetMetadata("Flow Machine Image", Index=814, Lcid=1033, Description="")]
        FlowMachineImage = 10095,
        
        [EnumMember()]
        [OptionSetMetadata("Flow Machine Image Version", Index=815, Lcid=1033, Description="")]
        FlowMachineImageVersion = 10096,
        
        [EnumMember()]
        [OptionSetMetadata("Flow Machine Network", Index=822, Lcid=1033, Description="")]
        FlowMachineNetwork = 10097,
        
        [EnumMember()]
        [OptionSetMetadata("ProcessStageParameter", Index=641, Lcid=1033, Description="")]
        ProcessStageParameter = 10098,
        
        [EnumMember()]
        [OptionSetMetadata("Work Queue", Index=445, Lcid=1033, Description="")]
        WorkQueue = 10099,
        
        [EnumMember()]
        [OptionSetMetadata("Work Queue Item", Index=452, Lcid=1033, Description="")]
        WorkQueueItem = 10100,
        
        [EnumMember()]
        [OptionSetMetadata("Desktop Flow Binary", Index=718, Lcid=1033, Description="")]
        DesktopFlowBinary = 10101,
        
        [EnumMember()]
        [OptionSetMetadata("Flow Log", Index=817, Lcid=1033)]
        FlowLog = 10102,
        
        [EnumMember()]
        [OptionSetMetadata("Flow Run", Index=823, Lcid=1033, Description="")]
        FlowRun = 10103,
        
        [EnumMember()]
        [OptionSetMetadata("Action Approval Model", Index=1019, Lcid=1033, Description="The action approval model data attached to an action approval.")]
        ActionApprovalModel = 10104,
        
        [EnumMember()]
        [OptionSetMetadata("Approval", Index=1020, Lcid=1033, Description="An approval.")]
        Approval = 10105,
        
        [EnumMember()]
        [OptionSetMetadata("Approval Request", Index=1049, Lcid=1033, Description="An individual request for approval.")]
        ApprovalRequest = 10106,
        
        [EnumMember()]
        [OptionSetMetadata("Approval Response", Index=1050, Lcid=1033, Description="An individual response to an approval.")]
        ApprovalResponse = 10107,
        
        [EnumMember()]
        [OptionSetMetadata("Approval Step", Index=1048, Lcid=1033, Description="")]
        ApprovalStep = 10108,
        
        [EnumMember()]
        [OptionSetMetadata("Await All Action Approval Model", Index=1046, Lcid=1033, Description="The await all action approval model data attached to an action approval.")]
        AwaitAllActionApprovalModel = 10109,
        
        [EnumMember()]
        [OptionSetMetadata("Await All Approval Model", Index=1047, Lcid=1033, Description="The await all approval model data attached to an approval.")]
        AwaitAllApprovalModel = 10110,
        
        [EnumMember()]
        [OptionSetMetadata("Basic Approval Model Data", Index=1054, Lcid=1033, Description="The basic approval model data attached to an approval.")]
        BasicApprovalModelData = 10111,
        
        [EnumMember()]
        [OptionSetMetadata("Flow Approval", Index=1055, Lcid=1033, Description="Microsoft Flow data attached to an approval.")]
        FlowApproval = 10112,
        
        [EnumMember()]
        [OptionSetMetadata("Connection Reference", Index=931, Lcid=1033, Description="")]
        ConnectionReference = 10121,
        
        [EnumMember()]
        [OptionSetMetadata("DVFileSearch", Index=751, Lcid=1033, Description="DVFileSearches Component")]
        DVFileSearch = 10122,
        
        [EnumMember()]
        [OptionSetMetadata("DVFileSearchAttribute", Index=758, Lcid=1033, Description="")]
        DVFileSearchAttribute = 10123,
        
        [EnumMember()]
        [OptionSetMetadata("DVFileSearchEntity", Index=759, Lcid=1033, Description="DVFileSearchEntities component.")]
        DVFileSearchEntity = 10124,
        
        [EnumMember()]
        [OptionSetMetadata("DVTableSearch", Index=757, Lcid=1033, Description="DVTableSearches component")]
        DVTableSearch = 10125,
        
        [EnumMember()]
        [OptionSetMetadata("DVTableSearchAttribute", Index=755, Lcid=1033, Description="DVTableSearchAttribute component")]
        DVTableSearchAttribute = 10126,
        
        [EnumMember()]
        [OptionSetMetadata("DVTableSearchEntity", Index=756, Lcid=1033, Description="DVTableSearchEntities component")]
        DVTableSearchEntity = 10127,
        
        [EnumMember()]
        [OptionSetMetadata("AICopilot", Index=893, Lcid=1033, Description="AI Copilot")]
        AICopilot = 10128,
        
        [EnumMember()]
        [OptionSetMetadata("AIPluginAuth", Index=921, Lcid=1033, Description="Entity to store AIPlugin Auth Information")]
        AIPluginAuth = 10129,
        
        [EnumMember()]
        [OptionSetMetadata("AI Plugin Conversation Starter", Index=919, Lcid=1033, Description="Conversation Starters for AI Plugins.")]
        AIPluginConversationStarter = 10130,
        
        [EnumMember()]
        [OptionSetMetadata("AI Plugin Conversation Starter Mapping", Index=920, Lcid=1033, Description="AIPlugins component")]
        AIPluginConversationStarterMapping = 10131,
        
        [EnumMember()]
        [OptionSetMetadata("AI Plugin Governance", Index=926, Lcid=1033, Description="")]
        AIPluginGovernance = 10132,
        
        [EnumMember()]
        [OptionSetMetadata("AI Plugin Governance Extended", Index=924, Lcid=1033, Description="")]
        AIPluginGovernanceExtended = 10133,
        
        [EnumMember()]
        [OptionSetMetadata("AIPluginOperationResponseTemplate", Index=912, Lcid=1033, Description="Content for the AI Plugin Operation Response Template")]
        AIPluginOperationResponseTemplate = 10134,
        
        [EnumMember()]
        [OptionSetMetadata("AIPluginTitle", Index=910, Lcid=1033, Description="AIPlugin Title")]
        AIPluginTitle = 10135,
        
        [EnumMember()]
        [OptionSetMetadata("SideloadedAIPlugin", Index=357, Lcid=1033, Description="Sideloaded AIPlugins metadata.")]
        SideloadedAIPlugin = 10136,
        
        [EnumMember()]
        [OptionSetMetadata("AIPlugin", Index=923, Lcid=1033, Description="AIPlugins component")]
        AIPlugin = 10137,
        
        [EnumMember()]
        [OptionSetMetadata("AIPluginExternalSchema", Index=927, Lcid=1033, Description="AIPluginExternalSchemas component")]
        AIPluginExternalSchema = 10138,
        
        [EnumMember()]
        [OptionSetMetadata("AIPluginExternalSchemaProperty", Index=928, Lcid=1033, Description="AIPluginExternalSchemaProperties component")]
        AIPluginExternalSchemaProperty = 10139,
        
        [EnumMember()]
        [OptionSetMetadata("AIPluginInstance", Index=925, Lcid=1033, Description="AI Plugin Instances Component")]
        AIPluginInstance = 10140,
        
        [EnumMember()]
        [OptionSetMetadata("AIPluginOperation", Index=918, Lcid=1033, Description="AIPluginOperations component")]
        AIPluginOperation = 10141,
        
        [EnumMember()]
        [OptionSetMetadata("AIPluginOperationParameter", Index=911, Lcid=1033, Description="Parameter overrides for AI Operation")]
        AIPluginOperationParameter = 10142,
        
        [EnumMember()]
        [OptionSetMetadata("AIPluginUserSetting", Index=908, Lcid=1033, Description="")]
        AIPluginUserSetting = 10143,
        
        [EnumMember()]
        [OptionSetMetadata("AI Event", Index=1251, Lcid=1033, Description="")]
        AIEvent = 10145,
        
        [EnumMember()]
        [OptionSetMetadata("AI Builder Feedback Loop", Index=1246, Lcid=1033, Description="")]
        AIBuilderFeedbackLoop = 10146,
        
        [EnumMember()]
        [OptionSetMetadata("AI Form Processing Document", Index=1252, Lcid=1033, Description="")]
        AIFormProcessingDocument = 10147,
        
        [EnumMember()]
        [OptionSetMetadata("AI Object Detection Image", Index=1198, Lcid=1033, Description="")]
        AIObjectDetectionImage = 10148,
        
        [EnumMember()]
        [OptionSetMetadata("AI Object Detection Label", Index=1196, Lcid=1033, Description="")]
        AIObjectDetectionLabel = 10149,
        
        [EnumMember()]
        [OptionSetMetadata("AI Object Detection Bounding Box", Index=1194, Lcid=1033, Description="")]
        AIObjectDetectionBoundingBox = 10150,
        
        [EnumMember()]
        [OptionSetMetadata("AI Object Detection Image Mapping", Index=1195, Lcid=1033, Description="")]
        AIObjectDetectionImageMapping = 10151,
        
        [EnumMember()]
        [OptionSetMetadata("AI Builder Dataset", Index=1256, Lcid=1033, Description="")]
        AIBuilderDataset = 10153,
        
        [EnumMember()]
        [OptionSetMetadata("AI Builder Dataset File", Index=1249, Lcid=1033, Description="")]
        AIBuilderDatasetFile = 10154,
        
        [EnumMember()]
        [OptionSetMetadata("AI Builder Dataset Record", Index=1250, Lcid=1033, Description="")]
        AIBuilderDatasetRecord = 10155,
        
        [EnumMember()]
        [OptionSetMetadata("AI Builder Datasets Container", Index=1248, Lcid=1033, Description="")]
        AIBuilderDatasetsContainer = 10156,
        
        [EnumMember()]
        [OptionSetMetadata("AI Builder File", Index=1247, Lcid=1033, Description="")]
        AIBuilderFile = 10157,
        
        [EnumMember()]
        [OptionSetMetadata("AI Builder File Attached Data", Index=1254, Lcid=1033, Description="")]
        AIBuilderFileAttachedData = 10158,
        
        [EnumMember()]
        [OptionSetMetadata("Help Page", Index=1156, Lcid=1033, Description="")]
        HelpPage = 10159,
        
        [EnumMember()]
        [OptionSetMetadata("Tour", Index=37, Lcid=1033, Description="")]
        Tour = 10160,
        
        [EnumMember()]
        [OptionSetMetadata("BotContent", Index=163, Lcid=1033, Description="")]
        BotContent = 10161,
        
        [EnumMember()]
        [OptionSetMetadata("ConversationTranscript", Index=969, Lcid=1033, Description="Contains the transcripts of conversations between participants such as customers," +
            " Virtual Agents or Human agents.")]
        ConversationTranscript = 10162,
        
        [EnumMember()]
        [OptionSetMetadata("Copilot", Index=986, Lcid=1033, Description="Represents a copilot created in Copilot Studio. https://copilotstudio.microsoft.c" +
            "om/")]
        Copilot = 10163,
        
        [EnumMember()]
        [OptionSetMetadata("Copilot component", Index=987, Lcid=1033, Description="Holds key authoring components of a Copilot such a topics, entities, variables, e" +
            "tc.")]
        Copilotcomponent = 10164,
        
        [EnumMember()]
        [OptionSetMetadata("Copilot component collection", Index=985, Lcid=1033, Description="")]
        Copilotcomponentcollection = 10165,
        
        [EnumMember()]
        [OptionSetMetadata("Comment", Index=941, Lcid=1033, Description="A collaborative comment on a maker artifact")]
        Comment_2 = 10176,
        
        [EnumMember()]
        [OptionSetMetadata("Governance Configuration", Index=812, Lcid=1033, Description="")]
        GovernanceConfiguration = 10177,
        
        [EnumMember()]
        [OptionSetMetadata("Fabric AISkill", Index=713, Lcid=1033, Description="AISkills published from Fabric.")]
        FabricAISkill = 10178,
        
        [EnumMember()]
        [OptionSetMetadata("App Insights Metadata", Index=1191, Lcid=1033, Description="Metadata for App Insights Platform components")]
        AppInsightsMetadata = 10179,
        
        [EnumMember()]
        [OptionSetMetadata("Dataflow Connection Reference", Index=1063, Lcid=1033, Description="Intersecting table between Dataflow and Connection Reference")]
        DataflowConnectionReference = 10180,
        
        [EnumMember()]
        [OptionSetMetadata("Schedule", Index=277, Lcid=1033, Description="Generic refresh schedule")]
        Schedule = 10181,
        
        [EnumMember()]
        [OptionSetMetadata("Dataflow Template", Index=1062, Lcid=1033, Description="An entity to store information about dataflow templates")]
        DataflowTemplate = 10182,
        
        [EnumMember()]
        [OptionSetMetadata("Dataflow DatalakeFolder", Index=1065, Lcid=1033, Description="")]
        DataflowDatalakeFolder = 10183,
        
        [EnumMember()]
        [OptionSetMetadata("Data Movement Service Request", Index=1077, Lcid=1033, Description="Table for Data Movement Service Requests")]
        DataMovementServiceRequest = 10184,
        
        [EnumMember()]
        [OptionSetMetadata("Data Movement Service Request Status", Index=1078, Lcid=1033, Description="Table for Data Movement Service Request Status")]
        DataMovementServiceRequestStatus = 10185,
        
        [EnumMember()]
        [OptionSetMetadata("DMS Sync Request", Index=1085, Lcid=1033, Description="An entity to save DMS sync requests.")]
        DMSSyncRequest = 10186,
        
        [EnumMember()]
        [OptionSetMetadata("DMS Sync Status", Index=1086, Lcid=1033, Description="An entity to save DMS sync statuses.")]
        DMSSyncStatus = 10187,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge Asset Configuration", Index=1103, Lcid=1033, Description="Knowledge asset configurations for data sources configured in knowledge hub.")]
        KnowledgeAssetConfiguration = 10188,
        
        [EnumMember()]
        [OptionSetMetadata("Module Run Detail", Index=1125, Lcid=1033, Description="Result of execution of a MEF model")]
        ModuleRunDetail = 10189,
        
        [EnumMember()]
        [OptionSetMetadata("QnA", Index=319, Lcid=1033, Description="Question and Answers entity")]
        QnA = 10190,
        
        [EnumMember()]
        [OptionSetMetadata("Salesforce Structured Object", Index=286, Lcid=1033, Description="Entity that represents the Salesforce Structured Object.")]
        SalesforceStructuredObject = 10191,
        
        [EnumMember()]
        [OptionSetMetadata("Salesforce Structured QnA Config", Index=287, Lcid=1033, Description="Entity that represents the Salesforce Structured QnA Config.")]
        SalesforceStructuredQnAConfig = 10192,
        
        [EnumMember()]
        [OptionSetMetadata("Workflow Action Status", Index=127, Lcid=1033, Description="PA Workflows action processing status")]
        WorkflowActionStatus = 10193,
        
        [EnumMember()]
        [OptionSetMetadata("FederatedKnowledgeConfiguration", Index=700, Lcid=1033, Description="FederatedKnowledgeConfigurations component")]
        FederatedKnowledgeConfiguration = 10194,
        
        [EnumMember()]
        [OptionSetMetadata("FederatedKnowledgeEntityConfiguration", Index=701, Lcid=1033, Description="FederatedKnowledgeEntityConfigurations component")]
        FederatedKnowledgeEntityConfiguration = 10195,
        
        [EnumMember()]
        [OptionSetMetadata("Form Mapping", Index=1042, Lcid=1033, Description="")]
        FormMapping = 10196,
        
        [EnumMember()]
        [OptionSetMetadata("PDF Setting", Index=508, Lcid=1033, Description="PDF Settings to save enabled pdf entities")]
        PDFSetting = 10197,
        
        [EnumMember()]
        [OptionSetMetadata("Activity File Attachment", Index=905, Lcid=1033, Description="Attachment entity with data stored in file type attribute")]
        ActivityFileAttachment = 10198,
        
        [EnumMember()]
        [OptionSetMetadata("Teams chat", Index=999, Lcid=1033, Description="For internal use only. Entity which stores association data of Dynamics 365 recor" +
            "ds with Microsoft Teams chat")]
        Teamschat = 10199,
        
        [EnumMember()]
        [OptionSetMetadata("Service Configuration", Index=52, Lcid=1033, Description="")]
        ServiceConfiguration = 10200,
        
        [EnumMember()]
        [OptionSetMetadata("SLA KPI", Index=82, Lcid=1033, Description="")]
        SLAKPI = 10201,
        
        [EnumMember()]
        [OptionSetMetadata("Integrated search provider", Index=1145, Lcid=1033, Description="Ingest and search files, documents, or articles from data sources outside of your" +
            " current Dynamics 365 organization with a unified ranking.")]
        Integratedsearchprovider = 10202,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge Management Setting", Index=1107, Lcid=1033, Description="Setup knowledge management for your organization.")]
        KnowledgeManagementSetting = 10203,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge Federated Article", Index=1015, Lcid=1033, Description="")]
        KnowledgeFederatedArticle = 10204,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge Federated Article Incident", Index=1022, Lcid=1033, Description="")]
        KnowledgeFederatedArticleIncident = 10205,
        
        [EnumMember()]
        [OptionSetMetadata("Search provider", Index=1119, Lcid=1033, Description="")]
        Searchprovider = 10206,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge Article Image", Index=1115, Lcid=1033, Description="")]
        KnowledgeArticleImage = 10207,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge Configuration", Index=1101, Lcid=1033, Description="Represents the possible settings used in Knowledge management")]
        KnowledgeConfiguration = 10208,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge Interaction Insight", Index=1100, Lcid=1033, Description="Knowledge Interaction Insight")]
        KnowledgeInteractionInsight = 10209,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge Search Insight", Index=1104, Lcid=1033, Description="Knowledge Search Insight")]
        KnowledgeSearchInsight = 10210,
        
        [EnumMember()]
        [OptionSetMetadata("Favorite knowledge article", Index=1014, Lcid=1033, Description="Entity for favorite knowledge articles")]
        Favoriteknowledgearticle = 10211,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge article language setting", Index=1112, Lcid=1033, Description="Allows you to select default language for knowledge authoring.")]
        Knowledgearticlelanguagesetting = 10212,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge Article Attachment", Index=1110, Lcid=1033, Description="")]
        KnowledgeArticleAttachment = 10213,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge personalization", Index=1117, Lcid=1033, Description="Allows users to personalize their knowledge search filters and knowledge authorin" +
            "g language.")]
        Knowledgepersonalization = 10214,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge Article Template", Index=1102, Lcid=1033, Description="Organizational Knowledge Article Template for Internal and external creation of K" +
            "nowledge Articles.")]
        KnowledgeArticleTemplate = 10215,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge search personal filter config", Index=1108, Lcid=1033, Description="Allows you to configure and manage personal filter settings.")]
        Knowledgesearchpersonalfilterconfig = 10216,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge search filter", Index=1106, Lcid=1033, Description="Allows you to configure and manage filter settings.")]
        Knowledgesearchfilter = 10217,
        
        [EnumMember()]
        [OptionSetMetadata("SupportUserTable", Index=477, Lcid=1033, Description="")]
        SupportUserTable = 10219,
        
        [EnumMember()]
        [OptionSetMetadata("FxExpression", Index=819, Lcid=1033, Description="")]
        FxExpression = 10220,
        
        [EnumMember()]
        [OptionSetMetadata("Function", Index=1040, Lcid=1033, Description="")]
        Function = 10221,
        
        [EnumMember()]
        [OptionSetMetadata("Plug-in", Index=543, Lcid=1033, Description="")]
        Plugin = 10222,
        
        [EnumMember()]
        [OptionSetMetadata("PowerfxRule", Index=533, Lcid=1033, Description="")]
        PowerfxRule = 10223,
        
        [EnumMember()]
        [OptionSetMetadata("Planner Business Scenario", Index=513, Lcid=1033, Description="For internal use only. The Business Scenario record to be created in Planner.")]
        PlannerBusinessScenario = 10224,
        
        [EnumMember()]
        [OptionSetMetadata("Planner Sync Action", Index=542, Lcid=1033, Description="The Planner Sync Action to be executed.")]
        PlannerSyncAction = 10225,
        
        [EnumMember()]
        [OptionSetMetadata("Ms Graph Resource To Subscription", Index=108, Lcid=1033, Description="For internal use only. The mapping between Ms Graph Resources and Subscriptions.")]
        MsGraphResourceToSubscription = 10226,
        
        [EnumMember()]
        [OptionSetMetadata("Virtual Entity  Metadata", Index=456, Lcid=1033, Description="Holds  metadata values for virtual entities")]
        VirtualEntityMetadata = 10227,
        
        [EnumMember()]
        [OptionSetMetadata("Background Operation", Index=870, Lcid=1033, Description="")]
        BackgroundOperation = 10228,
        
        [EnumMember()]
        [OptionSetMetadata("Report Parameter", Index=592, Lcid=1033, Description="")]
        ReportParameter = 10229,
        
        [EnumMember()]
        [OptionSetMetadata("MobileOfflineProfileExtension", Index=1238, Lcid=1033, Description="")]
        MobileOfflineProfileExtension = 10230,
        
        [EnumMember()]
        [OptionSetMetadata("MobileOfflineProfileItemFilter", Index=1244, Lcid=1033, Description="")]
        MobileOfflineProfileItemFilter = 10231,
        
        [EnumMember()]
        [OptionSetMetadata("TeamMobileOfflineProfileMembership", Index=497, Lcid=1033, Description="")]
        TeamMobileOfflineProfileMembership = 10232,
        
        [EnumMember()]
        [OptionSetMetadata("UserMobileOfflineProfileMembership", Index=430, Lcid=1033, Description="")]
        UserMobileOfflineProfileMembership = 10233,
        
        [EnumMember()]
        [OptionSetMetadata("OrganizationDataSyncSubscription", Index=520, Lcid=1033, Description="")]
        OrganizationDataSyncSubscription = 10234,
        
        [EnumMember()]
        [OptionSetMetadata("OrganizationDataSyncSubscriptionEntity", Index=518, Lcid=1033, Description="")]
        OrganizationDataSyncSubscriptionEntity = 10235,
        
        [EnumMember()]
        [OptionSetMetadata("OrganizationDataSyncSubscriptionFnoTable", Index=519, Lcid=1033, Description="")]
        OrganizationDataSyncSubscriptionFnoTable = 10236,
        
        [EnumMember()]
        [OptionSetMetadata("OrganizationDataSyncFnoState", Index=521, Lcid=1033, Description="Information regarding data synchronization state")]
        OrganizationDataSyncFnoState = 10237,
        
        [EnumMember()]
        [OptionSetMetadata("OrganizationDataSyncState", Index=522, Lcid=1033, Description="Information regarding data synchronization state")]
        OrganizationDataSyncState = 10238,
        
        [EnumMember()]
        [OptionSetMetadata("ArchiveCleanupInfo", Index=850, Lcid=1033, Description="This is Deprecated Entity.")]
        ArchiveCleanupInfo = 10239,
        
        [EnumMember()]
        [OptionSetMetadata("ArchiveCleanupOperation", Index=851, Lcid=1033, Description="This is Deprecated Entity.")]
        ArchiveCleanupOperation = 10240,
        
        [EnumMember()]
        [OptionSetMetadata("BulkArchiveConfig", Index=983, Lcid=1033, Description="This is Deprecated Entity.")]
        BulkArchiveConfig = 10241,
        
        [EnumMember()]
        [OptionSetMetadata("BulkArchiveFailureDetail", Index=984, Lcid=1033, Description="This is Deprecated Entity.")]
        BulkArchiveFailureDetail = 10242,
        
        [EnumMember()]
        [OptionSetMetadata("BulkArchiveOperation", Index=991, Lcid=1033, Description="This is Deprecated Entity.")]
        BulkArchiveOperation = 10243,
        
        [EnumMember()]
        [OptionSetMetadata("BulkArchiveOperationDetail", Index=992, Lcid=1033, Description="This is Deprecated Entity.")]
        BulkArchiveOperationDetail = 10244,
        
        [EnumMember()]
        [OptionSetMetadata("EnableArchivalRequest", Index=745, Lcid=1033, Description="For internal use only.")]
        EnableArchivalRequest = 10245,
        
        [EnumMember()]
        [OptionSetMetadata("MetadataForArchival", Index=783, Lcid=1033, Description="Holds  metadata values of tables for retention")]
        MetadataForArchival = 10246,
        
        [EnumMember()]
        [OptionSetMetadata("ReconciliationEntityInfo", Index=660, Lcid=1033, Description="Table level details of the data lake reconciliation process. For internal use onl" +
            "y.")]
        ReconciliationEntityInfo = 10247,
        
        [EnumMember()]
        [OptionSetMetadata("ReconciliationEntityStepInfo", Index=661, Lcid=1033, Description="Step level details of the data lake reconciliation process. For internal use only" +
            ".")]
        ReconciliationEntityStepInfo = 10248,
        
        [EnumMember()]
        [OptionSetMetadata("ReconciliationInfo", Index=606, Lcid=1033, Description="Information about data lake reconciliation operation. For internal use only.")]
        ReconciliationInfo = 10249,
        
        [EnumMember()]
        [OptionSetMetadata("RetentionCleanupInfo", Index=628, Lcid=1033, Description="Holds watermark information about retention cleanup operations. For internal use " +
            "only.")]
        RetentionCleanupInfo = 10250,
        
        [EnumMember()]
        [OptionSetMetadata("RetentionCleanupOperation", Index=626, Lcid=1033, Description="Holds data of cleanup operations such as reconcile and purge.  For internal use o" +
            "nly.")]
        RetentionCleanupOperation = 10251,
        
        [EnumMember()]
        [OptionSetMetadata("RetentionConfig", Index=624, Lcid=1033, Description="Holds retention policies for a table.")]
        RetentionConfig = 10252,
        
        [EnumMember()]
        [OptionSetMetadata("RetentionFailureDetail", Index=625, Lcid=1033, Description="Retention failure details.")]
        RetentionFailureDetail = 10253,
        
        [EnumMember()]
        [OptionSetMetadata("RetentionOperation", Index=632, Lcid=1033, Description="Retention policy execution details.")]
        RetentionOperation = 10254,
        
        [EnumMember()]
        [OptionSetMetadata("RetentionOperationDetail", Index=633, Lcid=1033, Description="Table level details of retention execution.")]
        RetentionOperationDetail = 10255,
        
        [EnumMember()]
        [OptionSetMetadata("RetentionSuccessDetail", Index=631, Lcid=1033, Description="Retention Success details.")]
        RetentionSuccessDetail = 10256,
        
        [EnumMember()]
        [OptionSetMetadata("CertificateCredential", Index=995, Lcid=1033, Description="Contains data to represent an Azure Active Directory Application used to connect " +
            "to secure web-hosted resources.")]
        CertificateCredential = 10257,
        
        [EnumMember()]
        [OptionSetMetadata("Notification", Index=846, Lcid=1033, Description="Notification to be provided to a user.")]
        Notification_2 = 10258,
        
        [EnumMember()]
        [OptionSetMetadata("User Rating", Index=458, Lcid=1033, Description="")]
        UserRating = 10259,
        
        [EnumMember()]
        [OptionSetMetadata("Mobile App", Index=1129, Lcid=1033, Description="Mobile App")]
        MobileApp = 10260,
        
        [EnumMember()]
        [OptionSetMetadata("Insights Store Data Source", Index=1090, Lcid=1033, Description="")]
        InsightsStoreDataSource = 10261,
        
        [EnumMember()]
        [OptionSetMetadata("Insights Store Virtual Entity", Index=1144, Lcid=1033, Description="Insights Store Virtual Entity")]
        InsightsStoreVirtualEntity = 10262,
        
        [EnumMember()]
        [OptionSetMetadata("RoleEditorLayout", Index=620, Lcid=1033, Description="")]
        RoleEditorLayout = 10263,
        
        [EnumMember()]
        [OptionSetMetadata("Deleted Record Reference", Index=735, Lcid=1033, Description="Deleted Record Reference")]
        DeletedRecordReference = 10264,
        
        [EnumMember()]
        [OptionSetMetadata("Restore Deleted Records Configuration", Index=604, Lcid=1033, Description="Holds Restore Deleted Records configuration for entities")]
        RestoreDeletedRecordsConfiguration = 10265,
        
        [EnumMember()]
        [OptionSetMetadata("App Action", Index=915, Lcid=1033, Description="Contains Modern Command Information")]
        AppAction = 10266,
        
        [EnumMember()]
        [OptionSetMetadata("App Action Migration", Index=913, Lcid=1033, Description="")]
        AppActionMigration = 10267,
        
        [EnumMember()]
        [OptionSetMetadata("App Action Rule", Index=914, Lcid=1033, Description="")]
        AppActionRule = 10268,
        
        [EnumMember()]
        [OptionSetMetadata("Card", Index=1012, Lcid=1033, Description="Card")]
        Card = 10271,
        
        [EnumMember()]
        [OptionSetMetadata("Card State Item", Index=1013, Lcid=1033, Description="")]
        CardStateItem = 10272,
        
        [EnumMember()]
        [OptionSetMetadata("Entity link chat configuration", Index=1034, Lcid=1033, Description="")]
        Entitylinkchatconfiguration = 10275,
        
        [EnumMember()]
        [OptionSetMetadata("AI Skill Config", Index=909, Lcid=1033, Description="")]
        AISkillConfig = 10276,
        
        [EnumMember()]
        [OptionSetMetadata("Rich Text Attachment", Index=270, Lcid=1033, Description="Image or file attached to a rich text field")]
        RichTextAttachment = 10277,
        
        [EnumMember()]
        [OptionSetMetadata("Custom Control Extended Setting", Index=1305, Lcid=1033, Description="")]
        CustomControlExtendedSetting = 10278,
        
        [EnumMember()]
        [OptionSetMetadata("Timeline Pin", Index=40, Lcid=1033, Description="Timeline Pin Record")]
        TimelinePin = 10279,
        
        [EnumMember()]
        [OptionSetMetadata("Virtual Connector Data Source", Index=1346, Lcid=1033, Description="")]
        VirtualConnectorDataSource = 10280,
        
        [EnumMember()]
        [OptionSetMetadata("Virtual Table Column Candidate", Index=142, Lcid=1033, Description="")]
        VirtualTableColumnCandidate = 10281,
        
        [EnumMember()]
        [OptionSetMetadata("PM Analysis History", Index=198, Lcid=1033, Description="")]
        PMAnalysisHistory = 10283,
        
        [EnumMember()]
        [OptionSetMetadata("PM Business Rule Automation Config", Index=199, Lcid=1033, Description="")]
        PMBusinessRuleAutomationConfig = 10284,
        
        [EnumMember()]
        [OptionSetMetadata("PM Calendar", Index=197, Lcid=1033, Description="")]
        PMCalendar = 10285,
        
        [EnumMember()]
        [OptionSetMetadata("PM Calendar Version", Index=195, Lcid=1033, Description="")]
        PMCalendarVersion = 10286,
        
        [EnumMember()]
        [OptionSetMetadata("PM Inferred Task", Index=196, Lcid=1033, Description="")]
        PMInferredTask = 10287,
        
        [EnumMember()]
        [OptionSetMetadata("PM Process Extended Metadata Version", Index=253, Lcid=1033, Description="")]
        PMProcessExtendedMetadataVersion = 10288,
        
        [EnumMember()]
        [OptionSetMetadata("PM Process Template", Index=310, Lcid=1033, Description="")]
        PMProcessTemplate = 10289,
        
        [EnumMember()]
        [OptionSetMetadata("PM Process User Settings", Index=311, Lcid=1033, Description="")]
        PMProcessUserSettings = 10290,
        
        [EnumMember()]
        [OptionSetMetadata("PM Process Version", Index=309, Lcid=1033, Description="")]
        PMProcessVersion = 10291,
        
        [EnumMember()]
        [OptionSetMetadata("PM Recording", Index=307, Lcid=1033, Description="")]
        PMRecording = 10292,
        
        [EnumMember()]
        [OptionSetMetadata("PM Simulation", Index=308, Lcid=1033, Description="")]
        PMSimulation = 10293,
        
        [EnumMember()]
        [OptionSetMetadata("PM Template", Index=315, Lcid=1033, Description="")]
        PMTemplate = 10294,
        
        [EnumMember()]
        [OptionSetMetadata("PM View", Index=316, Lcid=1033, Description="")]
        PMView = 10295,
        
        [EnumMember()]
        [OptionSetMetadata("Analysis Component", Index=1203, Lcid=1033, Description="")]
        AnalysisComponent = 10296,
        
        [EnumMember()]
        [OptionSetMetadata("Analysis Job", Index=1201, Lcid=1033, Description="")]
        AnalysisJob = 10297,
        
        [EnumMember()]
        [OptionSetMetadata("Analysis Override", Index=1199, Lcid=1033, Description="")]
        AnalysisOverride = 10298,
        
        [EnumMember()]
        [OptionSetMetadata("Analysis Result", Index=1200, Lcid=1033, Description="")]
        AnalysisResult = 10299,
        
        [EnumMember()]
        [OptionSetMetadata("Analysis Result Detail", Index=1193, Lcid=1033, Description="")]
        AnalysisResultDetail = 10300,
        
        [EnumMember()]
        [OptionSetMetadata("Solution Health Rule", Index=66, Lcid=1033, Description="")]
        SolutionHealthRule = 10301,
        
        [EnumMember()]
        [OptionSetMetadata("Solution Health Rule Argument", Index=67, Lcid=1033, Description="")]
        SolutionHealthRuleArgument = 10302,
        
        [EnumMember()]
        [OptionSetMetadata("Solution Health Rule Set", Index=65, Lcid=1033, Description="Represents a set that owns a number of solution health rules.")]
        SolutionHealthRuleSet = 10303,
        
        [EnumMember()]
        [OptionSetMetadata("Power BI Dataset", Index=528, Lcid=1033, Description="")]
        PowerBIDataset = 10304,
        
        [EnumMember()]
        [OptionSetMetadata("powerbidatasetapdx", Index=529, Lcid=1033, Description="PowerBI Dataset appendix entity - for unmanaged technical attributes")]
        powerbidatasetapdx = 10305,
        
        [EnumMember()]
        [OptionSetMetadata("Power BI Mashup Parameter", Index=536, Lcid=1033, Description="")]
        PowerBIMashupParameter = 10306,
        
        [EnumMember()]
        [OptionSetMetadata("Power BI Report", Index=537, Lcid=1033, Description="")]
        PowerBIReport = 10307,
        
        [EnumMember()]
        [OptionSetMetadata("powerbireportapdx", Index=535, Lcid=1033, Description="PowerBI Report appendix entity for unmanaged technical attributes")]
        powerbireportapdx = 10308,
        
        [EnumMember()]
        [OptionSetMetadata("File Upload", Index=1023, Lcid=1033, Description="")]
        FileUpload = 10309,
        
        [EnumMember()]
        [OptionSetMetadata("MainFewShot", Index=798, Lcid=1033, Description="This fewshot entity will only be updated during solution installation.")]
        MainFewShot = 10310,
        
        [EnumMember()]
        [OptionSetMetadata("MakerFewShot", Index=799, Lcid=1033, Description="This fewshot is updated by maker for testing the queries and by the NL2SQ with th" +
            "e results")]
        MakerFewShot = 10311,
        
        [EnumMember()]
        [OptionSetMetadata("SearchAttributeSettings", Index=414, Lcid=1033, Description="")]
        SearchAttributeSettings = 10312,
        
        [EnumMember()]
        [OptionSetMetadata("SearchCustomAnalyzer", Index=412, Lcid=1033, Description="")]
        SearchCustomAnalyzer = 10313,
        
        [EnumMember()]
        [OptionSetMetadata("SearchRelationshipSettings", Index=413, Lcid=1033, Description="")]
        SearchRelationshipSettings = 10314,
        
        [EnumMember()]
        [OptionSetMetadata("SearchResultsCache", Index=420, Lcid=1033, Description="Cache search results internally")]
        SearchResultsCache = 10315,
        
        [EnumMember()]
        [OptionSetMetadata("Search Telemetry", Index=421, Lcid=1033, Description="Entity to log telemetry that used to improve search quality")]
        SearchTelemetry = 10316,
        
        [EnumMember()]
        [OptionSetMetadata("ViewAsExampleQuestion", Index=455, Lcid=1033, Description="This fewshot is converted by view")]
        ViewAsExampleQuestion = 10317,
        
        [EnumMember()]
        [OptionSetMetadata("CopilotExampleQuestion", Index=961, Lcid=1033, Description="CopilotExampleQuestions Component")]
        CopilotExampleQuestion = 10318,
        
        [EnumMember()]
        [OptionSetMetadata("CopilotGlossaryTerm", Index=954, Lcid=1033, Description="CopilotGlossaryTerm Component")]
        CopilotGlossaryTerm = 10319,
        
        [EnumMember()]
        [OptionSetMetadata("CopilotSynonyms", Index=955, Lcid=1033, Description="CopilotSynonyms Component")]
        CopilotSynonyms = 10320,
        
        [EnumMember()]
        [OptionSetMetadata("Site Component", Index=534, Lcid=1033, Description="")]
        SiteComponent = 10321,
        
        [EnumMember()]
        [OptionSetMetadata("Site", Index=591, Lcid=1033, Description="")]
        Site_2 = 10322,
        
        [EnumMember()]
        [OptionSetMetadata("Site Language", Index=648, Lcid=1033, Description="")]
        SiteLanguage = 10323,
        
        [EnumMember()]
        [OptionSetMetadata("Power Pages Site Published", Index=649, Lcid=1033, Description="")]
        PowerPagesSitePublished = 10324,
        
        [EnumMember()]
        [OptionSetMetadata("External Identity", Index=887, Lcid=1033, Description="")]
        ExternalIdentity = 10327,
        
        [EnumMember()]
        [OptionSetMetadata("Invitation", Index=888, Lcid=1033, Description="Send invitations to existing contacts or email addresses and assign them to web r" +
            "oles upon redemption.")]
        Invitation = 10328,
        
        [EnumMember()]
        [OptionSetMetadata("Invite Redemption", Index=895, Lcid=1033, Description="Holds information about the redemption of an invite.")]
        InviteRedemption = 10329,
        
        [EnumMember()]
        [OptionSetMetadata("Portal Comment", Index=896, Lcid=1033, Description="An activity which is used to share information between the user and the customer " +
            "on the portal.")]
        PortalComment = 10330,
        
        [EnumMember()]
        [OptionSetMetadata("Setting", Index=894, Lcid=1033, Description="")]
        Setting = 10331,
        
        [EnumMember()]
        [OptionSetMetadata("Multistep Form Session", Index=892, Lcid=1033, Description="Serves as a mechanism to log the occurrence of an incomplete multistep form entry" +
            " for a given user so they can return and complete it later.")]
        MultistepFormSession = 10332,
        
        [EnumMember()]
        [OptionSetMetadata("Ad Placement", Index=114, Lcid=1033, Description="")]
        AdPlacement = 10336,
        
        [EnumMember()]
        [OptionSetMetadata("Column Permission", Index=115, Lcid=1033, Description="")]
        ColumnPermission = 10337,
        
        [EnumMember()]
        [OptionSetMetadata("Column Permission Profile", Index=113, Lcid=1033, Description="")]
        ColumnPermissionProfile = 10338,
        
        [EnumMember()]
        [OptionSetMetadata("Content Snippet", Index=111, Lcid=1033, Description="Content snippets are inserted in page templates so that any label, text string or" +
            " image in the template can be content-managed.")]
        ContentSnippet = 10339,
        
        [EnumMember()]
        [OptionSetMetadata("Basic Form", Index=112, Lcid=1033, Description="Defines the form to render for a given entity type.")]
        BasicForm = 10340,
        
        [EnumMember()]
        [OptionSetMetadata("Basic Form Metadata", Index=563, Lcid=1033, Description="Defines the additional behavior modification logic to augment or override the fun" +
            "ctionality of form components that is not possible with Dynamics 365 entity and " +
            "form metadata.")]
        BasicFormMetadata = 10341,
        
        [EnumMember()]
        [OptionSetMetadata("List", Index=564, Lcid=1033, Description="")]
        List = 10342,
        
        [EnumMember()]
        [OptionSetMetadata("Table Permission", Index=562, Lcid=1033, Description="")]
        TablePermission = 10343,
        
        [EnumMember()]
        [OptionSetMetadata("Page Template", Index=560, Lcid=1033, Description="URL of the .aspx page used to create new webpages.")]
        PageTemplate = 10344,
        
        [EnumMember()]
        [OptionSetMetadata("Poll Placement", Index=561, Lcid=1033, Description="")]
        PollPlacement = 10345,
        
        [EnumMember()]
        [OptionSetMetadata("Power Pages Core Entity DS", Index=568, Lcid=1033, Description="")]
        PowerPagesCoreEntityDS = 10346,
        
        [EnumMember()]
        [OptionSetMetadata("Publishing State", Index=569, Lcid=1033, Description="")]
        PublishingState = 10347,
        
        [EnumMember()]
        [OptionSetMetadata("Publishing State Transition Rule", Index=567, Lcid=1033, Description="")]
        PublishingStateTransitionRule = 10348,
        
        [EnumMember()]
        [OptionSetMetadata("Redirect", Index=565, Lcid=1033, Description="")]
        Redirect = 10349,
        
        [EnumMember()]
        [OptionSetMetadata("Shortcut", Index=566, Lcid=1033, Description="")]
        Shortcut = 10350,
        
        [EnumMember()]
        [OptionSetMetadata("Site Marker", Index=559, Lcid=1033, Description="Used by web page templates to locate a specific page of content.")]
        SiteMarker = 10351,
        
        [EnumMember()]
        [OptionSetMetadata("Site Setting", Index=552, Lcid=1033, Description="Site specific settings or variables refferenced by the web site code files.")]
        SiteSetting = 10352,
        
        [EnumMember()]
        [OptionSetMetadata("Web File", Index=553, Lcid=1033, Description="Storage of files used in the web Portals.")]
        WebFile = 10353,
        
        [EnumMember()]
        [OptionSetMetadata("Multistep Form", Index=551, Lcid=1033, Description="Defines the necessary properties and relationships to the other key entities in o" +
            "rder to control the initialization of the form within a web portal.")]
        MultistepForm = 10354,
        
        [EnumMember()]
        [OptionSetMetadata("Multistep Form Metadata", Index=549, Lcid=1033, Description="Defines the additional behavior modification logic to augment or override the fun" +
            "ctionality of form fields that is not possible with Dynamics 365 entity and form" +
            " metadata.")]
        MultistepFormMetadata = 10355,
        
        [EnumMember()]
        [OptionSetMetadata("Form Step", Index=550, Lcid=1033, Description="Defines the flow logic of the form\'s user experience such as steps and conditiona" +
            "l branching.")]
        FormStep = 10356,
        
        [EnumMember()]
        [OptionSetMetadata("Web Link", Index=557, Lcid=1033, Description="A textual or imaged based link to an interal or external URL.")]
        WebLink = 10357,
        
        [EnumMember()]
        [OptionSetMetadata("Web Link Set", Index=558, Lcid=1033, Description="A grouping of web links.")]
        WebLinkSet = 10358,
        
        [EnumMember()]
        [OptionSetMetadata("Web Page", Index=556, Lcid=1033, Description="Web Page")]
        WebPage = 10359,
        
        [EnumMember()]
        [OptionSetMetadata("Web Page Access Control Rule", Index=554, Lcid=1033, Description="")]
        WebPageAccessControlRule = 10360,
        
        [EnumMember()]
        [OptionSetMetadata("Web Role", Index=555, Lcid=1033, Description="Sets the user\'s role for the Portal.")]
        WebRole = 10361,
        
        [EnumMember()]
        [OptionSetMetadata("Website", Index=584, Lcid=1033, Description="Web Portal")]
        Website = 10362,
        
        [EnumMember()]
        [OptionSetMetadata("Website Access", Index=585, Lcid=1033, Description="")]
        WebsiteAccess = 10363,
        
        [EnumMember()]
        [OptionSetMetadata("Website Language", Index=583, Lcid=1033, Description="Languages supported and publishing status for the portal")]
        WebsiteLanguage = 10364,
        
        [EnumMember()]
        [OptionSetMetadata("Web Template", Index=581, Lcid=1033, Description="")]
        WebTemplate = 10365,
        
        [EnumMember()]
        [OptionSetMetadata("Power Pages Scan Report", Index=646, Lcid=1033, Description="Power Pages Scan Report")]
        PowerPagesScanReport = 10372,
        
        [EnumMember()]
        [OptionSetMetadata("Power Pages Log", Index=647, Lcid=1033, Description="")]
        PowerPagesLog = 10373,
        
        [EnumMember()]
        [OptionSetMetadata("PowerPagesManagedIdentity", Index=645, Lcid=1033, Description="")]
        PowerPagesManagedIdentity = 10374,
        
        [EnumMember()]
        [OptionSetMetadata("Power Pages Site AI Feedback", Index=653, Lcid=1033, Description="")]
        PowerPagesSiteAIFeedback = 10375,
        
        [EnumMember()]
        [OptionSetMetadata("Catalog Submission Files", Index=106, Lcid=1033, Description="Files associated with the package that will be used as part of the submission to " +
            "the catalog system.")]
        CatalogSubmissionFiles = 10380,
        
        [EnumMember()]
        [OptionSetMetadata("Package Submission Store", Index=107, Lcid=1033, Description="Manages submissions to the Catalog and provisioning")]
        PackageSubmissionStore = 10381,
        
        [EnumMember()]
        [OptionSetMetadata("signal", Index=358, Lcid=1033, Description="")]
        signal = 10382,
        
        [EnumMember()]
        [OptionSetMetadata("trait", Index=436, Lcid=1033, Description="")]
        trait = 10383,
        
        [EnumMember()]
        [OptionSetMetadata("List Operation", Index=796, Lcid=1033, Description="System operation used to perform lengthy and asynchronous list operations on larg" +
            "e data sets, such as adding members to a list.")]
        ListOperation = 10384,
        
        [EnumMember()]
        [OptionSetMetadata("Marketing Form Display Attributes", Index=786, Lcid=1033, Description="Setting to allow customized form for In-app Marketing Form")]
        MarketingFormDisplayAttributes = 10385,
        
        [EnumMember()]
        [OptionSetMetadata("Database Version", Index=1057, Lcid=1033, Description="Stores the latest database version for a solution, for internal use only.")]
        DatabaseVersion = 10386,
        
        [EnumMember()]
        [OptionSetMetadata("Upgrade Run", Index=22, Lcid=1033, Description="Contains logging information about a run of a Package Deployer package that upgra" +
            "des a solution")]
        UpgradeRun = 10387,
        
        [EnumMember()]
        [OptionSetMetadata("Upgrade Step", Index=29, Lcid=1033, Description="One step during an upgrade, such as a single method or stored procedure.")]
        UpgradeStep = 10388,
        
        [EnumMember()]
        [OptionSetMetadata("Upgrade Version", Index=30, Lcid=1033, Description="Information about upgrading from one release to the next release")]
        UpgradeVersion = 10389,
        
        [EnumMember()]
        [OptionSetMetadata("Activity monitor", Index=904, Lcid=1033, Description="Entity that tracks ARC runtime information.")]
        Activitymonitor = 10390,
        
        [EnumMember()]
        [OptionSetMetadata("Originating Queue Mapping", Index=204, Lcid=1033, Description="This entity maps entities created by ARC to the queue that was being procesed at " +
            "that time")]
        OriginatingQueueMapping = 10391,
        
        [EnumMember()]
        [OptionSetMetadata("Unified Routing Setup Tracker", Index=23, Lcid=1033, Description="Unified Routing Setup Trackers")]
        UnifiedRoutingSetupTracker = 10392,
        
        [EnumMember()]
        [OptionSetMetadata("Available Times", Index=883, Lcid=1033, Description="")]
        AvailableTimes = 10393,
        
        [EnumMember()]
        [OptionSetMetadata("Available Times Data Source", Index=876, Lcid=1033, Description="")]
        AvailableTimesDataSource = 10394,
        
        [EnumMember()]
        [OptionSetMetadata("resource group data source", Index=599, Lcid=1033, Description="")]
        resourcegroupdatasource = 10395,
        
        [EnumMember()]
        [OptionSetMetadata("Virtual Resource Group Resource", Index=463, Lcid=1033, Description="")]
        VirtualResourceGroupResource = 10396,
        
        [EnumMember()]
        [OptionSetMetadata("Migration tracker", Index=1128, Lcid=1033, Description="Entity that tracks the migration process of legacy to modern SLA/ARC items")]
        Migrationtracker = 10397,
        
        [EnumMember()]
        [OptionSetMetadata("Asset Category Template Association", Index=1218, Lcid=1033, Description="")]
        AssetCategoryTemplateAssociation = 10398,
        
        [EnumMember()]
        [OptionSetMetadata("Asset Template Association", Index=1219, Lcid=1033, Description="")]
        AssetTemplateAssociation = 10399,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Asset", Index=1306, Lcid=1033, Description="Specify Customer Asset.")]
        CustomerAsset = 10400,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Asset Attachment", Index=1299, Lcid=1033, Description="Attachments for Customer Asset")]
        CustomerAssetAttachment = 10403,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Asset Category", Index=1292, Lcid=1033, Description="The Category of Customer Asset.")]
        CustomerAssetCategory = 10404,
        
        [EnumMember()]
        [OptionSetMetadata("Functional Location", Index=1041, Lcid=1033, Description="")]
        FunctionalLocation = 10405,
        
        [EnumMember()]
        [OptionSetMetadata("Functional Location Type", Index=1098, Lcid=1033, Description="")]
        FunctionalLocationType = 10406,
        
        [EnumMember()]
        [OptionSetMetadata("Location Template Association", Index=1130, Lcid=1033, Description="Captures the relationship between a Property Template, which in turns captures a " +
            "set of Properties, and a Functional Location.")]
        LocationTemplateAssociation = 10407,
        
        [EnumMember()]
        [OptionSetMetadata("Functional Location Type Template Association", Index=1123, Lcid=1033, Description="")]
        FunctionalLocationTypeTemplateAssociation = 10408,
        
        [EnumMember()]
        [OptionSetMetadata("Property Definition", Index=335, Lcid=1033, Description="")]
        PropertyDefinition = 10409,
        
        [EnumMember()]
        [OptionSetMetadata("Property Asset Association", Index=333, Lcid=1033, Description="")]
        PropertyAssetAssociation = 10410,
        
        [EnumMember()]
        [OptionSetMetadata("Property Location Association", Index=334, Lcid=1033, Description="Captures the relationship between a Property and a Functional Location.")]
        PropertyLocationAssociation = 10411,
        
        [EnumMember()]
        [OptionSetMetadata("Property Log", Index=327, Lcid=1033, Description="")]
        PropertyLog = 10412,
        
        [EnumMember()]
        [OptionSetMetadata("Property Template Association", Index=320, Lcid=1033, Description="")]
        PropertyTemplateAssociation = 10413,
        
        [EnumMember()]
        [OptionSetMetadata("Template For Properties", Index=36, Lcid=1033, Description="")]
        TemplateForProperties = 10414,
        
        [EnumMember()]
        [OptionSetMetadata("Warranty", Index=137, Lcid=1033, Description="")]
        Warranty = 10415,
        
        [EnumMember()]
        [OptionSetMetadata("IoT Alert", Index=1178, Lcid=1033, Description="")]
        IoTAlert = 10422,
        
        [EnumMember()]
        [OptionSetMetadata("IoT Device", Index=1179, Lcid=1033, Description="Represents a connected device that can be registered with an IoT provider.")]
        IoTDevice = 10423,
        
        [EnumMember()]
        [OptionSetMetadata("IoT Device Category", Index=1172, Lcid=1033, Description="Used to categorize IoT devices.")]
        IoTDeviceCategory = 10424,
        
        [EnumMember()]
        [OptionSetMetadata("IoT Device Command", Index=1165, Lcid=1033, Description="Represents an outgoing message to a device connected to an IoT provider.")]
        IoTDeviceCommand = 10425,
        
        [EnumMember()]
        [OptionSetMetadata("IoT Device Command Definition", Index=1166, Lcid=1033, Description="Metadata for commands that a device or a device category supports.")]
        IoTDeviceCommandDefinition = 10426,
        
        [EnumMember()]
        [OptionSetMetadata("IoT Device Data History", Index=1164, Lcid=1033, Description="The name of the entity that holds the device data every time a device data pull o" +
            "ccurs between Dynamics 365 and an IoT provider")]
        IoTDeviceDataHistory = 10427,
        
        [EnumMember()]
        [OptionSetMetadata("IoT Device Property", Index=1162, Lcid=1033, Description="Link entity between IoT Device Category and IoT Property Definition. This is used" +
            " to model properties and tags for devices.")]
        IoTDeviceProperty = 10428,
        
        [EnumMember()]
        [OptionSetMetadata("IoT Device Registration History", Index=1163, Lcid=1033, Description="Tracks registration activities on an IoT device.")]
        IoTDeviceRegistrationHistory = 10429,
        
        [EnumMember()]
        [OptionSetMetadata("IoT Device Visualization Configuration", Index=1170, Lcid=1033, Description="IoT Device Visualization Configuration")]
        IoTDeviceVisualizationConfiguration = 10430,
        
        [EnumMember()]
        [OptionSetMetadata("IoT Field Mapping", Index=1171, Lcid=1033, Description="")]
        IoTFieldMapping = 10431,
        
        [EnumMember()]
        [OptionSetMetadata("IoT Property Definition", Index=1169, Lcid=1033, Description="Defines a device property or a parameter that can be used for one or more command" +
            " definitions.")]
        IoTPropertyDefinition = 10432,
        
        [EnumMember()]
        [OptionSetMetadata("IoT Provider", Index=1167, Lcid=1033, Description="The IoT Provider where a device is registered and through which all interactions " +
            "with the device take place")]
        IoTProvider = 10433,
        
        [EnumMember()]
        [OptionSetMetadata("IoT Provider Instance", Index=1168, Lcid=1033, Description="An instance of an IoT Provider.")]
        IoTProviderInstance = 10434,
        
        [EnumMember()]
        [OptionSetMetadata("IoT Settings", Index=1113, Lcid=1033, Description="")]
        IoTSettings = 10435,
        
        [EnumMember()]
        [OptionSetMetadata("IoT Alert to Case Process", Index=1114, Lcid=1033, Description="Base entity for process IoT to Case Process")]
        IoTAlerttoCaseProcess = 10438,
        
        [EnumMember()]
        [OptionSetMetadata("Playbook Callable Context", Index=1212, Lcid=1033, Description="")]
        PlaybookCallableContext = 10440,
        
        [EnumMember()]
        [OptionSetMetadata("Playbook activity", Index=193, Lcid=1033, Description="Stores the details of the activities to be created when a playbook is launched.")]
        Playbookactivity = 10441,
        
        [EnumMember()]
        [OptionSetMetadata("Playbook activity attribute", Index=194, Lcid=1033, Description="Stores attribute names and values of the playbook activity.")]
        Playbookactivityattribute = 10442,
        
        [EnumMember()]
        [OptionSetMetadata("[DEPRECATED] Playbook category", Index=192, Lcid=1033, Description="List of categories for which a playbook can be created.")]
        DEPRECATEDPlaybookcategory = 10443,
        
        [EnumMember()]
        [OptionSetMetadata("Playbook", Index=190, Lcid=1033, Description="Actual instance of a playbook template once it is launched.")]
        Playbook = 10444,
        
        [EnumMember()]
        [OptionSetMetadata("[DEPRECATED] Playbook template", Index=191, Lcid=1033, Description="Playbook templates contains the definition of the Playbook that helps to standard" +
            "ize a set of best practices or next best actions.")]
        DEPRECATEDPlaybooktemplate = 10445,
        
        [EnumMember()]
        [OptionSetMetadata("admin_settings_entity", Index=891, Lcid=1033, Description="")]
        admin_settings_entity = 10447,
        
        [EnumMember()]
        [OptionSetMetadata("Collab Space Team Association", Index=1315, Lcid=1033, Description="Collab Space Team Association")]
        CollabSpaceTeamAssociation = 10448,
        
        [EnumMember()]
        [OptionSetMetadata("CRM Connection", Index=1301, Lcid=1033, Description="")]
        CRMConnection = 10449,
        
        [EnumMember()]
        [OptionSetMetadata("External CRM", Index=1018, Lcid=1033, Description="External CRM - Copilot for Sales")]
        ExternalCRM = 10450,
        
        [EnumMember()]
        [OptionSetMetadata("External Record", Index=1016, Lcid=1033, Description="External Record - Copilot for Sales")]
        ExternalRecord = 10451,
        
        [EnumMember()]
        [OptionSetMetadata("Tagged Record", Index=9, Lcid=1033, Description="Tagged Record - Copilot for Sales")]
        TaggedRecord = 10452,
        
        [EnumMember()]
        [OptionSetMetadata("Copilot for Sales customer list", Index=138, Lcid=1033, Description="")]
        CopilotforSalescustomerlist = 10453,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_vivaentitysetting", Index=139, Lcid=1033, Description="Entity level settings for Copilot for Sales")]
        msdyn_vivaentitysetting = 10454,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_vivaorgextensioncred", Index=146, Lcid=1033, Description="Org level extension credential for Viva apps")]
        msdyn_vivaorgextensioncred = 10455,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_vivaorgsetting", Index=147, Lcid=1033, Description="Org level settings for Copilot for Sales app")]
        msdyn_vivaorgsetting = 10456,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_vivausersetting", Index=145, Lcid=1033, Description="User level settings for Copilot for Sales")]
        msdyn_vivausersetting = 10457,
        
        [EnumMember()]
        [OptionSetMetadata("Sales Copilot Insight", Index=260, Lcid=1033, Description="")]
        SalesCopilotInsight = 10458,
        
        [EnumMember()]
        [OptionSetMetadata("Org level settings for Sales Copilot apps", Index=290, Lcid=1033, Description="Org level settings for Sales Copilot apps")]
        OrglevelsettingsforSalesCopilotapps = 10459,
        
        [EnumMember()]
        [OptionSetMetadata("Sales Copilot User Setting", Index=288, Lcid=1033, Description="")]
        SalesCopilotUserSetting = 10460,
        
        [EnumMember()]
        [OptionSetMetadata("App profile", Index=1183, Lcid=1033, Description="")]
        Appprofile = 10461,
        
        [EnumMember()]
        [OptionSetMetadata("Application Extension", Index=1192, Lcid=1033, Description="")]
        ApplicationExtension = 10462,
        
        [EnumMember()]
        [OptionSetMetadata("Application Tab Template", Index=1190, Lcid=1033, Description="")]
        ApplicationTabTemplate = 10463,
        
        [EnumMember()]
        [OptionSetMetadata("App profile role mapping", Index=1188, Lcid=1033, Description="")]
        Appprofilerolemapping = 10464,
        
        [EnumMember()]
        [OptionSetMetadata("Notification Field", Index=231, Lcid=1033, Description="")]
        NotificationField = 10465,
        
        [EnumMember()]
        [OptionSetMetadata("Notification Template", Index=229, Lcid=1033, Description="")]
        NotificationTemplate = 10466,
        
        [EnumMember()]
        [OptionSetMetadata("Session Template", Index=47, Lcid=1033, Description="")]
        SessionTemplate = 10467,
        
        [EnumMember()]
        [OptionSetMetadata("Template Parameter", Index=34, Lcid=1033, Description="")]
        TemplateParameter = 10468,
        
        [EnumMember()]
        [OptionSetMetadata("Channel Integration Framework v1.0 Provider", Index=1319, Lcid=1033, Description="Entity that holds the configuration data for a channel provider based on Channel " +
            "Integration Framework v1.0")]
        ChannelIntegrationFrameworkv10Provider = 10474,
        
        [EnumMember()]
        [OptionSetMetadata("Notification Field (Deprecated)", Index=1344, Lcid=1033, Description="Defines a field (key, templateValue) that needs to be populated in the notificati" +
            "on body.")]
        NotificationFieldDeprecated = 10475,
        
        [EnumMember()]
        [OptionSetMetadata("Notification Template (Deprecated)", Index=1342, Lcid=1033, Description="Template for a notification")]
        NotificationTemplateDeprecated = 10476,
        
        [EnumMember()]
        [OptionSetMetadata("App Parameter Definition (Deprecated)", Index=1347, Lcid=1033, Description="")]
        AppParameterDefinitionDeprecated = 10477,
        
        [EnumMember()]
        [OptionSetMetadata("Session Templates (Deprecated)", Index=1343, Lcid=1033, Description="")]
        SessionTemplatesDeprecated = 10478,
        
        [EnumMember()]
        [OptionSetMetadata("Application Tab Template (Deprecated)", Index=1350, Lcid=1033, Description="An application tab template with various template parameters defined.")]
        ApplicationTabTemplateDeprecated = 10479,
        
        [EnumMember()]
        [OptionSetMetadata("Parameter (Deprecated)", Index=1351, Lcid=1033, Description="Template parameter values for a given application template")]
        ParameterDeprecated = 10480,
        
        [EnumMember()]
        [OptionSetMetadata("Template Tag (Deprecated)", Index=33, Lcid=1033, Description="Tags associated with templates. Templates are discovered via tags")]
        TemplateTagDeprecated = 10481,
        
        [EnumMember()]
        [OptionSetMetadata("Application Type (Deprecated)", Index=1349, Lcid=1033, Description="Define a UCI pagetype. For each pagetype, define the parameters that need to be a" +
            " part of the template for this application type")]
        ApplicationTypeDeprecated = 10482,
        
        [EnumMember()]
        [OptionSetMetadata("Channel Integration Framework v2.0 Provider", Index=1318, Lcid=1033, Description="Entity that holds the configuration data for a third-party voice channel provider" +
            " based on Channel Integration Framework v2.0")]
        ChannelIntegrationFrameworkv20Provider = 10491,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Data (Deprecated)", Index=1338, Lcid=1033, Description="Primary entity for a conversation")]
        ConversationDataDeprecated = 10493,
        
        [EnumMember()]
        [OptionSetMetadata("KPI Event Data", Index=1105, Lcid=1033, Description="Primary entity for a kpi event")]
        KPIEventData = 10494,
        
        [EnumMember()]
        [OptionSetMetadata("KPI Event Definition", Index=1134, Lcid=1033, Description="Primary entity for defining a KPI event")]
        KPIEventDefinition = 10495,
        
        [EnumMember()]
        [OptionSetMetadata("Session Data (Deprecated)", Index=43, Lcid=1033, Description="Primary entity for session data")]
        SessionDataDeprecated = 10496,
        
        [EnumMember()]
        [OptionSetMetadata("Session Participant Data (Deprecated)", Index=49, Lcid=1033, Description="")]
        SessionParticipantDataDeprecated = 10497,
        
        [EnumMember()]
        [OptionSetMetadata("Channel Definition", Index=1326, Lcid=1033, Description="Stores details about a channel definition.")]
        ChannelDefinition = 10498,
        
        [EnumMember()]
        [OptionSetMetadata("Channel Definition Consent", Index=1327, Lcid=1033, Description="")]
        ChannelDefinitionConsent = 10499,
        
        [EnumMember()]
        [OptionSetMetadata("Channel Definition Locale", Index=1320, Lcid=1033, Description="")]
        ChannelDefinitionLocale = 10500,
        
        [EnumMember()]
        [OptionSetMetadata("Channel Instance", Index=1313, Lcid=1033, Description="")]
        ChannelInstance = 10501,
        
        [EnumMember()]
        [OptionSetMetadata("Channel Instance Account", Index=1314, Lcid=1033, Description="")]
        ChannelInstanceAccount = 10502,
        
        [EnumMember()]
        [OptionSetMetadata("Channel Message Attachment", Index=1312, Lcid=1033, Description="")]
        ChannelMessageAttachment = 10503,
        
        [EnumMember()]
        [OptionSetMetadata("Channel Message Context Part", Index=1310, Lcid=1033, Description="Context about channel message")]
        ChannelMessageContextPart = 10504,
        
        [EnumMember()]
        [OptionSetMetadata("Channel Message Part", Index=1311, Lcid=1033, Description="")]
        ChannelMessagePart = 10505,
        
        [EnumMember()]
        [OptionSetMetadata("Consuming Application", Index=1348, Lcid=1033, Description="Consuming Application that use Unified Channel")]
        ConsumingApplication = 10506,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_DefExtendedChannelInstance", Index=1095, Lcid=1033, Description="")]
        msdyn_DefExtendedChannelInstance = 10507,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_DefExtendedChannelInstanceAccount", Index=1093, Lcid=1033, Description="")]
        msdyn_DefExtendedChannelInstanceAccount = 10508,
        
        [EnumMember()]
        [OptionSetMetadata("Productivity pane configuration", Index=203, Lcid=1033, Description="")]
        Productivitypaneconfiguration = 10509,
        
        [EnumMember()]
        [OptionSetMetadata("Pane tab configuration", Index=201, Lcid=1033, Description="")]
        Panetabconfiguration = 10510,
        
        [EnumMember()]
        [OptionSetMetadata("Pane tool configuration", Index=202, Lcid=1033, Description="")]
        Panetoolconfiguration = 10511,
        
        [EnumMember()]
        [OptionSetMetadata("Agent script", Index=332, Lcid=1033, Description="Agent script v2")]
        Agentscript = 10513,
        
        [EnumMember()]
        [OptionSetMetadata("Agent script step", Index=330, Lcid=1033, Description="")]
        Agentscriptstep = 10514,
        
        [EnumMember()]
        [OptionSetMetadata("Action Input Parameter", Index=302, Lcid=1033, Description="Attributes of action input parameters")]
        ActionInputParameter = 10516,
        
        [EnumMember()]
        [OptionSetMetadata("Action Output Parameter", Index=331, Lcid=1033, Description="Attributes of action output parameters")]
        ActionOutputParameter = 10517,
        
        [EnumMember()]
        [OptionSetMetadata("Macro Action Template", Index=328, Lcid=1033, Description="Attributes for macro action template")]
        MacroActionTemplate = 10518,
        
        [EnumMember()]
        [OptionSetMetadata("Macro Solution Configuration", Index=336, Lcid=1033, Description="Macro solution related configurations")]
        MacroSolutionConfiguration = 10519,
        
        [EnumMember()]
        [OptionSetMetadata("Macro Connector", Index=329, Lcid=1033, Description="Attributes for macro connectors")]
        MacroConnector = 10520,
        
        [EnumMember()]
        [OptionSetMetadata("Macro Run History", Index=1122, Lcid=1033, Description="Stores history of macro runs")]
        MacroRunHistory = 10521,
        
        [EnumMember()]
        [OptionSetMetadata("Parameter definition", Index=337, Lcid=1033, Description="Macro parameter definitions")]
        Parameterdefinition = 10522,
        
        [EnumMember()]
        [OptionSetMetadata("Adaptive Card Configuration", Index=1226, Lcid=1033, Description="Adaptive Card Configuration")]
        AdaptiveCardConfiguration = 10525,
        
        [EnumMember()]
        [OptionSetMetadata("Smartassist configuration", Index=83, Lcid=1033, Description="Stores Smartassist configurations")]
        Smartassistconfiguration = 10526,
        
        [EnumMember()]
        [OptionSetMetadata("Read Tracker", Index=325, Lcid=1033, Description="Keeps track of the records read by an user in the system")]
        ReadTracker = 10528,
        
        [EnumMember()]
        [OptionSetMetadata("Read tracking enabled information", Index=326, Lcid=1033, Description="")]
        Readtrackingenabledinformation = 10529,
        
        [EnumMember()]
        [OptionSetMetadata("Microsoft Teams Graph resource Entity", Index=1317, Lcid=1033, Description="Entity which stores collaboration data of Dynamics 365 with Microsoft Teams")]
        MicrosoftTeamsGraphresourceEntity = 10530,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_msteamssetting", Index=226, Lcid=1033, Description="")]
        msdyn_msteamssetting = 10531,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_msteamssettingsv2", Index=224, Lcid=1033, Description="")]
        msdyn_msteamssettingsv2 = 10532,
        
        [EnumMember()]
        [OptionSetMetadata("Microsoft Teams Collaboration entity", Index=6, Lcid=1033, Description="Entity which stores collaboration data of Dynamics 365 with Microsoft Teams")]
        MicrosoftTeamsCollaborationentity = 10533,
        
        [EnumMember()]
        [OptionSetMetadata("Teams Dialer Admin settings", Index=35, Lcid=1033, Description="")]
        TeamsDialerAdminsettings = 10534,
        
        [EnumMember()]
        [OptionSetMetadata("Teams Contact Suggestion by AI", Index=1253, Lcid=1033, Description="")]
        TeamsContactSuggestionbyAI = 10535,
        
        [EnumMember()]
        [OptionSetMetadata("Contact suggestion rule", Index=1334, Lcid=1033, Description="")]
        Contactsuggestionrule = 10536,
        
        [EnumMember()]
        [OptionSetMetadata("Contact suggestion ruleset", Index=1335, Lcid=1033, Description="")]
        Contactsuggestionruleset = 10537,
        
        [EnumMember()]
        [OptionSetMetadata("Microsoft Teams chat association entity", Index=7, Lcid=1033, Description="For internal use only. Entity which stores association data of Dynamics 365 recor" +
            "ds with Microsoft Teams chat")]
        MicrosoftTeamschatassociationentity = 10538,
        
        [EnumMember()]
        [OptionSetMetadata("Microsoft Teams chat suggestion", Index=5, Lcid=1033, Description="For internal use only")]
        MicrosoftTeamschatsuggestion = 10539,
        
        [EnumMember()]
        [OptionSetMetadata("Microsoft Orgchart node entity", Index=175, Lcid=1033, Description="For internal use only. Entity which stores association data of account with conta" +
            "cts present in the orgchart hierarchy of the account")]
        MicrosoftOrgchartnodeentity = 10540,
        
        [EnumMember()]
        [OptionSetMetadata("Forecast Manual Adjustment History", Index=1233, Lcid=1033, Description="Forecast Manual Adjustment History")]
        ForecastManualAdjustmentHistory = 10541,
        
        [EnumMember()]
        [OptionSetMetadata("Distributed Lock", Index=1079, Lcid=1033, Description="Distributed Locks")]
        DistributedLock = 10542,
        
        [EnumMember()]
        [OptionSetMetadata("Entity Delta Change", Index=1026, Lcid=1033, Description="Entity Delta Changes")]
        EntityDeltaChange = 10543,
        
        [EnumMember()]
        [OptionSetMetadata("File Upload Status Tracker", Index=1021, Lcid=1033, Description="File Upload Status Tracker")]
        FileUploadStatusTracker = 10544,
        
        [EnumMember()]
        [OptionSetMetadata("Forecast", Index=1051, Lcid=1033, Description="Forecast")]
        Forecast_2 = 10545,
        
        [EnumMember()]
        [OptionSetMetadata("Forecast Configuration", Index=1052, Lcid=1033, Description="")]
        ForecastConfiguration = 10546,
        
        [EnumMember()]
        [OptionSetMetadata("Forecast definition", Index=1045, Lcid=1033, Description="Defines the parameters used for forecasting.")]
        Forecastdefinition = 10547,
        
        [EnumMember()]
        [OptionSetMetadata("Forecasting Cache", Index=1038, Lcid=1033, Description="Forecasting Cache")]
        ForecastingCache = 10548,
        
        [EnumMember()]
        [OptionSetMetadata("Forecast Insights", Index=1039, Lcid=1033, Description="Forecast Insights")]
        ForecastInsights = 10549,
        
        [EnumMember()]
        [OptionSetMetadata("Forecast", Index=1037, Lcid=1033, Description="Stores sales predictions for your team or organization. For internal use.")]
        Forecast = 10550,
        
        [EnumMember()]
        [OptionSetMetadata("Forecast Prediction Data", Index=1035, Lcid=1033, Description="Forecast Prediction Data")]
        ForecastPredictionData = 10551,
        
        [EnumMember()]
        [OptionSetMetadata("Forecast Prediction Status", Index=1036, Lcid=1033, Description="Forecast Prediction Status")]
        ForecastPredictionStatus = 10552,
        
        [EnumMember()]
        [OptionSetMetadata("Forecast recurrence", Index=1043, Lcid=1033, Description="Stores recalculation information for each recurrence of the forecast hierarchy. F" +
            "or internal use.")]
        Forecastrecurrence = 10553,
        
        [EnumMember()]
        [OptionSetMetadata("Recompute Tracker", Index=323, Lcid=1033, Description="")]
        RecomputeTracker = 10554,
        
        [EnumMember()]
        [OptionSetMetadata("Forecast Recurrence", Index=269, Lcid=1033, Description="Forecast Recurrence")]
        ForecastRecurrence = 10555,
        
        [EnumMember()]
        [OptionSetMetadata("ShareAs Configuration", Index=48, Lcid=1033, Description="ShareAs Configuration")]
        ShareAsConfiguration = 10556,
        
        [EnumMember()]
        [OptionSetMetadata("Customer email communication", Index=1293, Lcid=1033, Description="")]
        Customeremailcommunication = 10557,
        
        [EnumMember()]
        [OptionSetMetadata("GDPRData", Index=1155, Lcid=1033, Description="")]
        GDPRData = 10558,
        
        [EnumMember()]
        [OptionSetMetadata("ODOSFeatureMetadata", Index=172, Lcid=1033, Description="")]
        ODOSFeatureMetadata = 10559,
        
        [EnumMember()]
        [OptionSetMetadata("ODOSMetadata", Index=173, Lcid=1033, Description="")]
        ODOSMetadata = 10560,
        
        [EnumMember()]
        [OptionSetMetadata("Recurring Sales Action", Index=267, Lcid=1033, Description="")]
        RecurringSalesAction = 10561,
        
        [EnumMember()]
        [OptionSetMetadata("Recurring Sales Action V2", Index=265, Lcid=1033, Description="")]
        RecurringSalesActionV2 = 10562,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_relationshipinsightsunifiedconfig", Index=274, Lcid=1033, Description="")]
        msdyn_relationshipinsightsunifiedconfig = 10563,
        
        [EnumMember()]
        [OptionSetMetadata("siconfig", Index=77, Lcid=1033, Description="")]
        siconfig = 10564,
        
        [EnumMember()]
        [OptionSetMetadata("SI Key Value Config", Index=78, Lcid=1033, Description="")]
        SIKeyValueConfig = 10565,
        
        [EnumMember()]
        [OptionSetMetadata("Usage Metric", Index=27, Lcid=1033, Description="")]
        UsageMetric = 10566,
        
        [EnumMember()]
        [OptionSetMetadata("Action Card Regarding", Index=1242, Lcid=1033, Description="")]
        ActionCardRegarding = 10567,
        
        [EnumMember()]
        [OptionSetMetadata("Action Card Role Setting", Index=1235, Lcid=1033, Description="")]
        ActionCardRoleSetting = 10568,
        
        [EnumMember()]
        [OptionSetMetadata("EntityRankingRule", Index=1032, Lcid=1033, Description="")]
        EntityRankingRule = 10569,
        
        [EnumMember()]
        [OptionSetMetadata("flowcardtype", Index=1053, Lcid=1033, Description="")]
        flowcardtype = 10570,
        
        [EnumMember()]
        [OptionSetMetadata("salesinsightssettings", Index=294, Lcid=1033, Description="Storing settings for studio feature")]
        salesinsightssettings = 10571,
        
        [EnumMember()]
        [OptionSetMetadata("Action Card Usage", Index=1241, Lcid=1033, Description="")]
        ActionCardUsage = 10572,
        
        [EnumMember()]
        [OptionSetMetadata("Action Card Usage Aggregation", Index=1228, Lcid=1033, Description="")]
        ActionCardUsageAggregation = 10573,
        
        [EnumMember()]
        [OptionSetMetadata("Auto Capture Rule", Index=1207, Lcid=1033, Description="Auto Capture Rules")]
        AutoCaptureRule = 10574,
        
        [EnumMember()]
        [OptionSetMetadata("Auto Capture Settings", Index=1208, Lcid=1033, Description="Auto Capture Settings")]
        AutoCaptureSettings = 10575,
        
        [EnumMember()]
        [OptionSetMetadata("UntrackedAppointment", Index=21, Lcid=1033, Description="UntrackedAppointments")]
        UntrackedAppointment = 10576,
        
        [EnumMember()]
        [OptionSetMetadata("Suggested Activity", Index=68, Lcid=1033, Description="Activity suggestions")]
        SuggestedActivity = 10577,
        
        [EnumMember()]
        [OptionSetMetadata("Suggested Activity Data Source", Index=69, Lcid=1033, Description="Suggested Activity Data Sources")]
        SuggestedActivityDataSource = 10578,
        
        [EnumMember()]
        [OptionSetMetadata("Suggested Contact", Index=14, Lcid=1033, Description="Contact suggestions")]
        SuggestedContact = 10579,
        
        [EnumMember()]
        [OptionSetMetadata("Suggested Contacts Data Source", Index=15, Lcid=1033, Description="Suggested contacts data sources")]
        SuggestedContactsDataSource = 10580,
        
        [EnumMember()]
        [OptionSetMetadata("Notes analysis Config", Index=230, Lcid=1033, Description="")]
        NotesanalysisConfig = 10581,
        
        [EnumMember()]
        [OptionSetMetadata("icebreakersconfig", Index=1160, Lcid=1033, Description="")]
        icebreakersconfig = 10582,
        
        [EnumMember()]
        [OptionSetMetadata("dealmanageraccess", Index=1088, Lcid=1033, Description="")]
        dealmanageraccess = 10583,
        
        [EnumMember()]
        [OptionSetMetadata("Deal manager settings", Index=1089, Lcid=1033, Description="Deal manager settings")]
        Dealmanagersettings = 10584,
        
        [EnumMember()]
        [OptionSetMetadata("Account KPI Item", Index=1243, Lcid=1033, Description="")]
        AccountKPIItem = 10585,
        
        [EnumMember()]
        [OptionSetMetadata("Activity Analysis CleanUp State", Index=1227, Lcid=1033, Description="")]
        ActivityAnalysisCleanUpState = 10586,
        
        [EnumMember()]
        [OptionSetMetadata("Relationship Analytics Config", Index=1225, Lcid=1033, Description="")]
        RelationshipAnalyticsConfig = 10587,
        
        [EnumMember()]
        [OptionSetMetadata("Contact KPI Item", Index=1341, Lcid=1033, Description="")]
        ContactKPIItem = 10588,
        
        [EnumMember()]
        [OptionSetMetadata("Daily Kpis for account", Index=1297, Lcid=1033, Description="")]
        DailyKpisforaccount = 10589,
        
        [EnumMember()]
        [OptionSetMetadata("Daily kpis for contact", Index=1298, Lcid=1033, Description="")]
        Dailykpisforcontact = 10590,
        
        [EnumMember()]
        [OptionSetMetadata("Daily kpis for lead", Index=1296, Lcid=1033, Description="")]
        Dailykpisforlead = 10591,
        
        [EnumMember()]
        [OptionSetMetadata("Daily kpis for Opportunity", Index=1294, Lcid=1033, Description="")]
        DailykpisforOpportunity = 10592,
        
        [EnumMember()]
        [OptionSetMetadata("Lead KPI Item", Index=1131, Lcid=1033, Description="")]
        LeadKPIItem = 10593,
        
        [EnumMember()]
        [OptionSetMetadata("Most Contacted", Index=1126, Lcid=1033, Description="Most Contacted")]
        MostContacted = 10594,
        
        [EnumMember()]
        [OptionSetMetadata("Most Contacted By", Index=225, Lcid=1033, Description="Most Contacted By")]
        MostContactedBy = 10595,
        
        [EnumMember()]
        [OptionSetMetadata("Opportunity KPI Item", Index=176, Lcid=1033, Description="")]
        OpportunityKPIItem = 10596,
        
        [EnumMember()]
        [OptionSetMetadata("Relationship Analytics Metadata", Index=273, Lcid=1033, Description="")]
        RelationshipAnalyticsMetadata = 10597,
        
        [EnumMember()]
        [OptionSetMetadata("Similar entities feature importance", Index=76, Lcid=1033, Description="")]
        Similarentitiesfeatureimportance = 10598,
        
        [EnumMember()]
        [OptionSetMetadata("wkwcolleaguesforcompany", Index=130, Lcid=1033, Description="")]
        wkwcolleaguesforcompany = 10599,
        
        [EnumMember()]
        [OptionSetMetadata("wkwcolleaguesforcontact", Index=131, Lcid=1033, Description="Entity for storing contact introducer")]
        wkwcolleaguesforcontact = 10600,
        
        [EnumMember()]
        [OptionSetMetadata("wkwconfig", Index=129, Lcid=1033, Description="")]
        wkwconfig = 10601,
        
        [EnumMember()]
        [OptionSetMetadata("Attribute Influence Statistics", Index=1222, Lcid=1033, Description="")]
        AttributeInfluenceStatistics = 10602,
        
        [EnumMember()]
        [OptionSetMetadata("Prediction Computation Operation", Index=306, Lcid=1033, Description="")]
        PredictionComputationOperation = 10603,
        
        [EnumMember()]
        [OptionSetMetadata("Prediction Model Status", Index=299, Lcid=1033, Description="Stores metadata about predictive models")]
        PredictionModelStatus = 10604,
        
        [EnumMember()]
        [OptionSetMetadata("Prediction Scheduled Operation", Index=300, Lcid=1033, Description="Contains meta-data about the scheduled operations.")]
        PredictionScheduledOperation = 10605,
        
        [EnumMember()]
        [OptionSetMetadata("Predictive Model Score", Index=298, Lcid=1033, Description="")]
        PredictiveModelScore = 10606,
        
        [EnumMember()]
        [OptionSetMetadata("Predictive Score", Index=296, Lcid=1033, Description="")]
        PredictiveScore = 10607,
        
        [EnumMember()]
        [OptionSetMetadata("Predictive Scoring Sync Status", Index=297, Lcid=1033, Description="Internal entity used to store sync status for predictive scoring core entities.")]
        PredictiveScoringSyncStatus = 10608,
        
        [EnumMember()]
        [OptionSetMetadata("Real Time Scoring", Index=324, Lcid=1033, Description="Stores meta data information for real time scoring.")]
        RealTimeScoring = 10609,
        
        [EnumMember()]
        [OptionSetMetadata("Real Time Scoring Operation", Index=322, Lcid=1033, Description="Stores metadata for real time scoring job.")]
        RealTimeScoringOperation = 10610,
        
        [EnumMember()]
        [OptionSetMetadata("Submodel Definition", Index=70, Lcid=1033, Description="Stores metadata about submodels")]
        SubmodelDefinition = 10611,
        
        [EnumMember()]
        [OptionSetMetadata("Time spent in BPF", Index=41, Lcid=1033, Description="")]
        TimespentinBPF = 10612,
        
        [EnumMember()]
        [OptionSetMetadata("Training Result", Index=38, Lcid=1033, Description="Stores Training results for the model")]
        TrainingResult = 10613,
        
        [EnumMember()]
        [OptionSetMetadata("OpportunityModelConfig", Index=174, Lcid=1033, Description="")]
        OpportunityModelConfig = 10614,
        
        [EnumMember()]
        [OptionSetMetadata("LeadModelConfig", Index=1132, Lcid=1033, Description="")]
        LeadModelConfig = 10615,
        
        [EnumMember()]
        [OptionSetMetadata("ModelPreviewStatus", Index=1127, Lcid=1033, Description="")]
        ModelPreviewStatus = 10616,
        
        [EnumMember()]
        [OptionSetMetadata("Profile Album", Index=314, Lcid=1033, Description="Contains user profile images that are stored as attachments and displayed in post" +
            "s.")]
        ProfileAlbum = 10617,
        
        [EnumMember()]
        [OptionSetMetadata("Post Configuration", Index=312, Lcid=1033, Description="Enable or disable entities for Activity Feeds and Yammer collaboration.")]
        PostConfiguration = 10618,
        
        [EnumMember()]
        [OptionSetMetadata("Post Rule Configuration", Index=313, Lcid=1033, Description="Enable or disable system post rules for an entity for Activity Feeds and Yammer.")]
        PostRuleConfiguration = 10619,
        
        [EnumMember()]
        [OptionSetMetadata("Wall View", Index=143, Lcid=1033, Description="Contains information regarding which views are available for users to display on " +
            "their personal walls. Only an administrator can specify the views that users can" +
            " choose from to display on their personal walls.")]
        WallView = 10620,
        
        [EnumMember()]
        [OptionSetMetadata("Filter", Index=144, Lcid=1033, Description="Contains user personalization information regarding which of the administrator’s " +
            "selected views to display on a user’s personal wall.")]
        Filter = 10621,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Voice alert", Index=91, Lcid=1033, Description="")]
        CustomerVoicealert = 10622,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Voice alert rule", Index=120, Lcid=1033, Description="")]
        CustomerVoicealertrule = 10623,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Voice survey email template", Index=121, Lcid=1033, Description="Template for an email message that contains the survey invitation link.")]
        CustomerVoicesurveyemailtemplate = 10624,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Voice file response", Index=119, Lcid=1033, Description="Response to a file upload question.")]
        CustomerVoicefileresponse = 10625,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Voice localized survey email template", Index=117, Lcid=1033, Description="Stores localized data for email templates.")]
        CustomerVoicelocalizedsurveyemailtemplate = 10626,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Voice project", Index=118, Lcid=1033, Description="Set of surveys to collect feedback.")]
        CustomerVoiceproject = 10627,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Voice survey question", Index=125, Lcid=1033, Description="Question in a survey to collect feedback.")]
        CustomerVoicesurveyquestion = 10628,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Voice survey question response", Index=126, Lcid=1033, Description="Response to a question in a survey.")]
        CustomerVoicesurveyquestionresponse = 10629,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Voice satisfaction metric", Index=124, Lcid=1033, Description="Satisfaction metric defined for a project.")]
        CustomerVoicesatisfactionmetric = 10630,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Voice survey", Index=122, Lcid=1033, Description="Set of questions to collect feedback.")]
        CustomerVoicesurvey = 10631,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Voice survey invite", Index=123, Lcid=1033, Description="Activity that tracks a survey invitation sent to a person.")]
        CustomerVoicesurveyinvite = 10632,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Voice survey reminder", Index=116, Lcid=1033, Description="Email reminders for surveys created in Customer Voice.")]
        CustomerVoicesurveyreminder = 10633,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Voice survey response", Index=109, Lcid=1033, Description="Response to a survey.")]
        CustomerVoicesurveyresponse = 10634,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Voice unsubscribed recipient", Index=110, Lcid=1033, Description="Email address of an unsubscribed respondent.")]
        CustomerVoiceunsubscribedrecipient = 10635,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Service Key Value Configuration", Index=1309, Lcid=1033, Description="")]
        CustomerServiceKeyValueConfiguration = 10636,
        
        [EnumMember()]
        [OptionSetMetadata("AddToCalendar style", Index=161, Lcid=1033, Description="")]
        AddToCalendarstyle = 10637,
        
        [EnumMember()]
        [OptionSetMetadata("basestyle", Index=159, Lcid=1033, Description="")]
        basestyle = 10638,
        
        [EnumMember()]
        [OptionSetMetadata("Button style", Index=160, Lcid=1033, Description="")]
        Buttonstyle = 10639,
        
        [EnumMember()]
        [OptionSetMetadata("Code style", Index=167, Lcid=1033, Description="")]
        Codestyle = 10640,
        
        [EnumMember()]
        [OptionSetMetadata("Column style", Index=168, Lcid=1033, Description="")]
        Columnstyle = 10641,
        
        [EnumMember()]
        [OptionSetMetadata("Content Block", Index=166, Lcid=1033, Description="")]
        ContentBlock = 10642,
        
        [EnumMember()]
        [OptionSetMetadata("Divider style", Index=164, Lcid=1033, Description="")]
        Dividerstyle = 10643,
        
        [EnumMember()]
        [OptionSetMetadata("General styles", Index=165, Lcid=1033, Description="")]
        Generalstyles = 10644,
        
        [EnumMember()]
        [OptionSetMetadata("imagestyle", Index=158, Lcid=1033, Description="")]
        imagestyle = 10645,
        
        [EnumMember()]
        [OptionSetMetadata("Layout Style", Index=151, Lcid=1033, Description="")]
        LayoutStyle = 10646,
        
        [EnumMember()]
        [OptionSetMetadata("QR code style", Index=152, Lcid=1033, Description="")]
        QRcodestyle = 10647,
        
        [EnumMember()]
        [OptionSetMetadata("Text style", Index=150, Lcid=1033, Description="")]
        Textstyle = 10648,
        
        [EnumMember()]
        [OptionSetMetadata("Video style", Index=148, Lcid=1033, Description="")]
        Videostyle = 10649,
        
        [EnumMember()]
        [OptionSetMetadata("App state", Index=1189, Lcid=1033, Description="")]
        Appstate = 10650,
        
        [EnumMember()]
        [OptionSetMetadata("CSAdminConfig", Index=1308, Lcid=1033, Description="")]
        CSAdminConfig = 10651,
        
        [EnumMember()]
        [OptionSetMetadata("Custom API Ruleset Configuration", Index=1307, Lcid=1033, Description="Configuration table for setting up custom APIs for usage inside the Unified routi" +
            "ng system")]
        CustomAPIRulesetConfiguration = 10652,
        
        [EnumMember()]
        [OptionSetMetadata("Decision contract", Index=1096, Lcid=1033, Description="Stores information about contract that will be required for ruleset definition")]
        Decisioncontract = 10653,
        
        [EnumMember()]
        [OptionSetMetadata("Decision rule set", Index=1097, Lcid=1033, Description="Contains list of rules to define demand and assignment behavior")]
        Decisionruleset = 10654,
        
        [EnumMember()]
        [OptionSetMetadata("Rulesetentitymapping", Index=256, Lcid=1033, Description="For internal use only entity used to store an implicit mapping between a ruleset " +
            "and polymorphic entity")]
        Rulesetentitymapping = 10655,
        
        [EnumMember()]
        [OptionSetMetadata("Routing diagnostic item", Index=24, Lcid=1033, Description="The entity used to store unified routing diagnostic data.")]
        Routingdiagnosticitem = 10656,
        
        [EnumMember()]
        [OptionSetMetadata("Routing diagnostic", Index=25, Lcid=1033, Description="")]
        Routingdiagnostic = 10657,
        
        [EnumMember()]
        [OptionSetMetadata("Inbox card configuration", Index=1157, Lcid=1033, Description="")]
        Inboxcardconfiguration = 10658,
        
        [EnumMember()]
        [OptionSetMetadata("Inbox Configuration", Index=1158, Lcid=1033, Description="")]
        InboxConfiguration = 10659,
        
        [EnumMember()]
        [OptionSetMetadata("Inbox Entity Configuration", Index=1151, Lcid=1033, Description="")]
        InboxEntityConfiguration = 10660,
        
        [EnumMember()]
        [OptionSetMetadata("App Profile Copilot Configuration", Index=1184, Lcid=1033, Description="")]
        AppProfileCopilotConfiguration = 10661,
        
        [EnumMember()]
        [OptionSetMetadata("Swarm", Index=3, Lcid=1033, Description="Tracks the list of swarms created by agents to resolve the customer issues")]
        Swarm = 10662,
        
        [EnumMember()]
        [OptionSetMetadata("Swarm participant", Index=4, Lcid=1033, Description="Stores the participants information of swarm")]
        Swarmparticipant = 10663,
        
        [EnumMember()]
        [OptionSetMetadata("Swarm participant rule", Index=2, Lcid=1033, Description="Rules to fetch participants based on their role")]
        Swarmparticipantrule = 10664,
        
        [EnumMember()]
        [OptionSetMetadata("Swarm role", Index=0, Lcid=1033, Description="Stores the different participant roles and associated role type defined")]
        Swarmrole = 10665,
        
        [EnumMember()]
        [OptionSetMetadata("Swarm skill", Index=1, Lcid=1033, Description="Stores the skills required for the swarm")]
        Swarmskill = 10666,
        
        [EnumMember()]
        [OptionSetMetadata("Swarm template", Index=8, Lcid=1033, Description="Entity which stores different templates for the swarm")]
        Swarmtemplate = 10667,
        
        [EnumMember()]
        [OptionSetMetadata("Autonomous case creation and update rules", Index=1206, Lcid=1033, Description="Autonomous case creation and update rules")]
        Autonomouscasecreationandupdaterules = 10668,
        
        [EnumMember()]
        [OptionSetMetadata("Entity Attachment", Index=1029, Lcid=1033, Description="")]
        EntityAttachment = 10669,
        
        [EnumMember()]
        [OptionSetMetadata("Time Tracker", Index=39, Lcid=1033, Description="")]
        TimeTracker = 10670,
        
        [EnumMember()]
        [OptionSetMetadata("Customer feedback survey", Index=1291, Lcid=1033, Description="")]
        Customerfeedbacksurvey = 10671,
        
        [EnumMember()]
        [OptionSetMetadata("Customer feedback survey invite", Index=1289, Lcid=1033, Description="")]
        Customerfeedbacksurveyinvite = 10672,
        
        [EnumMember()]
        [OptionSetMetadata("Customer feedback survey response", Index=1290, Lcid=1033, Description="")]
        Customerfeedbacksurveyresponse = 10673,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_surveyconfig", Index=17, Lcid=1033, Description="")]
        msdyn_surveyconfig = 10674,
        
        [EnumMember()]
        [OptionSetMetadata("Survey setting", Index=10, Lcid=1033, Description="")]
        Surveysetting = 10675,
        
        [EnumMember()]
        [OptionSetMetadata("Master Entity Routing Configuration", Index=1121, Lcid=1033, Description="Defines master routing details for the entity.")]
        MasterEntityRoutingConfiguration = 10676,
        
        [EnumMember()]
        [OptionSetMetadata("Routing Rule Set Setting", Index=258, Lcid=1033, Description="")]
        RoutingRuleSetSetting = 10677,
        
        [EnumMember()]
        [OptionSetMetadata("Assignment Configuration", Index=1217, Lcid=1033, Description="")]
        AssignmentConfiguration = 10678,
        
        [EnumMember()]
        [OptionSetMetadata("Assignment Configuration Step", Index=1215, Lcid=1033, Description="")]
        AssignmentConfigurationStep = 10679,
        
        [EnumMember()]
        [OptionSetMetadata("Capacity Profile", Index=1211, Lcid=1033, Description="Capacity Profiles")]
        CapacityProfile = 10680,
        
        [EnumMember()]
        [OptionSetMetadata("Overflow Action Config", Index=205, Lcid=1033, Description="Overflow action configurations.")]
        OverflowActionConfig = 10681,
        
        [EnumMember()]
        [OptionSetMetadata("Preferred Agent", Index=304, Lcid=1033, Description="Preferred Agent Table, table used to store the mapping between the system user an" +
            "d contact/account")]
        PreferredAgent = 10682,
        
        [EnumMember()]
        [OptionSetMetadata("Preferred Agent Customer Identity", Index=305, Lcid=1033, Description="Used for storing the table used to identify customer and the corresponding associ" +
            "ated table")]
        PreferredAgentCustomerIdentity = 10683,
        
        [EnumMember()]
        [OptionSetMetadata("Preferred Agent Routed Entity", Index=303, Lcid=1033, Description="Preferred Agent Routed table used to store information for routed table name and " +
            "customer identifying column on the table")]
        PreferredAgentRoutedEntity = 10684,
        
        [EnumMember()]
        [OptionSetMetadata("Routing configuration", Index=271, Lcid=1033, Description="Defines routing details for the workstream")]
        Routingconfiguration = 10685,
        
        [EnumMember()]
        [OptionSetMetadata("Routing configuration step", Index=264, Lcid=1033, Description="Links the routing configuration with ruleset")]
        Routingconfigurationstep = 10686,
        
        [EnumMember()]
        [OptionSetMetadata("Bot Channel Registration", Index=213, Lcid=1033, Description="Bot channel registration used for channel integration")]
        BotChannelRegistration = 10687,
        
        [EnumMember()]
        [OptionSetMetadata("Channel Configuration", Index=218, Lcid=1033, Description="Channel Configuration")]
        ChannelConfiguration = 10688,
        
        [EnumMember()]
        [OptionSetMetadata("Channel State Configuration", Index=216, Lcid=1033, Description="Channel State Configuration")]
        ChannelStateConfiguration = 10689,
        
        [EnumMember()]
        [OptionSetMetadata("Provisioning State", Index=235, Lcid=1033, Description="Provisioning state")]
        ProvisioningState = 10690,
        
        [EnumMember()]
        [OptionSetMetadata("AdminAppState", Index=1234, Lcid=1033, Description="State for each user in Admin App")]
        AdminAppState = 10691,
        
        [EnumMember()]
        [OptionSetMetadata("Agent Status history", Index=1263, Lcid=1033, Description="Agent status history entity records any changes to agent’s presence or available " +
            "capacity.")]
        AgentStatushistory = 10692,
        
        [EnumMember()]
        [OptionSetMetadata("Power BI Configuration", Index=1186, Lcid=1033, Description="Stores the Power BI configurations for supervisor experience")]
        PowerBIConfiguration = 10693,
        
        [EnumMember()]
        [OptionSetMetadata("Authentication Settings", Index=1221, Lcid=1033, Description="Stores the settings for user authentication")]
        AuthenticationSettings = 10694,
        
        [EnumMember()]
        [OptionSetMetadata("Auth Settings Entry", Index=1214, Lcid=1033, Description="")]
        AuthSettingsEntry = 10695,
        
        [EnumMember()]
        [OptionSetMetadata("Quick reply", Index=1213, Lcid=1033, Description="Stores the quick replies that agents can use in the conversation control while in" +
            "teracting with the customers")]
        Quickreply = 10696,
        
        [EnumMember()]
        [OptionSetMetadata("Entity Routing Context", Index=1330, Lcid=1033, Description="Entity Routing Contexts")]
        EntityRoutingContext = 10697,
        
        [EnumMember()]
        [OptionSetMetadata("Channel Capability", Index=1328, Lcid=1033, Description="The capability that a channel can enable, such as co-browse, screen sharing.")]
        ChannelCapability = 10698,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Action", Index=1333, Lcid=1033, Description="The action that can be performed in the conversation.")]
        ConversationAction = 10699,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Action Locale", Index=1332, Lcid=1033, Description="Localization information associated with the Conversation action.")]
        ConversationActionLocale = 10700,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Message Block", Index=1337, Lcid=1033, Description=@"A Message Block would constitute a block of messages up till an agent responds (including the messages sent by the agent). A follow up message, after an agent responds, will create another message block, this block again ends with the messages from the agent")]
        ConversationMessageBlock = 10701,
        
        [EnumMember()]
        [OptionSetMetadata("DeletedConversation", Index=1094, Lcid=1033, Description="Holds id of deleted conversation")]
        DeletedConversation = 10702,
        
        [EnumMember()]
        [OptionSetMetadata("Deprecated Workstream Entity Configuration", Index=1025, Lcid=1033, Description="Stores entity routing configuration per workstream")]
        DeprecatedWorkstreamEntityConfiguration = 10703,
        
        [EnumMember()]
        [OptionSetMetadata("Entity", Index=1031, Lcid=1033, Description="Entity Routing Configuration")]
        Entity_2 = 10704,
        
        [EnumMember()]
        [OptionSetMetadata("Ongoing conversation (Deprecated)", Index=1140, Lcid=1033, Description="Tracks the interactions between the agents and customer")]
        OngoingconversationDeprecated = 10705,
        
        [EnumMember()]
        [OptionSetMetadata("Live work item event", Index=1138, Lcid=1033, Description="This entity captures all events corresponding to a live work item.")]
        Liveworkitemevent = 10706,
        
        [EnumMember()]
        [OptionSetMetadata("Work Stream", Index=1136, Lcid=1033, Description="Stores information about the properties of work items that are generated by a uni" +
            "que channel endpoint")]
        WorkStream = 10707,
        
        [EnumMember()]
        [OptionSetMetadata("Masking Rule", Index=1120, Lcid=1033, Description="Masking Rules to apply to chat messages.")]
        MaskingRule = 10708,
        
        [EnumMember()]
        [OptionSetMetadata("Auto block rule", Index=221, Lcid=1033, Description="")]
        Autoblockrule = 10709,
        
        [EnumMember()]
        [OptionSetMetadata("Bot Channel Registration Secret", Index=211, Lcid=1033, Description="")]
        BotChannelRegistrationSecret = 10710,
        
        [EnumMember()]
        [OptionSetMetadata("Omnichannel channel api conversation privilege", Index=212, Lcid=1033, Description="Entity for creating privilege for custom apis. The privileges for this entity wil" +
            "l be used to restrict custom api access.")]
        Omnichannelchannelapiconversationprivilege = 10711,
        
        [EnumMember()]
        [OptionSetMetadata("Omnichannel channel api message privilege", Index=219, Lcid=1033, Description="Entity for creating privilege for custom apis. The privileges for this entity wil" +
            "l be used to restrict custom api access.")]
        Omnichannelchannelapimessageprivilege = 10712,
        
        [EnumMember()]
        [OptionSetMetadata("Channel api method mapping", Index=220, Lcid=1033, Description="OC channel api method mapping entity.")]
        Channelapimethodmapping = 10713,
        
        [EnumMember()]
        [OptionSetMetadata("External context", Index=217, Lcid=1033, Description="")]
        Externalcontext = 10714,
        
        [EnumMember()]
        [OptionSetMetadata("Flagged spam", Index=246, Lcid=1033, Description="")]
        Flaggedspam = 10715,
        
        [EnumMember()]
        [OptionSetMetadata("Language", Index=247, Lcid=1033, Description="")]
        Language = 10716,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation", Index=245, Lcid=1033, Description="Tracks the interaction between the agents and customer")]
        Conversation = 10717,
        
        [EnumMember()]
        [OptionSetMetadata("Context item value", Index=251, Lcid=1033, Description="Stores context item values for an engagement.")]
        Contextitemvalue = 10720,
        
        [EnumMember()]
        [OptionSetMetadata("Live Work Item Participant (Deprecated)", Index=252, Lcid=1033, Description="")]
        LiveWorkItemParticipantDeprecated = 10721,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Sentiment", Index=250, Lcid=1033, Description="Stores the machine learning generated customer sentiment of the communication  be" +
            "tween the user and the customer")]
        ConversationSentiment = 10722,
        
        [EnumMember()]
        [OptionSetMetadata("Context variable", Index=248, Lcid=1033, Description="Stores the context variables for a work stream.")]
        Contextvariable = 10723,
        
        [EnumMember()]
        [OptionSetMetadata("Localization", Index=249, Lcid=1033, Description="Entity used for data localization on CRM org.")]
        Localization = 10724,
        
        [EnumMember()]
        [OptionSetMetadata("OC Payment Profile", Index=242, Lcid=1033, Description="")]
        OCPaymentProfile = 10725,
        
        [EnumMember()]
        [OptionSetMetadata("Recording", Index=236, Lcid=1033, Description="Records the audio/video session")]
        Recording = 10726,
        
        [EnumMember()]
        [OptionSetMetadata("Omnichannel Request", Index=234, Lcid=1033, Description="Entity to store Requests across Omnichannel.")]
        OmnichannelRequest = 10727,
        
        [EnumMember()]
        [OptionSetMetadata("Rich message", Index=232, Lcid=1033, Description="Rich messages for Omnichannel integration")]
        Richmessage = 10728,
        
        [EnumMember()]
        [OptionSetMetadata("Rich message map", Index=233, Lcid=1033, Description="Rich messages map for Omnichannel integration")]
        Richmessagemap = 10729,
        
        [EnumMember()]
        [OptionSetMetadata("Rule Item", Index=240, Lcid=1033, Description="Stores the condition and destination including Omnichannel queues or agents")]
        RuleItem = 10730,
        
        [EnumMember()]
        [OptionSetMetadata("Sentiment daily topic", Index=241, Lcid=1033, Description="1. store properties regarding each topic cluster\r\n2. used for dashboard visualiza" +
            "tion (like topic example) and calculation for topic mapping")]
        Sentimentdailytopic = 10731,
        
        [EnumMember()]
        [OptionSetMetadata("Sentiment daily topic keyword", Index=239, Lcid=1033, Description="1. Store the keyword and frequency for topic clusters\r\n2. Used for word cloud in " +
            "the dashboard")]
        Sentimentdailytopickeyword = 10732,
        
        [EnumMember()]
        [OptionSetMetadata("Sentiment daily topic trending", Index=237, Lcid=1033, Description="1. Store the day to day topic mapping information\r\n2. Used for dashboard visualiz" +
            "ation")]
        Sentimentdailytopictrending = 10733,
        
        [EnumMember()]
        [OptionSetMetadata("Session", Index=238, Lcid=1033, Description="Session for interacting with a customer")]
        Session = 10734,
        
        [EnumMember()]
        [OptionSetMetadata("Session Participant Event", Index=184, Lcid=1033, Description="Session participant events")]
        SessionParticipantEvent = 10735,
        
        [EnumMember()]
        [OptionSetMetadata("Session Sentiment", Index=182, Lcid=1033, Description="Stores the session level sentiment for customer interactions calculated using AI." +
            "")]
        SessionSentiment = 10736,
        
        [EnumMember()]
        [OptionSetMetadata("Message", Index=185, Lcid=1033, Description="Stores the system messages sent to the message receiver for various events.")]
        Message = 10737,
        
        [EnumMember()]
        [OptionSetMetadata("Tag", Index=186, Lcid=1033, Description="Tags for quick categorization")]
        Tag = 10738,
        
        [EnumMember()]
        [OptionSetMetadata("Geo Location Provider", Index=227, Lcid=1033, Description="Geo Location Providers")]
        GeoLocationProvider = 10739,
        
        [EnumMember()]
        [OptionSetMetadata("Omnichannel Configuration", Index=171, Lcid=1033, Description="Configuration for Omnichannel")]
        OmnichannelConfiguration = 10740,
        
        [EnumMember()]
        [OptionSetMetadata("Omnichannel Personalization", Index=169, Lcid=1033, Description="Stores personalization information of Omnichannel Agent/Supervisor dashboards")]
        OmnichannelPersonalization = 10741,
        
        [EnumMember()]
        [OptionSetMetadata("Omnichannel Queue (Deprecated)", Index=170, Lcid=1033, Description="Stores omni-channel work items of a specific issue type or a specific team")]
        OmnichannelQueueDeprecated = 10742,
        
        [EnumMember()]
        [OptionSetMetadata("Omnichannel Sync Config", Index=177, Lcid=1033, Description="Config for entities to be synced to Omnichannel")]
        OmnichannelSyncConfig = 10743,
        
        [EnumMember()]
        [OptionSetMetadata("Operating Hour", Index=178, Lcid=1033, Description="Stores all the operating hours that are configured for an organization.")]
        OperatingHour = 10744,
        
        [EnumMember()]
        [OptionSetMetadata("Personal quick reply", Index=209, Lcid=1033, Description="Omnichannel agents\'s personal quick replies")]
        Personalquickreply = 10745,
        
        [EnumMember()]
        [OptionSetMetadata("Personal sound setting", Index=210, Lcid=1033, Description="Entity to store personalized sound records for the users.")]
        Personalsoundsetting = 10746,
        
        [EnumMember()]
        [OptionSetMetadata("Persona Security Role Mapping", Index=208, Lcid=1033, Description="")]
        PersonaSecurityRoleMapping = 10747,
        
        [EnumMember()]
        [OptionSetMetadata("Presence", Index=301, Lcid=1033, Description="Stores presence status information")]
        Presence = 10748,
        
        [EnumMember()]
        [OptionSetMetadata("Provider", Index=321, Lcid=1033, Description="A list of third-party providers that bring capabilities into the application. ")]
        Provider = 10749,
        
        [EnumMember()]
        [OptionSetMetadata("RoutingRequest", Index=257, Lcid=1033, Description="Routing request definition entity")]
        RoutingRequest = 10750,
        
        [EnumMember()]
        [OptionSetMetadata("Search Configuration", Index=281, Lcid=1033, Description="Configuration entity for agent search screen")]
        SearchConfiguration = 10751,
        
        [EnumMember()]
        [OptionSetMetadata("Sentiment analysis", Index=54, Lcid=1033, Description="Sentiment analysis configuration")]
        Sentimentanalysis = 10752,
        
        [EnumMember()]
        [OptionSetMetadata("Session event", Index=50, Lcid=1033, Description="Stores the session events for a session")]
        Sessionevent = 10753,
        
        [EnumMember()]
        [OptionSetMetadata("Session participant", Index=51, Lcid=1033, Description="Users in a session interacting with the customer")]
        Sessionparticipant = 10754,
        
        [EnumMember()]
        [OptionSetMetadata("Audio File", Index=71, Lcid=1033, Description="Entity to store all audio files for Omnichannel")]
        AudioFile = 10755,
        
        [EnumMember()]
        [OptionSetMetadata("Sound notification setting", Index=72, Lcid=1033, Description="Entity to store the sound notification setting records for channels and other sce" +
            "narios. ")]
        Soundnotificationsetting = 10756,
        
        [EnumMember()]
        [OptionSetMetadata("Transcript", Index=31, Lcid=1033, Description="Stores the transcript of the communication  between the user and the customer")]
        Transcript = 10757,
        
        [EnumMember()]
        [OptionSetMetadata("UR notification template", Index=28, Lcid=1033, Description="The entity stores all the templates used for UR notification.")]
        URnotificationtemplate = 10758,
        
        [EnumMember()]
        [OptionSetMetadata("UR Notification Template Mapping", Index=26, Lcid=1033, Description="This entity stores the mapping for notification template and workstream.")]
        URNotificationTemplateMapping = 10759,
        
        [EnumMember()]
        [OptionSetMetadata("User settings", Index=141, Lcid=1033, Description="Parent entity for Omnichannel personalizations")]
        Usersettings = 10760,
        
        [EnumMember()]
        [OptionSetMetadata("Self service", Index=140, Lcid=1033, Description="Stores each customer action as a record. The actions tracked are before an intera" +
            "ction is initiated. Agents will see the actions for an interaction in the Self S" +
            "ervice section of the Customer Summary page, when enabled.")]
        Selfservice = 10761,
        
        [EnumMember()]
        [OptionSetMetadata("Agent capacity update history", Index=1230, Lcid=1033, Description="Agent capacity update history entity records any changes to agent capacity agains" +
            "t a capacity profile")]
        Agentcapacityupdatehistory = 10768,
        
        [EnumMember()]
        [OptionSetMetadata("Bookable Resource Capacity Profile", Index=1204, Lcid=1033, Description="Bookable Resource Capacity Profile")]
        BookableResourceCapacityProfile = 10769,
        
        [EnumMember()]
        [OptionSetMetadata("Work stream capacity profile", Index=1137, Lcid=1033, Description="Work stream capacity profile")]
        Workstreamcapacityprofile = 10770,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Capacity profile", Index=243, Lcid=1033, Description="Conversation Capacity profile")]
        ConversationCapacityprofile = 10771,
        
        [EnumMember()]
        [OptionSetMetadata("Agent Capacity Profile Unit", Index=1232, Lcid=1033, Description="Agent Capacity Profile Units holds agent’s available capacity for each capacity p" +
            "rofile associated.")]
        AgentCapacityProfileUnit = 10772,
        
        [EnumMember()]
        [OptionSetMetadata("Agent Channel State", Index=1231, Lcid=1033, Description="")]
        AgentChannelState = 10773,
        
        [EnumMember()]
        [OptionSetMetadata("Agent Status", Index=1262, Lcid=1033, Description="Agent Status holds agent’s status or presence details.")]
        AgentStatus = 10774,
        
        [EnumMember()]
        [OptionSetMetadata("Agent Group", Index=1261, Lcid=1033, Description="Captures unique Agent Groups")]
        AgentGroup = 10775,
        
        [EnumMember()]
        [OptionSetMetadata("Agent Group Membership", Index=1257, Lcid=1033, Description="Captures Members of the Agent Groups")]
        AgentGroupMembership = 10776,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Characteristic", Index=244, Lcid=1033, Description="Characteristic associated to Omnichannel conversation")]
        ConversationCharacteristic = 10777,
        
        [EnumMember()]
        [OptionSetMetadata("Session Characteristic", Index=183, Lcid=1033, Description="Characteristic associated to Omnichannel session")]
        SessionCharacteristic = 10778,
        
        [EnumMember()]
        [OptionSetMetadata("Skill Attachment Rule", Index=74, Lcid=1033, Description="")]
        SkillAttachmentRule = 10779,
        
        [EnumMember()]
        [OptionSetMetadata("Attach Skill", Index=75, Lcid=1033, Description="")]
        AttachSkill = 10780,
        
        [EnumMember()]
        [OptionSetMetadata("Model training details", Index=180, Lcid=1033, Description="Indicates model\'s training details")]
        Modeltrainingdetails = 10781,
        
        [EnumMember()]
        [OptionSetMetadata("Training data import configuration", Index=181, Lcid=1033, Description="Indicates the training data import configuration")]
        Trainingdataimportconfiguration = 10782,
        
        [EnumMember()]
        [OptionSetMetadata("Characteristic mapping", Index=188, Lcid=1033, Description="Indicates the mapping of skills from training data to characteristics")]
        Characteristicmapping = 10783,
        
        [EnumMember()]
        [OptionSetMetadata("Training record", Index=189, Lcid=1033, Description="Indicates individual training record to be used for model training")]
        Trainingrecord = 10784,
        
        [EnumMember()]
        [OptionSetMetadata("Skill finder model", Index=187, Lcid=1033, Description="Indicates the OmniChannel Model for the corresponding AI model")]
        Skillfindermodel = 10785,
        
        [EnumMember()]
        [OptionSetMetadata("Effort estimate", Index=1083, Lcid=1033, Description="Entity to persist effort model prediction results")]
        Effortestimate = 10786,
        
        [EnumMember()]
        [OptionSetMetadata("Effort estimation model", Index=1161, Lcid=1033, Description="Indicates the OmniChannel Model for the corresponding AI model")]
        Effortestimationmodel = 10787,
        
        [EnumMember()]
        [OptionSetMetadata("Effort model training details", Index=1159, Lcid=1033, Description="Indicates model\'s training details")]
        Effortmodeltrainingdetails = 10788,
        
        [EnumMember()]
        [OptionSetMetadata("ConversationInsight", Index=1336, Lcid=1033, Description="")]
        ConversationInsight = 10789,
        
        [EnumMember()]
        [OptionSetMetadata("Active ICD Extension", Index=1229, Lcid=1033, Description="This notes the currently active description and examples for given entity (queue/" +
            "agent etc.) as selected by the C1 administrator.")]
        ActiveICDExtension = 10790,
        
        [EnumMember()]
        [OptionSetMetadata("Entity-Workstream Map", Index=1024, Lcid=1033, Description="This notes the entity (queue, agent etc.) mapped to the workstreams.")]
        EntityWorkstreamMap = 10791,
        
        [EnumMember()]
        [OptionSetMetadata("ICD Extension", Index=1153, Lcid=1033, Description="Contains ICD related fields that will be generated and kept.")]
        ICDExtension = 10792,
        
        [EnumMember()]
        [OptionSetMetadata("Lock Status", Index=1124, Lcid=1033, Description="")]
        LockStatus = 10793,
        
        [EnumMember()]
        [OptionSetMetadata("Omnichannel agent assignment custom api privilege ", Index=228, Lcid=1033, Description="Entity for creating privilege for agent assignment private custom apis. The privi" +
            "leges for this entity will be used to restrict custom api access only for FPA ap" +
            "p user.")]
        Omnichannelagentassignmentcustomapiprivilege = 10794,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Action Item", Index=1331, Lcid=1033, Description="")]
        ConversationActionItem = 10795,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Aggregated Insights", Index=1339, Lcid=1033, Description="")]
        ConversationAggregatedInsights = 10796,
        
        [EnumMember()]
        [OptionSetMetadata("Comment", Index=1340, Lcid=1033, Description="A comment on a specific section in a transcript")]
        Comment_3 = 10797,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Participant Insights", Index=1282, Lcid=1033, Description="")]
        ConversationParticipantInsights = 10798,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Participant Sentiment", Index=1283, Lcid=1033, Description="")]
        ConversationParticipantSentiment = 10799,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Question", Index=1281, Lcid=1033, Description="")]
        ConversationQuestion = 10800,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Segment Sentiment", Index=1279, Lcid=1033, Description="")]
        ConversationSegmentSentiment = 10801,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Sentiment", Index=1280, Lcid=1033, Description="")]
        ConversationSentiment_2 = 10802,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Signal", Index=1287, Lcid=1033, Description="")]
        ConversationSignal = 10803,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Subject", Index=1288, Lcid=1033, Description="")]
        ConversationSubject = 10804,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Summary Suggestion", Index=1285, Lcid=1033, Description="")]
        ConversationSummarySuggestion = 10805,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation System Tag", Index=1278, Lcid=1033, Description="")]
        ConversationSystemTag = 10806,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Tag", Index=1271, Lcid=1033, Description="")]
        ConversationTag = 10807,
        
        [EnumMember()]
        [OptionSetMetadata("Recording (Deprecated)", Index=268, Lcid=1033, Description="")]
        RecordingDeprecated = 10808,
        
        [EnumMember()]
        [OptionSetMetadata("SCI Conversation", Index=275, Lcid=1033, Description="")]
        SCIConversation = 10809,
        
        [EnumMember()]
        [OptionSetMetadata("Custom Email Highlight", Index=276, Lcid=1033, Description="")]
        CustomEmailHighlight = 10810,
        
        [EnumMember()]
        [OptionSetMetadata("Custom Highlight", Index=283, Lcid=1033, Description="Highlight of relevant conversation section")]
        CustomHighlight = 10811,
        
        [EnumMember()]
        [OptionSetMetadata("Custom Publisher", Index=284, Lcid=1033, Description="The publisher of the conversation highlight")]
        CustomPublisher = 10812,
        
        [EnumMember()]
        [OptionSetMetadata("EnvironmentSettings", Index=282, Lcid=1033, Description="SCI environment level settings")]
        EnvironmentSettings = 10813,
        
        [EnumMember()]
        [OptionSetMetadata("UserSettings", Index=280, Lcid=1033, Description="SCI user level settings")]
        UserSettings = 10814,
        
        [EnumMember()]
        [OptionSetMetadata("CatalogEventStatusConfiguration", Index=157, Lcid=1033, Description="Status configuration for events in a catalog.")]
        CatalogEventStatusConfiguration = 10815,
        
        [EnumMember()]
        [OptionSetMetadata("Configuration", Index=155, Lcid=1033, Description="")]
        Configuration = 10816,
        
        [EnumMember()]
        [OptionSetMetadata("Trigger", Index=153, Lcid=1033, Description="Metadata for Cxp Events")]
        Trigger = 10817,
        
        [EnumMember()]
        [OptionSetMetadata("Triggers To Sdk Message Processing Steps", Index=154, Lcid=1033, Description="Mapping between CJO Marketing Triggers and Sdk Message Processing Steps")]
        TriggersToSdkMessageProcessingSteps = 10818,
        
        [EnumMember()]
        [OptionSetMetadata("EventParameterMetadata", Index=99, Lcid=1033, Description="Metadata for Cxp Event Parameters")]
        EventParameterMetadata = 10819,
        
        [EnumMember()]
        [OptionSetMetadata("TrackingContext", Index=86, Lcid=1033, Description="")]
        TrackingContext = 10820,
        
        [EnumMember()]
        [OptionSetMetadata("Marketing feature configuration", Index=98, Lcid=1033, Description="")]
        Marketingfeatureconfiguration = 10821,
        
        [EnumMember()]
        [OptionSetMetadata("msdynmkt_experimentv2", Index=100, Lcid=1033, Description="")]
        msdynmkt_experimentv2 = 10822,
        
        [EnumMember()]
        [OptionSetMetadata("ACS channel instance", Index=149, Lcid=1033, Description="")]
        ACSchannelinstance = 10823,
        
        [EnumMember()]
        [OptionSetMetadata("ACS channel instance account", Index=156, Lcid=1033, Description="")]
        ACSchannelinstanceaccount = 10824,
        
        [EnumMember()]
        [OptionSetMetadata("Infobip channel instance", Index=96, Lcid=1033, Description="")]
        Infobipchannelinstance = 10825,
        
        [EnumMember()]
        [OptionSetMetadata("Infobip channel instance account", Index=97, Lcid=1033, Description="")]
        Infobipchannelinstanceaccount = 10826,
        
        [EnumMember()]
        [OptionSetMetadata("Link mobility channel instance", Index=104, Lcid=1033, Description="")]
        Linkmobilitychannelinstance = 10827,
        
        [EnumMember()]
        [OptionSetMetadata("Link mobility channel instance account", Index=105, Lcid=1033, Description="")]
        Linkmobilitychannelinstanceaccount = 10828,
        
        [EnumMember()]
        [OptionSetMetadata("MockSmsProvider channel instance", Index=95, Lcid=1033, Description="")]
        MockSmsProviderchannelinstance = 10829,
        
        [EnumMember()]
        [OptionSetMetadata("MockSmsProvider channel instance account", Index=88, Lcid=1033, Description="")]
        MockSmsProviderchannelinstanceaccount = 10830,
        
        [EnumMember()]
        [OptionSetMetadata("TeleSign channel instance", Index=87, Lcid=1033, Description="")]
        TeleSignchannelinstance = 10831,
        
        [EnumMember()]
        [OptionSetMetadata("TeleSign channel instance account", Index=85, Lcid=1033, Description="")]
        TeleSignchannelinstanceaccount = 10832,
        
        [EnumMember()]
        [OptionSetMetadata("Twilio channel instance", Index=93, Lcid=1033, Description="")]
        Twiliochannelinstance = 10833,
        
        [EnumMember()]
        [OptionSetMetadata("Twilio channel instance account", Index=94, Lcid=1033, Description="")]
        Twiliochannelinstanceaccount = 10834,
        
        [EnumMember()]
        [OptionSetMetadata("Vibes channel instance", Index=92, Lcid=1033, Description="")]
        Vibeschannelinstance = 10835,
        
        [EnumMember()]
        [OptionSetMetadata("Vibes channel instance account", Index=90, Lcid=1033, Description="")]
        Vibeschannelinstanceaccount = 10836,
        
        [EnumMember()]
        [OptionSetMetadata("Predefined Placeholder", Index=89, Lcid=1033, Description="")]
        PredefinedPlaceholder = 10837,
        
        [EnumMember()]
        [OptionSetMetadata("Metadata Entity Relationship", Index=103, Lcid=1033, Description="")]
        MetadataEntityRelationship = 10838,
        
        [EnumMember()]
        [OptionSetMetadata("Metadata Item", Index=101, Lcid=1033, Description="")]
        MetadataItem = 10839,
        
        [EnumMember()]
        [OptionSetMetadata("Metadata Store State", Index=102, Lcid=1033, Description="")]
        MetadataStoreState = 10840,
        
        [EnumMember()]
        [OptionSetMetadata("DigitalSellingActiveTask", Index=1080, Lcid=1033, Description="")]
        DigitalSellingActiveTask = 10841,
        
        [EnumMember()]
        [OptionSetMetadata("DigitalSellingCompletedTask", Index=1081, Lcid=1033, Description="")]
        DigitalSellingCompletedTask = 10842,
        
        [EnumMember()]
        [OptionSetMetadata("Sales Tag", Index=278, Lcid=1033, Description="")]
        SalesTag = 10843,
        
        [EnumMember()]
        [OptionSetMetadata("Sequence", Index=61, Lcid=1033, Description="")]
        Sequence = 10844,
        
        [EnumMember()]
        [OptionSetMetadata("Sequence Stat", Index=62, Lcid=1033, Description="")]
        SequenceStat = 10845,
        
        [EnumMember()]
        [OptionSetMetadata("Sequence Target", Index=60, Lcid=1033, Description="")]
        SequenceTarget = 10846,
        
        [EnumMember()]
        [OptionSetMetadata("Sequence Target Step", Index=58, Lcid=1033, Description="")]
        SequenceTargetStep = 10847,
        
        [EnumMember()]
        [OptionSetMetadata("Sequence Template", Index=59, Lcid=1033, Description="")]
        SequenceTemplate = 10848,
        
        [EnumMember()]
        [OptionSetMetadata("sabackupdiagnostic", Index=254, Lcid=1033, Description="")]
        sabackupdiagnostic = 10850,
        
        [EnumMember()]
        [OptionSetMetadata("SABatchRunInstance", Index=255, Lcid=1033, Description="")]
        SABatchRunInstance = 10851,
        
        [EnumMember()]
        [OptionSetMetadata("salesroutingdiagnostic", Index=291, Lcid=1033, Description="")]
        salesroutingdiagnostic = 10852,
        
        [EnumMember()]
        [OptionSetMetadata("SARunInstance", Index=279, Lcid=1033, Description="")]
        SARunInstance = 10853,
        
        [EnumMember()]
        [OptionSetMetadata("Segment", Index=56, Lcid=1033, Description="")]
        Segment = 10854,
        
        [EnumMember()]
        [OptionSetMetadata("segmentsetting", Index=57, Lcid=1033, Description="")]
        segmentsetting = 10855,
        
        [EnumMember()]
        [OptionSetMetadata("Segment property", Index=55, Lcid=1033, Description="")]
        Segmentproperty = 10856,
        
        [EnumMember()]
        [OptionSetMetadata("SegmentsUtil", Index=53, Lcid=1033, Description="")]
        SegmentsUtil = 10857,
        
        [EnumMember()]
        [OptionSetMetadata("Assignment Rule", Index=1223, Lcid=1033, Description="Defines criteria based on which Entities are routed to Users or Sales Team")]
        AssignmentRule = 10858,
        
        [EnumMember()]
        [OptionSetMetadata("Seller attribute", Index=1224, Lcid=1033, Description="Sales Attribute")]
        Sellerattribute = 10859,
        
        [EnumMember()]
        [OptionSetMetadata("Seller attribute value", Index=1220, Lcid=1033, Description="Attribute Value of sales person or sales team")]
        Sellerattributevalue = 10860,
        
        [EnumMember()]
        [OptionSetMetadata("Assignment Map", Index=1216, Lcid=1033, Description="")]
        AssignmentMap = 10861,
        
        [EnumMember()]
        [OptionSetMetadata("Sales Assignment Setting", Index=261, Lcid=1033, Description="")]
        SalesAssignmentSetting = 10862,
        
        [EnumMember()]
        [OptionSetMetadata("Sales routing run", Index=292, Lcid=1033, Description="")]
        Salesroutingrun = 10863,
        
        [EnumMember()]
        [OptionSetMetadata("Extended User Setting", Index=1017, Lcid=1033, Description="")]
        ExtendedUserSetting = 10865,
        
        [EnumMember()]
        [OptionSetMetadata("Sales acceleration insights", Index=262, Lcid=1033, Description="Sales acceleration insights")]
        Salesaccelerationinsights = 10866,
        
        [EnumMember()]
        [OptionSetMetadata("Sales Acceleration settings", Index=263, Lcid=1033, Description="")]
        SalesAccelerationsettings = 10867,
        
        [EnumMember()]
        [OptionSetMetadata("Insight", Index=285, Lcid=1033, Description="")]
        Insight = 10868,
        
        [EnumMember()]
        [OptionSetMetadata("Work List Suggestion", Index=128, Lcid=1033, Description="")]
        WorkListSuggestion = 10869,
        
        [EnumMember()]
        [OptionSetMetadata("Work list suggestion source", Index=135, Lcid=1033, Description="")]
        Worklistsuggestionsource = 10870,
        
        [EnumMember()]
        [OptionSetMetadata("Work List View Configuration", Index=136, Lcid=1033, Description="Entity to store work list view configurations on filter, icons, sort etc")]
        WorkListViewConfiguration = 10871,
        
        [EnumMember()]
        [OptionSetMetadata("Work Queue Record", Index=134, Lcid=1033, Description="Entity created to store WorkQueue Data Model Records")]
        WorkQueueRecord = 10872,
        
        [EnumMember()]
        [OptionSetMetadata("Work Queue Record State", Index=132, Lcid=1033, Description="Entity created to store WorkQueue Records state")]
        WorkQueueRecordState = 10873,
        
        [EnumMember()]
        [OptionSetMetadata("Work list user setting", Index=133, Lcid=1033, Description="Entity created to store work list user setting")]
        Worklistusersetting = 10874,
        
        [EnumMember()]
        [OptionSetMetadata("WQDataSource", Index=162, Lcid=1033, Description="")]
        WQDataSource = 10875,
        
        [EnumMember()]
        [OptionSetMetadata("Suggestion Assignment Rule", Index=13, Lcid=1033, Description="")]
        SuggestionAssignmentRule = 10876,
        
        [EnumMember()]
        [OptionSetMetadata("Suggestion Principal Object Access", Index=12, Lcid=1033, Description="")]
        SuggestionPrincipalObjectAccess = 10877,
        
        [EnumMember()]
        [OptionSetMetadata("Suggestion Seller Priority", Index=20, Lcid=1033, Description="")]
        SuggestionSellerPriority = 10878,
        
        [EnumMember()]
        [OptionSetMetadata("Data Hygiene Setting Info", Index=1091, Lcid=1033, Description="Data Hygiene Setting Info")]
        DataHygieneSettingInfo = 10879,
        
        [EnumMember()]
        [OptionSetMetadata("Duplicate Detection Plugin Run", Index=1084, Lcid=1033, Description="Duplicate Detection Plugin Run used to track successful and failure state of the " +
            "Duplicate Detection Plugin")]
        DuplicateDetectionPluginRun = 10880,
        
        [EnumMember()]
        [OptionSetMetadata("Duplicate Lead Mapping", Index=1082, Lcid=1033, Description="This enity is used to connect base lead to duplicate leads")]
        DuplicateLeadMapping = 10881,
        
        [EnumMember()]
        [OptionSetMetadata("Lead Hygiene Setting", Index=1133, Lcid=1033, Description="Lead Hygiene Setting")]
        LeadHygieneSetting = 10882,
        
        [EnumMember()]
        [OptionSetMetadata("Linked Entity Attribute Validity", Index=1139, Lcid=1033, Description="")]
        LinkedEntityAttributeValidity = 10883,
        
        [EnumMember()]
        [OptionSetMetadata("Sales provisioning request", Index=42, Lcid=1033, Description="")]
        Salesprovisioningrequest = 10884,
        
        [EnumMember()]
        [OptionSetMetadata("SalesOmnichannel Message", Index=295, Lcid=1033, Description="")]
        SalesOmnichannelMessage = 10885,
        
        [EnumMember()]
        [OptionSetMetadata("Text message template", Index=293, Lcid=1033, Description="")]
        Textmessagetemplate = 10886,
        
        [EnumMember()]
        [OptionSetMetadata("Data Analytics Admin Settings (Deprecated)", Index=1187, Lcid=1033, Description="Data Analytics Admin Settings (Deprecated)")]
        DataAnalyticsAdminSettingsDeprecated = 10887,
        
        [EnumMember()]
        [OptionSetMetadata("Data Analytics Report", Index=1071, Lcid=1033, Description="Data Analytics Reports")]
        DataAnalyticsReport = 10888,
        
        [EnumMember()]
        [OptionSetMetadata("Insights", Index=1092, Lcid=1033, Description="Analytics and insights feature entity")]
        Insights = 10889,
        
        [EnumMember()]
        [OptionSetMetadata("Sales acceleration reports", Index=1059, Lcid=1033, Description="Sales acceleration reports")]
        Salesaccelerationreports = 10890,
        
        [EnumMember()]
        [OptionSetMetadata("Bot Session", Index=1205, Lcid=1033, Description="Bot specific sessions ")]
        BotSession = 10892,
        
        [EnumMember()]
        [OptionSetMetadata("Automated action rule", Index=214, Lcid=1033, Description="The omnichannel automated action rules.")]
        Automatedactionrule = 10893,
        
        [EnumMember()]
        [OptionSetMetadata("Automated action rules mapping", Index=215, Lcid=1033, Description="The mapping of omnichannel automated action rules.")]
        Automatedactionrulesmapping = 10894,
        
        [EnumMember()]
        [OptionSetMetadata("Agent Copilot Setting", Index=1260, Lcid=1033, Description="")]
        AgentCopilotSetting = 10895,
        
        [EnumMember()]
        [OptionSetMetadata("Copilot Summarization Setting", Index=1304, Lcid=1033, Description="")]
        CopilotSummarizationSetting = 10896,
        
        [EnumMember()]
        [OptionSetMetadata("intent", Index=1143, Lcid=1033, Description="Captures the unique natural language intent")]
        intent = 10897,
        
        [EnumMember()]
        [OptionSetMetadata("intentattribute", Index=1141, Lcid=1033, Description="Captures all possible attributes across all intents")]
        intentattribute = 10898,
        
        [EnumMember()]
        [OptionSetMetadata("intentattributeset", Index=1149, Lcid=1033, Description="Captures the attributes required to complete a given intent")]
        intentattributeset = 10899,
        
        [EnumMember()]
        [OptionSetMetadata("intentattribute_entity", Index=1142, Lcid=1033, Description="Associates the value of an intent attribute identified for a given case or conver" +
            "sation.")]
        intentattribute_entity = 10900,
        
        [EnumMember()]
        [OptionSetMetadata("Intent Config", Index=1150, Lcid=1033, Description="Configuration that captures the fields needed for intent determination")]
        IntentConfig = 10901,
        
        [EnumMember()]
        [OptionSetMetadata("intententity", Index=1148, Lcid=1033, Description="Associates an intent to any entity such as case, conversation to capture evolving" +
            " intent.")]
        intententity = 10902,
        
        [EnumMember()]
        [OptionSetMetadata("Line of Business", Index=1147, Lcid=1033, Description="")]
        LineofBusiness = 10903,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_intentfeature_configuration", Index=1177, Lcid=1033, Description="")]
        msdyn_intentfeature_configuration = 10904,
        
        [EnumMember()]
        [OptionSetMetadata("Intent Group Condition", Index=1175, Lcid=1033, Description="")]
        IntentGroupCondition = 10905,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_intentharvesting_batchjobstatus", Index=1173, Lcid=1033, Description="")]
        msdyn_intentharvesting_batchjobstatus = 10906,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_intentharvesting_provisioning_status", Index=1181, Lcid=1033, Description="")]
        msdyn_intentharvesting_provisioning_status = 10907,
        
        [EnumMember()]
        [OptionSetMetadata("Intent Solution Map", Index=1180, Lcid=1033, Description="Captures Solutions for Intent Groups")]
        IntentSolutionMap = 10908,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_intentsolution_mappingconfiguration", Index=1182, Lcid=1033, Description="")]
        msdyn_intentsolution_mappingconfiguration = 10909,
        
        [EnumMember()]
        [OptionSetMetadata("Case Enrichment", Index=1209, Lcid=1033, Description="")]
        CaseEnrichment = 10910,
        
        [EnumMember()]
        [OptionSetMetadata("Case follow up and closure configuration", Index=1210, Lcid=1033, Description="")]
        Casefollowupandclosureconfiguration = 10911,
        
        [EnumMember()]
        [OptionSetMetadata("Case Suggestion", Index=1267, Lcid=1033, Description="")]
        CaseSuggestion = 10912,
        
        [EnumMember()]
        [OptionSetMetadata("Case Suggestion Request Payload", Index=1324, Lcid=1033, Description="")]
        CaseSuggestionRequestPayload = 10913,
        
        [EnumMember()]
        [OptionSetMetadata("Case Suggestions Data Souce", Index=1325, Lcid=1033, Description="")]
        CaseSuggestionsDataSouce = 10914,
        
        [EnumMember()]
        [OptionSetMetadata("Agent Preference For Copilot", Index=1276, Lcid=1033, Description="")]
        AgentPreferenceForCopilot = 10915,
        
        [EnumMember()]
        [OptionSetMetadata("Copilot Interaction", Index=1275, Lcid=1033, Description="")]
        CopilotInteraction = 10916,
        
        [EnumMember()]
        [OptionSetMetadata("Copilot Interaction Data", Index=1273, Lcid=1033, Description="")]
        CopilotInteractionData = 10917,
        
        [EnumMember()]
        [OptionSetMetadata("Copilot knowledge interaction", Index=1303, Lcid=1033, Description="Record of copilot using knowledge article")]
        Copilotknowledgeinteraction = 10918,
        
        [EnumMember()]
        [OptionSetMetadata("Copilot Transcript", Index=1302, Lcid=1033, Description="")]
        CopilotTranscript = 10919,
        
        [EnumMember()]
        [OptionSetMetadata("Copilot Transcript Data", Index=1300, Lcid=1033, Description="")]
        CopilotTranscriptData = 10920,
        
        [EnumMember()]
        [OptionSetMetadata("KB Enrichment", Index=1111, Lcid=1033, Description="")]
        KBEnrichment = 10921,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge Article Suggestion", Index=1116, Lcid=1033, Description="")]
        KnowledgeArticleSuggestion = 10922,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge Article Suggestion Data Source", Index=1109, Lcid=1033, Description="")]
        KnowledgeArticleSuggestionDataSource = 10923,
        
        [EnumMember()]
        [OptionSetMetadata("Next Action", Index=222, Lcid=1033, Description="")]
        NextAction = 10924,
        
        [EnumMember()]
        [OptionSetMetadata("Service Copilot Plugin", Index=45, Lcid=1033, Description="")]
        ServiceCopilotPlugin = 10925,
        
        [EnumMember()]
        [OptionSetMetadata("Service Copilot Plugin Action", Index=46, Lcid=1033, Description="")]
        ServiceCopilotPluginAction = 10926,
        
        [EnumMember()]
        [OptionSetMetadata("Service Copilot Plugin Role", Index=44, Lcid=1033, Description="")]
        ServiceCopilotPluginRole = 10927,
        
        [EnumMember()]
        [OptionSetMetadata("Suggestion Interaction", Index=11, Lcid=1033, Description="")]
        SuggestionInteraction = 10928,
        
        [EnumMember()]
        [OptionSetMetadata("Suggestion request payload", Index=19, Lcid=1033, Description="")]
        Suggestionrequestpayload = 10929,
        
        [EnumMember()]
        [OptionSetMetadata("Suggestions Model Summary", Index=18, Lcid=1033, Description="Suggestions Model Summary entity")]
        SuggestionsModelSummary = 10930,
        
        [EnumMember()]
        [OptionSetMetadata("Suggestions Setting", Index=16, Lcid=1033, Description="Suggestions settings entity")]
        SuggestionsSetting = 10931,
        
        [EnumMember()]
        [OptionSetMetadata("Data Analytics User Customized Report", Index=1295, Lcid=1033, Description="Data Analytics User Customized Report")]
        DataAnalyticsUserCustomizedReport = 10932,
        
        [EnumMember()]
        [OptionSetMetadata("Data Analytics Dataset", Index=1070, Lcid=1033, Description="Data Analytics Power BI Datasets")]
        DataAnalyticsDataset = 10933,
        
        [EnumMember()]
        [OptionSetMetadata("Data Analytics Workspace", Index=1056, Lcid=1033, Description="Data Analytics Power BI Workspaces")]
        DataAnalyticsWorkspace = 10934,
        
        [EnumMember()]
        [OptionSetMetadata("Report Bookmark", Index=272, Lcid=1033, Description="")]
        ReportBookmark = 10935,
        
        [EnumMember()]
        [OptionSetMetadata("Agent Resource Forecasting", Index=1264, Lcid=1033, Description="Agent Resource Forecasting")]
        AgentResourceForecasting = 10936,
        
        [EnumMember()]
        [OptionSetMetadata("[Deprecated] Dynamics Customer Service Analytics", Index=1185, Lcid=1033, Description="[Deprecated] Controls access to Analytics Reporting Sitemap in Dynamics Customer " +
            "Service App")]
        DeprecatedDynamicsCustomerServiceAnalytics = 10937,
        
        [EnumMember()]
        [OptionSetMetadata("Case Topic", Index=1323, Lcid=1033, Description="")]
        CaseTopic = 10938,
        
        [EnumMember()]
        [OptionSetMetadata("Case Topic Setting", Index=1322, Lcid=1033, Description="Case Topic Setting Entity")]
        CaseTopicSetting = 10939,
        
        [EnumMember()]
        [OptionSetMetadata("Case Topic Summary", Index=1329, Lcid=1033, Description="Case Topic Summary Entity")]
        CaseTopicSummary = 10940,
        
        [EnumMember()]
        [OptionSetMetadata("Case topic Incident mapping", Index=1321, Lcid=1033, Description="Cases mapping with the case topics")]
        CasetopicIncidentmapping = 10941,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Service historical analytics", Index=1067, Lcid=1033, Description="Customer Service historical analytics")]
        CustomerServicehistoricalanalytics = 10942,
        
        [EnumMember()]
        [OptionSetMetadata("Forecast", Index=1075, Lcid=1033, Description="Case, Conversation Volume Forecast analytics")]
        Forecast_3 = 10943,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge analytics", Index=1076, Lcid=1033, Description="Knowledge analytics")]
        Knowledgeanalytics = 10944,
        
        [EnumMember()]
        [OptionSetMetadata("Model Customization analytics", Index=1074, Lcid=1033, Description="Model Customization analytics")]
        ModelCustomizationanalytics = 10945,
        
        [EnumMember()]
        [OptionSetMetadata("UR RecordRouting Real-time Analytics", Index=1058, Lcid=1033, Description="UR RecordRouting Real-time Analytics")]
        URRecordRoutingRealtimeAnalytics = 10946,
        
        [EnumMember()]
        [OptionSetMetadata("Forecast Summary and Setting", Index=1044, Lcid=1033, Description="")]
        ForecastSummaryandSetting = 10947,
        
        [EnumMember()]
        [OptionSetMetadata("Keywords Description Suggestion Setting", Index=1118, Lcid=1033, Description="Keywords Description Suggestion settings entity")]
        KeywordsDescriptionSuggestionSetting = 10948,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Summary Interaction", Index=1286, Lcid=1033, Description="Conversation Summary Interaction Entity")]
        ConversationSummaryInteraction = 10949,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Summary Setting", Index=1284, Lcid=1033, Description="Conversation Summary Settings Entity")]
        ConversationSummarySetting = 10950,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Topic", Index=1272, Lcid=1033, Description="")]
        ConversationTopic = 10951,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Topic Setting", Index=1268, Lcid=1033, Description="Conversation Topic Setting Entity")]
        ConversationTopicSetting = 10952,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Topic Summary", Index=1269, Lcid=1033, Description="Conversation Topic Summary Entity")]
        ConversationTopicSummary = 10953,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation topic Conversation mapping", Index=1270, Lcid=1033, Description="Conversation mapping with conversation topics")]
        ConversationtopicConversationmapping = 10954,
        
        [EnumMember()]
        [OptionSetMetadata("Omnichannel historical analytics", Index=1072, Lcid=1033, Description="Omnichannel historical analytics")]
        Omnichannelhistoricalanalytics = 10955,
        
        [EnumMember()]
        [OptionSetMetadata("Omnichannel voice historical analytics (preview) (Deprecated)", Index=1066, Lcid=1033, Description="Omnichannel voice historical analytics (preview) (Deprecated)")]
        OmnichannelvoicehistoricalanalyticspreviewDeprecated = 10956,
        
        [EnumMember()]
        [OptionSetMetadata("Omnichannel Realtime analytics", Index=1073, Lcid=1033, Description="Omnichannel Realtime analytics")]
        OmnichannelRealtimeanalytics = 10957,
        
        [EnumMember()]
        [OptionSetMetadata("Copilot Analytics", Index=1069, Lcid=1033, Description="Case, Conversation, Email Copilot interaction analytics")]
        CopilotAnalytics = 10958,
        
        [EnumMember()]
        [OptionSetMetadata("Product", Index=787, Lcid=1033, Description="")]
        Product_2 = 10959,
        
        [EnumMember()]
        [OptionSetMetadata("Template Rule Set", Index=32, Lcid=1033, Description="Contains template rulesets that can be applied to custom assignment method in a q" +
            "ueue")]
        TemplateRuleSet = 11029,
        
        [EnumMember()]
        [OptionSetMetadata("Entity Attribute Prediction Rule", Index=1027, Lcid=1033, Description="")]
        EntityAttributePredictionRule = 11030,
        
        [EnumMember()]
        [OptionSetMetadata("Invoice Collection", Index=789, Lcid=1033, Description="")]
        InvoiceCollection = 11051,
        
        [EnumMember()]
        [OptionSetMetadata("Subscription", Index=788, Lcid=1033, Description="Entity description")]
        Subscription_2 = 11060,
        
        [EnumMember()]
        [OptionSetMetadata("SharePoint Managed Identity", Index=349, Lcid=1033, Description="Entity representing a managed identity for SharePoint, used for authentication an" +
            "d authorization purposes.")]
        SharePointManagedIdentity = 11114,
        
        [EnumMember()]
        [OptionSetMetadata("AI Insight Card", Index=922, Lcid=1033, Description="")]
        AIInsightCard = 11115,
        
        [EnumMember()]
        [OptionSetMetadata("Processor Registration", Index=635, Lcid=1033, Description="")]
        ProcessorRegistration = 11116,
        
        [EnumMember()]
        [OptionSetMetadata("Signal Registration", Index=356, Lcid=1033, Description="")]
        SignalRegistration = 11117,
        
        [EnumMember()]
        [OptionSetMetadata("Trait Registration", Index=434, Lcid=1033, Description="")]
        TraitRegistration = 11118,
        
        [EnumMember()]
        [OptionSetMetadata("Email analytics", Index=1068, Lcid=1033, Description="Email analytics")]
        Emailanalytics = 11119,
        
        [EnumMember()]
        [OptionSetMetadata("LOB Backfill Status", Index=1146, Lcid=1033, Description="")]
        LOBBackfillStatus = 11120,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_intentfamily_harvestingconfiguration", Index=1176, Lcid=1033, Description="")]
        msdyn_intentfamily_harvestingconfiguration = 11121,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_intentharvesting_batchjobstatusdetail", Index=1174, Lcid=1033, Description="")]
        msdyn_intentharvesting_batchjobstatusdetail = 11122,
        
        [EnumMember()]
        [OptionSetMetadata("Copilot assisted case form fill settings", Index=1277, Lcid=1033, Description="Copilot assisted case form fill settings")]
        Copilotassistedcaseformfillsettings = 11123,
        
        [EnumMember()]
        [OptionSetMetadata("Sales usage telemetry reports", Index=1060, Lcid=1033, Description="Sales usage telemetry reports")]
        Salesusagetelemetryreports = 11124,
        
        [EnumMember()]
        [OptionSetMetadata("Sales usage reporting", Index=84, Lcid=1033, Description="Sales usage reporting")]
        Salesusagereporting = 11125,
        
        [EnumMember()]
        [OptionSetMetadata("Derived insights related entity", Index=1087, Lcid=1033, Description="Derived insights related entities")]
        Derivedinsightsrelatedentity = 11126,
        
        [EnumMember()]
        [OptionSetMetadata("Entity derived insights", Index=1033, Lcid=1033, Description="Entity derived insights")]
        Entityderivedinsights = 11127,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_rawinsight", Index=317, Lcid=1033, Description="")]
        msdyn_rawinsight = 11128,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_rawinsightentitylink", Index=318, Lcid=1033, Description="")]
        msdyn_rawinsightentitylink = 11129,
        
        [EnumMember()]
        [OptionSetMetadata("Sales Copilot Email Insight", Index=259, Lcid=1033, Description="Entity used to keep the actions derived from email")]
        SalesCopilotEmailInsight = 11130,
        
        [EnumMember()]
        [OptionSetMetadata("Sales Copilot Insight Card State", Index=289, Lcid=1033, Description="This entity used to store actions performed by users on the entity like snooze/di" +
            "smiss.")]
        SalesCopilotInsightCardState = 11131,
        
        [EnumMember()]
        [OptionSetMetadata("Copilot Interactions", Index=1274, Lcid=1033, Description="Data table of previous copilot interactions.")]
        CopilotInteractions = 11132,
        
        [EnumMember()]
        [OptionSetMetadata("Email Sentiment", Index=1028, Lcid=1033, Description="")]
        EmailSentiment = 11133,
        
        [EnumMember()]
        [OptionSetMetadata("Agent Group Language", Index=1259, Lcid=1033, Description="Represents the association of user groups with language")]
        AgentGroupLanguage = 11134,
        
        [EnumMember()]
        [OptionSetMetadata("Agent Group Region", Index=1258, Lcid=1033, Description="Represents the association of user groups with region")]
        AgentGroupRegion = 11135,
        
        [EnumMember()]
        [OptionSetMetadata("Agent Language", Index=1265, Lcid=1033, Description="Represents the association of users with language ")]
        AgentLanguage = 11136,
        
        [EnumMember()]
        [OptionSetMetadata("Agent Region", Index=1266, Lcid=1033, Description="Represents the association of users with region")]
        AgentRegion = 11137,
        
        [EnumMember()]
        [OptionSetMetadata("Language Hierarchy", Index=1135, Lcid=1033, Description="This entity is used to identify the language preference of end customers. Users a" +
            "nd user groups are decorated with language, and matched with conversations to ro" +
            "ute them. Users and user groups decoration also supports hierarchy")]
        LanguageHierarchy = 11138,
        
        [EnumMember()]
        [OptionSetMetadata("Region", Index=266, Lcid=1033, Description="This entity is used to identify the region of end customers. Users and user group" +
            "s are decorated with region, and matched with conversations to route them. Users" +
            " and user groups decoration also supports hierarchy. ")]
        Region = 11139,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_historicalcaseharvestbatch", Index=1154, Lcid=1033, Description="")]
        msdyn_historicalcaseharvestbatch = 11140,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_historicalcaseharvestrun", Index=1152, Lcid=1033, Description="")]
        msdyn_historicalcaseharvestrun = 11141,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge Harvest Job Record", Index=1099, Lcid=1033, Description="Tracking entity record used to trigger the harvesting process for knowledge artic" +
            "les")]
        KnowledgeHarvestJobRecord = 11142,
        
        [EnumMember()]
        [OptionSetMetadata("Transaction", Index=1239, Lcid=1033, Description="This table contains records of transaction information")]
        Transaction = 11143,
        
        [EnumMember()]
        [OptionSetMetadata("Invoice", Index=791, Lcid=1033, Description="This table contains records of invoice information")]
        Invoice = 11144,
        
        [EnumMember()]
        [OptionSetMetadata("Plan", Index=206, Lcid=1033, Description="Table that stores plan records.")]
        Plan = 11145,
        
        [EnumMember()]
        [OptionSetMetadata("Plan Artifact", Index=207, Lcid=1033, Description="Table that stores the artifact records for a plan.")]
        PlanArtifact = 11146,
        
        [EnumMember()]
        [OptionSetMetadata("Plan Attachment", Index=200, Lcid=1033, Description="")]
        PlanAttachment = 11147,
        
        [EnumMember()]
        [OptionSetMetadata("Data Workspace", Index=453, Lcid=1033, Description="Table that stores Data workspace records.")]
        DataWorkspace = 11151,
        
        [EnumMember()]
        [OptionSetMetadata("TextDataRecordsIndexingStatus", Index=451, Lcid=1033, Description="Stores information about unstructured / text data records indexing status")]
        TextDataRecordsIndexingStatus = 11152,
        
        [EnumMember()]
        [OptionSetMetadata("Auto Case Closure Agent Activity", Index=449, Lcid=1033, Description="")]
        AutoCaseClosureAgentActivity = 11153,
        
        [EnumMember()]
        [OptionSetMetadata("Auto Case Closure Agent Monitoring", Index=450, Lcid=1033, Description="")]
        AutoCaseClosureAgentMonitoring = 11154,
    }
    
    [DataContract()]
    public enum DuplicateRule_MatchingEntityTypeCode {
        
        [EnumMember()]
        [OptionSetMetadata("Account", Index=902, Lcid=1033, Description="Business that represents a customer or potential customer. The company that is bi" +
            "lled in business transactions.")]
        Account = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Contact", Index=936, Lcid=1033, Description="Person with whom a business unit has a relationship, such as customer, supplier, " +
            "and colleague.")]
        Contact = 2,
        
        [EnumMember()]
        [OptionSetMetadata("Opportunity", Index=572, Lcid=1033, Description="Potential revenue-generating event, or sale to an account, which needs to be trac" +
            "ked through a sales process to completion.")]
        Opportunity = 3,
        
        [EnumMember()]
        [OptionSetMetadata("Lead", Index=765, Lcid=1033, Description="Prospect or potential sales opportunity. Leads are converted into accounts, conta" +
            "cts, or opportunities when they are qualified. Otherwise, they are deleted or ar" +
            "chived.")]
        Lead = 4,
        
        [EnumMember()]
        [OptionSetMetadata("Note", Index=916, Lcid=1033, Description="Note that is attached to one or more objects, including other notes.")]
        Note = 5,
        
        [EnumMember()]
        [OptionSetMetadata("Business Unit Map", Index=972, Lcid=1033, Description="Stores mapping attributes for business units.")]
        BusinessUnitMap = 6,
        
        [EnumMember()]
        [OptionSetMetadata("Owner", Index=517, Lcid=1033, Description="Group of undeleted system users and undeleted teams. Owners can be used to contro" +
            "l access to specific objects.")]
        Owner = 7,
        
        [EnumMember()]
        [OptionSetMetadata("User", Index=473, Lcid=1033, Description="Person with access to the Microsoft CRM system and who owns objects in the Micros" +
            "oft CRM database.")]
        User = 8,
        
        [EnumMember()]
        [OptionSetMetadata("Team", Index=499, Lcid=1033, Description="Collection of system users that routinely collaborate. Teams can be used to simpl" +
            "ify record sharing and provide team members with common access to organization d" +
            "ata when team members belong to different Business Units.")]
        Team = 9,
        
        [EnumMember()]
        [OptionSetMetadata("Business Unit", Index=974, Lcid=1033, Description="Business, division, or department in the Microsoft Dynamics 365 database.")]
        BusinessUnit = 10,
        
        [EnumMember()]
        [OptionSetMetadata("System User Principal", Index=471, Lcid=1033, Description="For internal use only.")]
        SystemUserPrincipal = 14,
        
        [EnumMember()]
        [OptionSetMetadata("AccountLeads", Index=900, Lcid=1033, Description="description.")]
        AccountLeads = 16,
        
        [EnumMember()]
        [OptionSetMetadata("ContactInvoices", Index=965, Lcid=1033)]
        ContactInvoices = 17,
        
        [EnumMember()]
        [OptionSetMetadata("ContactQuotes", Index=962, Lcid=1033)]
        ContactQuotes = 18,
        
        [EnumMember()]
        [OptionSetMetadata("ContactOrders", Index=964, Lcid=1033)]
        ContactOrders = 19,
        
        [EnumMember()]
        [OptionSetMetadata("Service Contract Contact", Index=411, Lcid=1033, Description="Item in a Service contract.")]
        ServiceContractContact = 20,
        
        [EnumMember()]
        [OptionSetMetadata("ProductSalesLiterature", Index=668, Lcid=1033)]
        ProductSalesLiterature = 21,
        
        [EnumMember()]
        [OptionSetMetadata("ContactLeads", Index=966, Lcid=1033)]
        ContactLeads = 22,
        
        [EnumMember()]
        [OptionSetMetadata("LeadCompetitors", Index=761, Lcid=1033)]
        LeadCompetitors = 24,
        
        [EnumMember()]
        [OptionSetMetadata("OpportunityCompetitors", Index=571, Lcid=1033)]
        OpportunityCompetitors = 25,
        
        [EnumMember()]
        [OptionSetMetadata("CompetitorSalesLiterature", Index=946, Lcid=1033)]
        CompetitorSalesLiterature = 26,
        
        [EnumMember()]
        [OptionSetMetadata("LeadProduct", Index=762, Lcid=1033)]
        LeadProduct = 27,
        
        [EnumMember()]
        [OptionSetMetadata("Subscription", Index=367, Lcid=1033, Description="For internal use only.")]
        Subscription = 29,
        
        [EnumMember()]
        [OptionSetMetadata("Filter Template", Index=706, Lcid=1033, Description="Template for a filter.")]
        FilterTemplate = 30,
        
        [EnumMember()]
        [OptionSetMetadata("Privilege Object Type Code", Index=636, Lcid=1033, Description="For internal use only.")]
        PrivilegeObjectTypeCode = 31,
        
        [EnumMember()]
        [OptionSetMetadata("Sales Process Instance", Index=397, Lcid=1033, Description="Instance of a sales process.")]
        SalesProcessInstance = 32,
        
        [EnumMember()]
        [OptionSetMetadata("Subscription Synchronization Information", Index=480, Lcid=1033, Description="For internal use only.")]
        SubscriptionSynchronizationInformation = 33,
        
        [EnumMember()]
        [OptionSetMetadata("Tracking information for deleted entities", Index=478, Lcid=1033, Description="For internal use only.")]
        Trackinginformationfordeletedentities = 35,
        
        [EnumMember()]
        [OptionSetMetadata("Client update", Index=945, Lcid=1033, Description="Microsoft Dynamics 365 client for Outlook offline database update.")]
        Clientupdate = 36,
        
        [EnumMember()]
        [OptionSetMetadata("Subscription Manually Tracked Object", Index=366, Lcid=1033, Description="For internal use only.")]
        SubscriptionManuallyTrackedObject = 37,
        
        [EnumMember()]
        [OptionSetMetadata("SystemUser BusinessUnit Entity Map", Index=472, Lcid=1033, Description="Stores mapping attributes for business units.")]
        SystemUserBusinessUnitEntityMap = 42,
        
        [EnumMember()]
        [OptionSetMetadata("Field Sharing", Index=650, Lcid=1033, Description="Defines CRM security principals (users and teams) access rights to secured field " +
            "for an entity instance.")]
        FieldSharing = 44,
        
        [EnumMember()]
        [OptionSetMetadata("Subscription Statistic Offline", Index=364, Lcid=1033, Description="Subscription Statistic Offline")]
        SubscriptionStatisticOffline = 45,
        
        [EnumMember()]
        [OptionSetMetadata("Subscription Statistic Outlook", Index=365, Lcid=1033, Description="Subscription Statistic Outlook")]
        SubscriptionStatisticOutlook = 46,
        
        [EnumMember()]
        [OptionSetMetadata("Subscription Sync Entry Offline", Index=422, Lcid=1033, Description="Used for offline sync, internal use only.")]
        SubscriptionSyncEntryOffline = 47,
        
        [EnumMember()]
        [OptionSetMetadata("Subscription Sync Entry Outlook", Index=479, Lcid=1033, Description="Used for outlook sync, internal use only.")]
        SubscriptionSyncEntryOutlook = 48,
        
        [EnumMember()]
        [OptionSetMetadata("Position", Index=546, Lcid=1033, Description="Position of a user in the hierarchy")]
        Position = 50,
        
        [EnumMember()]
        [OptionSetMetadata("System User Manager Map", Index=470, Lcid=1033, Description="For internal use only.")]
        SystemUserManagerMap = 51,
        
        [EnumMember()]
        [OptionSetMetadata("User Search Facet", Index=459, Lcid=1033)]
        UserSearchFacet = 52,
        
        [EnumMember()]
        [OptionSetMetadata("Global Search Configuration", Index=803, Lcid=1033)]
        GlobalSearchConfiguration = 54,
        
        [EnumMember()]
        [OptionSetMetadata("FileAttachment", Index=705, Lcid=1033, Description="File Attachment")]
        FileAttachment = 55,
        
        [EnumMember()]
        [OptionSetMetadata("SystemUserAuthorizationChangeTracker", Index=474, Lcid=1033, Description="Internal authorization table to track user authorization changes")]
        SystemUserAuthorizationChangeTracker = 60,
        
        [EnumMember()]
        [OptionSetMetadata("PrincipalEntityBusinessUnitMap", Index=652, Lcid=1033, Description="Internal authorization table to track user authorization changes")]
        PrincipalEntityBusinessUnitMap = 61,
        
        [EnumMember()]
        [OptionSetMetadata("Record Filter", Index=607, Lcid=1033, Description="Record Access Filter")]
        RecordFilter = 72,
        
        [EnumMember()]
        [OptionSetMetadata("EntityRecordFilter", Index=684, Lcid=1033, Description="RecordFilter Object Type Codes")]
        EntityRecordFilter = 73,
        
        [EnumMember()]
        [OptionSetMetadata("Secured Masking Rule", Index=784, Lcid=1033, Description="Secured Masking Rules to apply to fields.")]
        SecuredMaskingRule = 74,
        
        [EnumMember()]
        [OptionSetMetadata("Privilege Checker Run", Index=638, Lcid=1033, Description="Entity to keep track of privilege checker tool runs. Parent entity of privilege c" +
            "hecker log.")]
        PrivilegeCheckerRun = 75,
        
        [EnumMember()]
        [OptionSetMetadata("Privilege Checker Log", Index=637, Lcid=1033, Description="Holds information about privilege checks for the user who started (created) a pri" +
            "vilege checker tool run (Privilege Checker Run\'s child entity)")]
        PrivilegeCheckerLog = 76,
        
        [EnumMember()]
        [OptionSetMetadata("Virtual Entity Data Provider", Index=686, Lcid=1033, Description="Developers can register plug-ins on a data provider to enable data access for vir" +
            "tual entities in the system.")]
        VirtualEntityDataProvider = 78,
        
        [EnumMember()]
        [OptionSetMetadata("Virtual Entity Data Source", Index=679, Lcid=1033, Description="Internal entity that stores data source information for all installed providers.")]
        VirtualEntityDataSource = 85,
        
        [EnumMember()]
        [OptionSetMetadata("Team template", Index=506, Lcid=1033, Description="Team template for an entity enabled for automatically created access teams.")]
        Teamtemplate = 92,
        
        [EnumMember()]
        [OptionSetMetadata("Social Profile", Index=346, Lcid=1033, Description="This entity is used to store social profile information of its associated account" +
            " and contacts on different social channels.")]
        SocialProfile = 99,
        
        [EnumMember()]
        [OptionSetMetadata("Service Plan", Index=405, Lcid=1033, Description="Service Plan")]
        ServicePlan = 101,
        
        [EnumMember()]
        [OptionSetMetadata("Privileges Removal Setting", Index=634, Lcid=1033, Description="Privileges Removal Setting")]
        PrivilegesRemovalSetting = 103,
        
        [EnumMember()]
        [OptionSetMetadata("Case", Index=840, Lcid=1033, Description="Service request case associated with a contract.")]
        Case = 112,
        
        [EnumMember()]
        [OptionSetMetadata("Child Incident Count", Index=944, Lcid=1033, Description="For internal use only.")]
        ChildIncidentCount = 113,
        
        [EnumMember()]
        [OptionSetMetadata("Competitor", Index=949, Lcid=1033, Description="Business competing for the sale represented by a lead or opportunity.")]
        Competitor = 123,
        
        [EnumMember()]
        [OptionSetMetadata("Indexed Article", Index=724, Lcid=1033, Description="Article indexed for search purposes.")]
        IndexedArticle = 126,
        
        [EnumMember()]
        [OptionSetMetadata("Article", Index=775, Lcid=1033, Description="Structured content that is part of the knowledge base.")]
        Article = 127,
        
        [EnumMember()]
        [OptionSetMetadata("Subject", Index=360, Lcid=1033, Description="Information regarding subjects available in the system.")]
        Subject = 129,
        
        [EnumMember()]
        [OptionSetMetadata("Announcement", Index=973, Lcid=1033, Description="Announcement associated with an organization.")]
        Announcement = 132,
        
        [EnumMember()]
        [OptionSetMetadata("Activity Party", Index=897, Lcid=1033, Description="Person or group associated with an activity. An activity can have multiple activi" +
            "ty parties.")]
        ActivityParty = 135,
        
        [EnumMember()]
        [OptionSetMetadata("User Settings", Index=457, Lcid=1033, Description="User\'s preferred settings.")]
        UserSettings_2 = 150,
        
        [EnumMember()]
        [OptionSetMetadata("Canvas App", Index=1004, Lcid=1033, Description="An application built through a canvas-based editing experience.")]
        CanvasApp = 300,
        
        [EnumMember()]
        [OptionSetMetadata("Callback Registration", Index=979, Lcid=1033, Description="Callback Registration that stores configuration.")]
        CallbackRegistration = 301,
        
        [EnumMember()]
        [OptionSetMetadata("Connector", Index=937, Lcid=1033, Description="Connector Entity to support Solutioning Integration")]
        Connector = 372,
        
        [EnumMember()]
        [OptionSetMetadata("Connection Instance", Index=930, Lcid=1033, Description="")]
        ConnectionInstance = 373,
        
        [EnumMember()]
        [OptionSetMetadata("Environment Variable Definition", Index=683, Lcid=1033, Description="Contains information about the settable variable: its type, default value, and et" +
            "c.")]
        EnvironmentVariableDefinition = 380,
        
        [EnumMember()]
        [OptionSetMetadata("Environment Variable Value", Index=681, Lcid=1033, Description="Holds the value for the associated EnvironmentVariableDefinition entity.")]
        EnvironmentVariableValue = 381,
        
        [EnumMember()]
        [OptionSetMetadata("AI Template", Index=1202, Lcid=1033, Description="")]
        AITemplate = 400,
        
        [EnumMember()]
        [OptionSetMetadata("AI Model", Index=1197, Lcid=1033, Description="")]
        AIModel = 401,
        
        [EnumMember()]
        [OptionSetMetadata("AI Configuration", Index=1255, Lcid=1033, Description="")]
        AIConfiguration = 402,
        
        [EnumMember()]
        [OptionSetMetadata("Dataflow", Index=1064, Lcid=1033, Description="")]
        Dataflow = 418,
        
        [EnumMember()]
        [OptionSetMetadata("Entity Analytics Config", Index=693, Lcid=1033, Description="This entity contains information about which entities are enabled for Azure Data " +
            "Lake Services integration")]
        EntityAnalyticsConfig = 430,
        
        [EnumMember()]
        [OptionSetMetadata("Image Attribute Configuration", Index=877, Lcid=1033, Description="Store configuration for each image attribute")]
        ImageAttributeConfiguration = 431,
        
        [EnumMember()]
        [OptionSetMetadata("Entity Image Configuration", Index=680, Lcid=1033, Description="Store image configuration for each entity")]
        EntityImageConfiguration = 432,
        
        [EnumMember()]
        [OptionSetMetadata("New Process", Index=588, Lcid=1033, Description="New Process Business Process Flow")]
        NewProcess = 950,
        
        [EnumMember()]
        [OptionSetMetadata("Translation Process", Index=441, Lcid=1033, Description="Translation Process Business Process Flow")]
        TranslationProcess = 951,
        
        [EnumMember()]
        [OptionSetMetadata("Phone To Case Process", Index=514, Lcid=1033, Description="Phone To Case Process Business Process Flow")]
        PhoneToCaseProcess = 952,
        
        [EnumMember()]
        [OptionSetMetadata("Opportunity Sales Process", Index=579, Lcid=1033, Description="Opportunity Sales Process Business Process Flow")]
        OpportunitySalesProcess = 953,
        
        [EnumMember()]
        [OptionSetMetadata("Lead To Opportunity Sales Process", Index=769, Lcid=1033, Description="Lead To Opportunity Sales Process Business Process Flow")]
        LeadToOpportunitySalesProcess = 954,
        
        [EnumMember()]
        [OptionSetMetadata("Expired Process", Index=708, Lcid=1033, Description="Expired Process Business Process Flow")]
        ExpiredProcess = 955,
        
        [EnumMember()]
        [OptionSetMetadata("Attachment", Index=903, Lcid=1033, Description="MIME attachment for an activity.")]
        Attachment_2 = 1001,
        
        [EnumMember()]
        [OptionSetMetadata("Attachment", Index=881, Lcid=1033, Description="Attachment for an email activity.")]
        Attachment = 1002,
        
        [EnumMember()]
        [OptionSetMetadata("Internal Address", Index=824, Lcid=1033, Description="Storage of addresses for a user, business unit, or site.")]
        InternalAddress = 1003,
        
        [EnumMember()]
        [OptionSetMetadata("Competitor Address", Index=950, Lcid=1033, Description="Additional addresses for a competitor. The first two addresses are stored in the " +
            "competitor object.")]
        CompetitorAddress = 1004,
        
        [EnumMember()]
        [OptionSetMetadata("Competitor Product", Index=948, Lcid=1033, Description="Association between a competitor and a product offered by the competitor.")]
        CompetitorProduct = 1006,
        
        [EnumMember()]
        [OptionSetMetadata("Image Descriptor", Index=838, Lcid=1033, Description="For internal use only.")]
        ImageDescriptor = 1007,
        
        [EnumMember()]
        [OptionSetMetadata("Contract", Index=963, Lcid=1033, Description="Agreement to provide customer service during a specified amount of time or number" +
            " of cases.")]
        Contract = 1010,
        
        [EnumMember()]
        [OptionSetMetadata("Contract Line", Index=970, Lcid=1033, Description="Line item in a contract that specifies the type of service a customer is entitled" +
            " to.")]
        ContractLine = 1011,
        
        [EnumMember()]
        [OptionSetMetadata("Discount", Index=726, Lcid=1033, Description="Price reduction made from the list price of a product or service based on the qua" +
            "ntity purchased.")]
        Discount = 1013,
        
        [EnumMember()]
        [OptionSetMetadata("Article Template", Index=774, Lcid=1033, Description="Template for a knowledge base article that contains the standard attributes of an" +
            " article.")]
        ArticleTemplate = 1016,
        
        [EnumMember()]
        [OptionSetMetadata("Lead Address", Index=763, Lcid=1033, Description="Address information for a lead.")]
        LeadAddress = 1017,
        
        [EnumMember()]
        [OptionSetMetadata("Organization", Index=576, Lcid=1033, Description="Top level of the Microsoft Dynamics 365 business hierarchy. The organization can " +
            "be a specific business, holding company, or corporation.")]
        Organization = 1019,
        
        [EnumMember()]
        [OptionSetMetadata("Organization UI", Index=525, Lcid=1033, Description="Entity customizations including form layout and icons. Includes current and past " +
            "versions.")]
        OrganizationUI = 1021,
        
        [EnumMember()]
        [OptionSetMetadata("Price List", Index=654, Lcid=1033, Description="Entity that defines pricing levels.")]
        PriceList = 1022,
        
        [EnumMember()]
        [OptionSetMetadata("Privilege", Index=644, Lcid=1033, Description="Permission to perform an action in Microsoft CRM. The platform checks for the pri" +
            "vilege and rejects the attempt if the user does not hold the privilege.")]
        Privilege = 1023,
        
        [EnumMember()]
        [OptionSetMetadata("Product", Index=640, Lcid=1033, Description="Information about products and their pricing information.")]
        Product = 1024,
        
        [EnumMember()]
        [OptionSetMetadata("Product Association", Index=669, Lcid=1033, Description="Instance of a product added to a bundle or kit.")]
        ProductAssociation = 1025,
        
        [EnumMember()]
        [OptionSetMetadata("Price List Item", Index=670, Lcid=1033, Description="Information about how to price a product in the specified price level, including " +
            "pricing method, rounding option, and discount type based on a specified product " +
            "unit.")]
        PriceListItem = 1026,
        
        [EnumMember()]
        [OptionSetMetadata("Product Relationship", Index=666, Lcid=1033, Description="Information about the selling relationship between two products, including the re" +
            "lationship type, such as up-sell, cross-sell, substitute, or accessory.")]
        ProductRelationship = 1028,
        
        [EnumMember()]
        [OptionSetMetadata("System Form", Index=466, Lcid=1033, Description="Organization-owned entity customizations including form layout and dashboards.")]
        SystemForm = 1030,
        
        [EnumMember()]
        [OptionSetMetadata("User Dashboard", Index=431, Lcid=1033, Description="User-owned dashboards.")]
        UserDashboard = 1031,
        
        [EnumMember()]
        [OptionSetMetadata("Security Role", Index=622, Lcid=1033, Description="Grouping of security privileges. Users are assigned roles that authorize their ac" +
            "cess to the Microsoft CRM system.")]
        SecurityRole = 1036,
        
        [EnumMember()]
        [OptionSetMetadata("Role Template", Index=618, Lcid=1033, Description="Template for a role. Defines initial attributes that will be used when creating a" +
            " new role.")]
        RoleTemplate = 1037,
        
        [EnumMember()]
        [OptionSetMetadata("Sales Literature", Index=399, Lcid=1033, Description="Storage of sales literature, which may contain one or more documents.")]
        SalesLiterature = 1038,
        
        [EnumMember()]
        [OptionSetMetadata("View", Index=383, Lcid=1033, Description="Saved query against the database.")]
        View = 1039,
        
        [EnumMember()]
        [OptionSetMetadata("String Map", Index=359, Lcid=1033, Description="Mapping between strings.")]
        StringMap = 1043,
        
        [EnumMember()]
        [OptionSetMetadata("Property", Index=749, Lcid=1033, Description="Information about a product property.")]
        Property = 1048,
        
        [EnumMember()]
        [OptionSetMetadata("Property Option Set Item", Index=741, Lcid=1033, Description="Item with a name and value in a property option set type.")]
        PropertyOptionSetItem = 1049,
        
        [EnumMember()]
        [OptionSetMetadata("Unit", Index=433, Lcid=1033, Description="Unit of measure.")]
        Unit = 1055,
        
        [EnumMember()]
        [OptionSetMetadata("Unit Group", Index=426, Lcid=1033, Description="Grouping of units.")]
        UnitGroup = 1056,
        
        [EnumMember()]
        [OptionSetMetadata("Sales Attachment", Index=400, Lcid=1033, Description="Item in the sales literature collection.")]
        SalesAttachment = 1070,
        
        [EnumMember()]
        [OptionSetMetadata("Address", Index=957, Lcid=1033, Description="Address and shipping information. Used to store additional addresses for an accou" +
            "nt or contact.")]
        Address = 1071,
        
        [EnumMember()]
        [OptionSetMetadata("Subscription Clients", Index=368, Lcid=1033, Description="For internal use only.")]
        SubscriptionClients = 1072,
        
        [EnumMember()]
        [OptionSetMetadata("Status Map", Index=361, Lcid=1033, Description="Mapping between statuses.")]
        StatusMap = 1075,
        
        [EnumMember()]
        [OptionSetMetadata("Discount List", Index=727, Lcid=1033, Description="Type of discount specified as either a percentage or an amount.")]
        DiscountList = 1080,
        
        [EnumMember()]
        [OptionSetMetadata("Article Comment", Index=776, Lcid=1033, Description="Comment on a knowledge base article.")]
        ArticleComment = 1082,
        
        [EnumMember()]
        [OptionSetMetadata("Opportunity Product", Index=578, Lcid=1033, Description="Association between an opportunity and a product.")]
        OpportunityProduct = 1083,
        
        [EnumMember()]
        [OptionSetMetadata("Quote", Index=659, Lcid=1033, Description="Formal offer for products and/or services, proposed at specific prices and relate" +
            "d payment terms, which is sent to a prospective customer.")]
        Quote = 1084,
        
        [EnumMember()]
        [OptionSetMetadata("Quote Product", Index=655, Lcid=1033, Description="Product line item in a quote. The details include such information as product ID," +
            " description, quantity, and cost.")]
        QuoteProduct = 1085,
        
        [EnumMember()]
        [OptionSetMetadata("User Fiscal Calendar", Index=424, Lcid=1033, Description="Custom fiscal calendar used for tracking sales quotas.")]
        UserFiscalCalendar = 1086,
        
        [EnumMember()]
        [OptionSetMetadata("Order", Index=398, Lcid=1033, Description="Quote that has been accepted.")]
        Order = 1088,
        
        [EnumMember()]
        [OptionSetMetadata("Order Product", Index=396, Lcid=1033, Description="Line item in a sales order.")]
        OrderProduct = 1089,
        
        [EnumMember()]
        [OptionSetMetadata("Invoice", Index=831, Lcid=1033, Description="Order that has been billed.")]
        Invoice_2 = 1090,
        
        [EnumMember()]
        [OptionSetMetadata("Invoice Product", Index=829, Lcid=1033, Description="Line item in an invoice containing detailed billing information for a product.")]
        InvoiceProduct = 1091,
        
        [EnumMember()]
        [OptionSetMetadata("Authorization Server", Index=882, Lcid=1033, Description="Authorization servers that trust this organization")]
        AuthorizationServer = 1094,
        
        [EnumMember()]
        [OptionSetMetadata("Partner Application", Index=507, Lcid=1033, Description="Partner applications registered for this organization")]
        PartnerApplication = 1095,
        
        [EnumMember()]
        [OptionSetMetadata("System Chart", Index=384, Lcid=1033, Description="System chart attached to an entity.")]
        SystemChart = 1111,
        
        [EnumMember()]
        [OptionSetMetadata("User Chart", Index=429, Lcid=1033, Description="Chart attached to an entity.")]
        UserChart = 1112,
        
        [EnumMember()]
        [OptionSetMetadata("Ribbon Tab To Command Mapping", Index=621, Lcid=1033, Description="A mapping between Tab Ids, and the Commands within those tabs.")]
        RibbonTabToCommandMapping = 1113,
        
        [EnumMember()]
        [OptionSetMetadata("Ribbon Context Group", Index=616, Lcid=1033, Description="Groupings of contextual tabs.")]
        RibbonContextGroup = 1115,
        
        [EnumMember()]
        [OptionSetMetadata("Ribbon Command", Index=623, Lcid=1033, Description="Ribbon Commands - the command definition, rules, etc.")]
        RibbonCommand = 1116,
        
        [EnumMember()]
        [OptionSetMetadata("Ribbon Rule", Index=614, Lcid=1033, Description="Ribbon rule definitions, used to enable and disable, show and hide ribbon element" +
            "s.")]
        RibbonRule = 1117,
        
        [EnumMember()]
        [OptionSetMetadata("Application Ribbons", Index=617, Lcid=1033, Description="Ribbon customizations for the application ribbon and entity ribbon templates.")]
        ApplicationRibbons = 1120,
        
        [EnumMember()]
        [OptionSetMetadata("Ribbon Difference", Index=615, Lcid=1033, Description="All layout customizations to be applied to the ribbons, which contain only the di" +
            "fferences from the base ribbon.")]
        RibbonDifference = 1130,
        
        [EnumMember()]
        [OptionSetMetadata("Replication Backlog", Index=609, Lcid=1033, Description="Entity to hold replication backlog tasks. For internal use only.")]
        ReplicationBacklog = 1140,
        
        [EnumMember()]
        [OptionSetMetadata("Characteristic", Index=998, Lcid=1033, Description="Skills, education and certifications of resources.")]
        Characteristic = 1141,
        
        [EnumMember()]
        [OptionSetMetadata("Rating Value", Index=663, Lcid=1033, Description="A unique value associated with a rating model that allows providing a user friend" +
            "ly rating value.")]
        RatingValue = 1142,
        
        [EnumMember()]
        [OptionSetMetadata("Rating Model", Index=656, Lcid=1033, Description="Represents a model to evaluate skills or other related entities.")]
        RatingModel = 1144,
        
        [EnumMember()]
        [OptionSetMetadata("Bookable Resource Booking", Index=866, Lcid=1033, Description="Represents the line details of a resource booking.")]
        BookableResourceBooking = 1145,
        
        [EnumMember()]
        [OptionSetMetadata("Bookable Resource Booking Header", Index=874, Lcid=1033, Description="Reservation entity representing the summary of the associated resource bookings.")]
        BookableResourceBookingHeader = 1146,
        
        [EnumMember()]
        [OptionSetMetadata("Bookable Resource Category", Index=875, Lcid=1033, Description="Categorize resources that have capacity into categories such as roles.")]
        BookableResourceCategory = 1147,
        
        [EnumMember()]
        [OptionSetMetadata("Bookable Resource Characteristic", Index=871, Lcid=1033, Description="Associates resources with their characteristics and specifies the proficiency lev" +
            "el of a resource for that characteristic.")]
        BookableResourceCharacteristic = 1148,
        
        [EnumMember()]
        [OptionSetMetadata("Bookable Resource Category Assn", Index=873, Lcid=1033, Description="Association entity to model the categorization of resources.")]
        BookableResourceCategoryAssn = 1149,
        
        [EnumMember()]
        [OptionSetMetadata("Bookable Resource", Index=868, Lcid=1033, Description="Resource that has capacity which can be allocated to work.")]
        BookableResource = 1150,
        
        [EnumMember()]
        [OptionSetMetadata("Bookable Resource Group", Index=872, Lcid=1033, Description="Associates resources with resource groups that they are a member of.")]
        BookableResourceGroup = 1151,
        
        [EnumMember()]
        [OptionSetMetadata("Booking Status", Index=929, Lcid=1033, Description="Allows creation of multiple sub statuses mapped to a booking status option.")]
        BookingStatus = 1152,
        
        [EnumMember()]
        [OptionSetMetadata("Document Suggestions", Index=662, Lcid=1033, Description="Document Suggestions")]
        DocumentSuggestions = 1189,
        
        [EnumMember()]
        [OptionSetMetadata("SuggestionCardTemplate", Index=476, Lcid=1033, Description="Templates for Suggestion Card in Grid")]
        SuggestionCardTemplate = 1190,
        
        [EnumMember()]
        [OptionSetMetadata("Field Security Profile", Index=698, Lcid=1033, Description="Profile which defines access level for secured attributes")]
        FieldSecurityProfile = 1200,
        
        [EnumMember()]
        [OptionSetMetadata("Field Permission", Index=697, Lcid=1033, Description="Group of privileges used to categorize users to provide appropriate access to sec" +
            "ured columns.")]
        FieldPermission = 1201,
        
        [EnumMember()]
        [OptionSetMetadata("Team Profiles", Index=498, Lcid=1033, Description="Team Profiles")]
        TeamProfiles = 1203,
        
        [EnumMember()]
        [OptionSetMetadata("Application", Index=857, Lcid=1033, Description="Application")]
        Application = 1204,
        
        [EnumMember()]
        [OptionSetMetadata("Channel Property Group", Index=1000, Lcid=1033, Description="Group or collection of channel properties provided by the external channel for a " +
            "Microsoft Dynamics 365 activity.")]
        ChannelPropertyGroup = 1234,
        
        [EnumMember()]
        [OptionSetMetadata("Property Association", Index=742, Lcid=1033, Description="Association of a property definition with another entity in the system.")]
        PropertyAssociation = 1235,
        
        [EnumMember()]
        [OptionSetMetadata("Channel Property", Index=1002, Lcid=1033, Description="Instance of a channel property containing its name and corresponding data type.")]
        ChannelProperty = 1236,
        
        [EnumMember()]
        [OptionSetMetadata("SocialInsightsConfiguration", Index=339, Lcid=1033, Description="Configuration for the social insights.")]
        SocialInsightsConfiguration = 1300,
        
        [EnumMember()]
        [OptionSetMetadata("Saved Organization Insights Configuration", Index=390, Lcid=1033, Description="Saved configuration for the organization insights")]
        SavedOrganizationInsightsConfiguration = 1309,
        
        [EnumMember()]
        [OptionSetMetadata("Property Instance", Index=743, Lcid=1033, Description="Instance of a property with its value.")]
        PropertyInstance = 1333,
        
        [EnumMember()]
        [OptionSetMetadata("Sync Attribute Mapping Profile", Index=469, Lcid=1033, Description="Profile which defines sync attribute mapping")]
        SyncAttributeMappingProfile = 1400,
        
        [EnumMember()]
        [OptionSetMetadata("Sync Attribute Mapping", Index=468, Lcid=1033, Description="Group of Sync-Attribute Mappings used to provide Attribute mappings during sync f" +
            "or a particular user")]
        SyncAttributeMapping = 1401,
        
        [EnumMember()]
        [OptionSetMetadata("Team Sync-Attribute Mapping Profiles", Index=505, Lcid=1033, Description="Team Sync-Attribute Mapping Profiles")]
        TeamSyncAttributeMappingProfiles = 1403,
        
        [EnumMember()]
        [OptionSetMetadata("Principal Sync Attribute Map", Index=651, Lcid=1033, Description="Maps security principals (users and teams) to sync attribute mappings.")]
        PrincipalSyncAttributeMap = 1404,
        
        [EnumMember()]
        [OptionSetMetadata("Annual Fiscal Calendar", Index=917, Lcid=1033, Description="Year long fiscal calendar of an organization. A span of time during which the fin" +
            "ancial activities of an organization are calculated.")]
        AnnualFiscalCalendar = 2000,
        
        [EnumMember()]
        [OptionSetMetadata("Semiannual Fiscal Calendar", Index=419, Lcid=1033, Description="Calendar representing the semi-annual span of time during which the financial act" +
            "ivities of an organization are calculated.")]
        SemiannualFiscalCalendar = 2001,
        
        [EnumMember()]
        [OptionSetMetadata("Quarterly Fiscal Calendar", Index=673, Lcid=1033, Description="Quarterly fiscal calendar of an organization. A span of time during which the fin" +
            "ancial activities of an organization are calculated.")]
        QuarterlyFiscalCalendar = 2002,
        
        [EnumMember()]
        [OptionSetMetadata("Monthly Fiscal Calendar", Index=1245, Lcid=1033, Description="Monthly fiscal calendar of an organization. A span of time during which the finan" +
            "cial activities of an organization are calculated.")]
        MonthlyFiscalCalendar = 2003,
        
        [EnumMember()]
        [OptionSetMetadata("Fixed Monthly Fiscal Calendar", Index=704, Lcid=1033, Description="Fixed monthly fiscal calendar of an organization. A span of time during which the" +
            " financial activities of an organization are calculated.")]
        FixedMonthlyFiscalCalendar = 2004,
        
        [EnumMember()]
        [OptionSetMetadata("Email Template", Index=504, Lcid=1033, Description="Template for an email message that contains the standard attributes of an email m" +
            "essage.")]
        EmailTemplate = 2010,
        
        [EnumMember()]
        [OptionSetMetadata("Contract Template", Index=971, Lcid=1033, Description="Template for a contract containing the standard attributes of a contract.")]
        ContractTemplate = 2011,
        
        [EnumMember()]
        [OptionSetMetadata("Unresolved Address", Index=439, Lcid=1033, Description="For internal use only.")]
        UnresolvedAddress = 2012,
        
        [EnumMember()]
        [OptionSetMetadata("Territory", Index=502, Lcid=1033, Description="Territory represents sales regions.")]
        Territory = 2013,
        
        [EnumMember()]
        [OptionSetMetadata("Theme", Index=496, Lcid=1033, Description="Information that\'s used to set custom visual theme options for client application" +
            "s.")]
        Theme = 2015,
        
        [EnumMember()]
        [OptionSetMetadata("User Mapping", Index=432, Lcid=1033, Description="User Mapping")]
        UserMapping = 2016,
        
        [EnumMember()]
        [OptionSetMetadata("Queue", Index=671, Lcid=1033, Description="A list of records that require action, such as accounts, activities, and cases.")]
        Queue = 2020,
        
        [EnumMember()]
        [OptionSetMetadata("QueueItemCount", Index=665, Lcid=1033, Description="For internal use only.")]
        QueueItemCount = 2023,
        
        [EnumMember()]
        [OptionSetMetadata("QueueMemberCount", Index=658, Lcid=1033, Description="For internal use only.")]
        QueueMemberCount = 2024,
        
        [EnumMember()]
        [OptionSetMetadata("License", Index=768, Lcid=1033, Description="Stores information about a Microsoft CRM license.")]
        License = 2027,
        
        [EnumMember()]
        [OptionSetMetadata("Queue Item", Index=672, Lcid=1033, Description="A specific item in a queue, such as a case record or an activity record.")]
        QueueItem = 2029,
        
        [EnumMember()]
        [OptionSetMetadata("User Entity UI Settings", Index=423, Lcid=1033, Description="Stores user settings for entity views.")]
        UserEntityUISettings = 2500,
        
        [EnumMember()]
        [OptionSetMetadata("User Entity Instance Data", Index=425, Lcid=1033, Description="Per User item instance data")]
        UserEntityInstanceData = 2501,
        
        [EnumMember()]
        [OptionSetMetadata("Integration Status", Index=828, Lcid=1033, Description="Contains integration status information.")]
        IntegrationStatus = 3000,
        
        [EnumMember()]
        [OptionSetMetadata("Channel Access Profile", Index=993, Lcid=1033, Description="Information about permissions needed to access Dynamics 365 through external chan" +
            "nels.For internal use only")]
        ChannelAccessProfile = 3005,
        
        [EnumMember()]
        [OptionSetMetadata("External Party", Index=717, Lcid=1033, Description="Information about external parties that need to access Dynamics 365 from external" +
            " channels.For internal use only")]
        ExternalParty = 3008,
        
        [EnumMember()]
        [OptionSetMetadata("Connection Role", Index=938, Lcid=1033, Description="Role describing a relationship between a two records.")]
        ConnectionRole = 3231,
        
        [EnumMember()]
        [OptionSetMetadata("Connection Role Object Type Code", Index=939, Lcid=1033, Description="Specifies the entity type that can play specific role in a connection.")]
        ConnectionRoleObjectTypeCode = 3233,
        
        [EnumMember()]
        [OptionSetMetadata("Connection", Index=932, Lcid=1033, Description="Relationship between two entities.")]
        Connection = 3234,
        
        [EnumMember()]
        [OptionSetMetadata("Facility/Equipment", Index=682, Lcid=1033, Description="Resource that can be scheduled.")]
        FacilityEquipment = 4000,
        
        [EnumMember()]
        [OptionSetMetadata("Service", Index=417, Lcid=1033, Description="Activity that represents work done to satisfy a customer\'s need.")]
        Service = 4001,
        
        [EnumMember()]
        [OptionSetMetadata("Resource", Index=600, Lcid=1033, Description="User or facility/equipment that can be scheduled for a service.")]
        Resource = 4002,
        
        [EnumMember()]
        [OptionSetMetadata("Calendar", Index=980, Lcid=1033, Description="Calendar used by the scheduling system to define when an appointment or activity " +
            "is to occur.")]
        Calendar = 4003,
        
        [EnumMember()]
        [OptionSetMetadata("Calendar Rule", Index=981, Lcid=1033, Description="Defines free/busy times for a service and for resources or resource groups, such " +
            "as working, non-working, vacation, and blocked.")]
        CalendarRule = 4004,
        
        [EnumMember()]
        [OptionSetMetadata("Scheduling Group", Index=601, Lcid=1033, Description="Resource group or team whose members can be scheduled for a service.")]
        SchedulingGroup = 4005,
        
        [EnumMember()]
        [OptionSetMetadata("Resource Specification", Index=598, Lcid=1033, Description="Selection rule that allows the scheduling engine to select a number of resources " +
            "from a pool of resources. The rules can be associated with a service.")]
        ResourceSpecification = 4006,
        
        [EnumMember()]
        [OptionSetMetadata("Resource Group", Index=935, Lcid=1033, Description="Group or collection of people, equipment, and/or facilities that can be scheduled" +
            ".")]
        ResourceGroup = 4007,
        
        [EnumMember()]
        [OptionSetMetadata("Site", Index=355, Lcid=1033, Description="Location or branch office where an organization does business. An organization ca" +
            "n have multiple sites.")]
        Site = 4009,
        
        [EnumMember()]
        [OptionSetMetadata("Resource Expansion", Index=597, Lcid=1033, Description="Resource Expansions.")]
        ResourceExpansion = 4010,
        
        [EnumMember()]
        [OptionSetMetadata("Inter Process Lock", Index=832, Lcid=1033, Description="Inter Process Locks.")]
        InterProcessLock = 4011,
        
        [EnumMember()]
        [OptionSetMetadata("Email Hash", Index=747, Lcid=1033, Description="Email activity hashes used for correlation purposes.")]
        EmailHash = 4023,
        
        [EnumMember()]
        [OptionSetMetadata("Display String Map", Index=723, Lcid=1033, Description="Maps customized display strings to entities.")]
        DisplayStringMap = 4101,
        
        [EnumMember()]
        [OptionSetMetadata("Display String", Index=725, Lcid=1033, Description="Customized messages for an entity that has been renamed.")]
        DisplayString = 4102,
        
        [EnumMember()]
        [OptionSetMetadata("Notification", Index=587, Lcid=1033, Description="For internal use only.")]
        Notification = 4110,
        
        [EnumMember()]
        [OptionSetMetadata("Exchange Sync Id Mapping", Index=712, Lcid=1033, Description="The mapping used to keep track of the IDs for items synced between CRM and Exchan" +
            "ge.")]
        ExchangeSyncIdMapping = 4120,
        
        [EnumMember()]
        [OptionSetMetadata("Activity", Index=890, Lcid=1033, Description="Task performed, or to be performed, by a user. An activity is any action for whic" +
            "h an entry can be made on a calendar.")]
        Activity = 4200,
        
        [EnumMember()]
        [OptionSetMetadata("Appointment", Index=853, Lcid=1033, Description="Commitment representing a time interval with start/end times and duration.")]
        Appointment = 4201,
        
        [EnumMember()]
        [OptionSetMetadata("Email", Index=740, Lcid=1033, Description="Activity that is delivered using email protocols.")]
        Email = 4202,
        
        [EnumMember()]
        [OptionSetMetadata("Fax", Index=714, Lcid=1033, Description="Activity that tracks call outcome and number of pages for a fax and optionally st" +
            "ores an electronic copy of the document.")]
        Fax = 4204,
        
        [EnumMember()]
        [OptionSetMetadata("Case Resolution", Index=834, Lcid=1033, Description="Special type of activity that includes description of the resolution, billing sta" +
            "tus, and the duration of the case.")]
        CaseResolution = 4206,
        
        [EnumMember()]
        [OptionSetMetadata("Letter", Index=770, Lcid=1033, Description="Activity that tracks the delivery of a letter. The activity can contain the elect" +
            "ronic copy of the letter.")]
        Letter = 4207,
        
        [EnumMember()]
        [OptionSetMetadata("Opportunity Close", Index=570, Lcid=1033, Description="Activity that is created automatically when an opportunity is closed, containing " +
            "information such as the description of the closing and actual revenue.")]
        OpportunityClose = 4208,
        
        [EnumMember()]
        [OptionSetMetadata("Order Close", Index=575, Lcid=1033, Description="Activity generated automatically when an order is closed.")]
        OrderClose = 4209,
        
        [EnumMember()]
        [OptionSetMetadata("Phone Call", Index=516, Lcid=1033, Description="Activity to track a telephone call.")]
        PhoneCall = 4210,
        
        [EnumMember()]
        [OptionSetMetadata("Quote Close", Index=657, Lcid=1033, Description="Activity generated when a quote is closed.")]
        QuoteClose = 4211,
        
        [EnumMember()]
        [OptionSetMetadata("Task", Index=500, Lcid=1033, Description="Generic activity representing work needed to be done.")]
        Task = 4212,
        
        [EnumMember()]
        [OptionSetMetadata("Service Activity", Index=418, Lcid=1033, Description="Activity offered by the organization to satisfy its customer\'s needs. Each servic" +
            "e activity includes date, time, duration, and required resources.")]
        ServiceActivity = 4214,
        
        [EnumMember()]
        [OptionSetMetadata("Commitment", Index=942, Lcid=1033, Description="For internal use only.")]
        Commitment = 4215,
        
        [EnumMember()]
        [OptionSetMetadata("Social Activity", Index=338, Lcid=1033, Description="For internal use only.")]
        SocialActivity = 4216,
        
        [EnumMember()]
        [OptionSetMetadata("UntrackedEmail", Index=440, Lcid=1033, Description="Activity that is delivered using UntrackedEmail protocols.")]
        UntrackedEmail = 4220,
        
        [EnumMember()]
        [OptionSetMetadata("Saved View", Index=428, Lcid=1033, Description="Saved database query that is owned by a user.")]
        SavedView = 4230,
        
        [EnumMember()]
        [OptionSetMetadata("Metadata Difference", Index=782, Lcid=1033, Description="Metadata Difference")]
        MetadataDifference = 4231,
        
        [EnumMember()]
        [OptionSetMetadata("Business Data Localized Label", Index=975, Lcid=1033, Description="Business Data Localized Label")]
        BusinessDataLocalizedLabel = 4232,
        
        [EnumMember()]
        [OptionSetMetadata("Recurrence Rule", Index=605, Lcid=1033, Description="Recurrence Rule represents the pattern of incidence of recurring entities.")]
        RecurrenceRule = 4250,
        
        [EnumMember()]
        [OptionSetMetadata("Recurring Appointment", Index=603, Lcid=1033, Description="The Master appointment of a recurring appointment series.")]
        RecurringAppointment = 4251,
        
        [EnumMember()]
        [OptionSetMetadata("Email Search", Index=748, Lcid=1033, Description="Email Address Search Table.")]
        EmailSearch = 4299,
        
        [EnumMember()]
        [OptionSetMetadata("Marketing List", Index=766, Lcid=1033, Description="Group of existing or potential customers created for a marketing campaign or othe" +
            "r sales purposes.")]
        MarketingList = 4300,
        
        [EnumMember()]
        [OptionSetMetadata("Marketing List Member", Index=767, Lcid=1033, Description="Item in a marketing list.")]
        MarketingListMember = 4301,
        
        [EnumMember()]
        [OptionSetMetadata("Campaign", Index=977, Lcid=1033, Description="Container for campaign activities and responses, sales literature, products, and " +
            "lists to create, plan, execute, and track the results of a specific marketing ca" +
            "mpaign through its life.")]
        Campaign = 4400,
        
        [EnumMember()]
        [OptionSetMetadata("Campaign Response", Index=1006, Lcid=1033, Description="Response from an existing or a potential new customer for a campaign.")]
        CampaignResponse = 4401,
        
        [EnumMember()]
        [OptionSetMetadata("Campaign Activity", Index=978, Lcid=1033, Description="Task performed, or to be performed, by a user for planning or running a campaign." +
            "")]
        CampaignActivity = 4402,
        
        [EnumMember()]
        [OptionSetMetadata("Campaign Item", Index=1008, Lcid=1033, Description="Work item in a campaign, a list or sales literature.")]
        CampaignItem = 4403,
        
        [EnumMember()]
        [OptionSetMetadata("Campaign Activity Item", Index=1007, Lcid=1033, Description="Work item of a campaign activity, such as a list or sales literature.")]
        CampaignActivityItem = 4404,
        
        [EnumMember()]
        [OptionSetMetadata("Bulk Operation Log", Index=982, Lcid=1033, Description="Log used to track bulk operation execution, successes, and failures.")]
        BulkOperationLog = 4405,
        
        [EnumMember()]
        [OptionSetMetadata("Quick Campaign", Index=989, Lcid=1033, Description="System operation used to perform lengthy and asynchronous operations on large dat" +
            "a sets, such as distributing a campaign activity or quick campaign.")]
        QuickCampaign = 4406,
        
        [EnumMember()]
        [OptionSetMetadata("Data Import", Index=839, Lcid=1033, Description="Status and ownership information for an import job.")]
        DataImport = 4410,
        
        [EnumMember()]
        [OptionSetMetadata("Data Map", Index=842, Lcid=1033, Description="Data map used in import.")]
        DataMap = 4411,
        
        [EnumMember()]
        [OptionSetMetadata("Import Source File", Index=836, Lcid=1033, Description="File name of file used for import.")]
        ImportSourceFile = 4412,
        
        [EnumMember()]
        [OptionSetMetadata("Import Data", Index=837, Lcid=1033, Description="Unprocessed data from imported files.")]
        ImportData = 4413,
        
        [EnumMember()]
        [OptionSetMetadata("Duplicate Detection Rule", Index=752, Lcid=1033, Description="Rule used to identify potential duplicates.")]
        DuplicateDetectionRule = 4414,
        
        [EnumMember()]
        [OptionSetMetadata("Duplicate Record", Index=754, Lcid=1033, Description="Potential duplicate record.")]
        DuplicateRecord = 4415,
        
        [EnumMember()]
        [OptionSetMetadata("Duplicate Rule Condition", Index=750, Lcid=1033, Description="Condition of a duplicate detection rule.")]
        DuplicateRuleCondition = 4416,
        
        [EnumMember()]
        [OptionSetMetadata("Column Mapping", Index=943, Lcid=1033, Description="Mapping for columns in a data map.")]
        ColumnMapping = 4417,
        
        [EnumMember()]
        [OptionSetMetadata("List Value Mapping", Index=512, Lcid=1033, Description="In a data map, maps list values from the source file to Microsoft Dynamics 365.")]
        ListValueMapping = 4418,
        
        [EnumMember()]
        [OptionSetMetadata("Lookup Mapping", Index=795, Lcid=1033, Description="In a data map, maps a lookup attribute in a source file to Microsoft Dynamics 365" +
            ".")]
        LookupMapping = 4419,
        
        [EnumMember()]
        [OptionSetMetadata("Owner Mapping", Index=510, Lcid=1033, Description="In a data map, maps ownership data from the source file to Microsoft Dynamics 365" +
            ".")]
        OwnerMapping = 4420,
        
        [EnumMember()]
        [OptionSetMetadata("Bookable Resource Booking to Exchange Id Mapping", Index=867, Lcid=1033, Description="The mapping used to keep track of the IDs for items synced between Dynamics 365 B" +
            "ookable Resource Booking and Exchange.")]
        BookableResourceBookingtoExchangeIdMapping = 4421,
        
        [EnumMember()]
        [OptionSetMetadata("Import Log", Index=844, Lcid=1033, Description="Failure reason and other detailed information for a record that failed to import." +
            "")]
        ImportLog = 4423,
        
        [EnumMember()]
        [OptionSetMetadata("Bulk Delete Operation", Index=988, Lcid=1033, Description="User-submitted bulk deletion job.")]
        BulkDeleteOperation = 4424,
        
        [EnumMember()]
        [OptionSetMetadata("Bulk Delete Failure", Index=990, Lcid=1033, Description="Record that was not deleted during a bulk deletion job.")]
        BulkDeleteFailure = 4425,
        
        [EnumMember()]
        [OptionSetMetadata("Transformation Mapping", Index=442, Lcid=1033, Description="In a data map, maps the transformation of source attributes to Microsoft Dynamics" +
            " 365 attributes.")]
        TransformationMapping = 4426,
        
        [EnumMember()]
        [OptionSetMetadata("Transformation Parameter Mapping", Index=443, Lcid=1033, Description="In a data map, defines parameters for a transformation.")]
        TransformationParameterMapping = 4427,
        
        [EnumMember()]
        [OptionSetMetadata("Import Entity Mapping", Index=835, Lcid=1033, Description="Mapping for entities in a data map.")]
        ImportEntityMapping = 4428,
        
        [EnumMember()]
        [OptionSetMetadata("Data Performance Dashboard", Index=738, Lcid=1033, Description="Data Performance Dashboard.")]
        DataPerformanceDashboard = 4450,
        
        [EnumMember()]
        [OptionSetMetadata("Office Document", Index=580, Lcid=1033, Description="Used to store Office Documents in database in binary format.")]
        OfficeDocument = 4490,
        
        [EnumMember()]
        [OptionSetMetadata("Relationship Role", Index=610, Lcid=1033, Description="Relationship between an account or contact and an opportunity.")]
        RelationshipRole = 4500,
        
        [EnumMember()]
        [OptionSetMetadata("Relationship Role Map", Index=608, Lcid=1033, Description="Mapping of the primary associated objects between which the relationship role is " +
            "valid.")]
        RelationshipRoleMap = 4501,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Relationship", Index=733, Lcid=1033, Description="Relationship between a customer and a partner in which either can be an account o" +
            "r contact.")]
        CustomerRelationship = 4502,
        
        [EnumMember()]
        [OptionSetMetadata("Opportunity Relationship", Index=732, Lcid=1033, Description="Relationship between an account or contact and an opportunity.")]
        OpportunityRelationship = 4503,
        
        [EnumMember()]
        [OptionSetMetadata("Entitlement Template Product", Index=694, Lcid=1033)]
        EntitlementTemplateProduct = 4545,
        
        [EnumMember()]
        [OptionSetMetadata("Auditing", Index=884, Lcid=1033, Description="Track changes to records for analysis, record keeping, and compliance.")]
        Auditing = 4567,
        
        [EnumMember()]
        [OptionSetMetadata("Ribbon Client Metadata.", Index=630, Lcid=1033, Description="A ribbon client metadata.")]
        RibbonClientMetadata = 4579,
        
        [EnumMember()]
        [OptionSetMetadata("Entity Map", Index=677, Lcid=1033, Description="Represents a mapping between two related entities so that data from one record ca" +
            "n be copied into the form of a new related record.")]
        EntityMap = 4600,
        
        [EnumMember()]
        [OptionSetMetadata("Attribute Map", Index=878, Lcid=1033, Description="Represents a mapping between attributes where the attribute values should be copi" +
            "ed from a record into the form of a new related record.")]
        AttributeMap = 4601,
        
        [EnumMember()]
        [OptionSetMetadata("Plug-in Type", Index=547, Lcid=1033, Description="Type that inherits from the IPlugin interface and is contained within a plug-in a" +
            "ssembly.")]
        PluginType = 4602,
        
        [EnumMember()]
        [OptionSetMetadata("Plug-in Type Statistic", Index=548, Lcid=1033, Description="Plug-in type statistic.")]
        PluginTypeStatistic = 4603,
        
        [EnumMember()]
        [OptionSetMetadata("Plug-in Assembly", Index=541, Lcid=1033, Description="Assembly that contains one or more plug-in types.")]
        PluginAssembly = 4605,
        
        [EnumMember()]
        [OptionSetMetadata("Sdk Message", Index=382, Lcid=1033, Description="Message that is supported by the SDK.")]
        SdkMessage = 4606,
        
        [EnumMember()]
        [OptionSetMetadata("Sdk Message Filter", Index=380, Lcid=1033, Description="Filter that defines which SDK messages are valid for each type of entity.")]
        SdkMessageFilter = 4607,
        
        [EnumMember()]
        [OptionSetMetadata("Sdk Message Processing Step", Index=388, Lcid=1033, Description="Stage in the execution pipeline that a plug-in is to execute.")]
        SdkMessageProcessingStep = 4608,
        
        [EnumMember()]
        [OptionSetMetadata("Sdk Message Request", Index=385, Lcid=1033, Description="For internal use only.")]
        SdkMessageRequest = 4609,
        
        [EnumMember()]
        [OptionSetMetadata("Sdk Message Response", Index=415, Lcid=1033, Description="For internal use only.")]
        SdkMessageResponse = 4610,
        
        [EnumMember()]
        [OptionSetMetadata("Sdk Message Response Field", Index=416, Lcid=1033, Description="For internal use only.")]
        SdkMessageResponseField = 4611,
        
        [EnumMember()]
        [OptionSetMetadata("Sdk Message Pair", Index=381, Lcid=1033, Description="For internal use only.")]
        SdkMessagePair = 4613,
        
        [EnumMember()]
        [OptionSetMetadata("Sdk Message Request Field", Index=386, Lcid=1033, Description="For internal use only.")]
        SdkMessageRequestField = 4614,
        
        [EnumMember()]
        [OptionSetMetadata("Sdk Message Processing Step Image", Index=389, Lcid=1033, Description="Copy of an entity\'s attributes before or after the core system operation.")]
        SdkMessageProcessingStepImage = 4615,
        
        [EnumMember()]
        [OptionSetMetadata("Sdk Message Processing Step Secure Configuration", Index=387, Lcid=1033, Description="Non-public custom configuration that is passed to a plug-in\'s constructor.")]
        SdkMessageProcessingStepSecureConfiguration = 4616,
        
        [EnumMember()]
        [OptionSetMetadata("Service Endpoint", Index=404, Lcid=1033, Description="Service endpoint that can be contacted.")]
        ServiceEndpoint = 4618,
        
        [EnumMember()]
        [OptionSetMetadata("Plug-in Trace Log", Index=540, Lcid=1033, Description="Trace and exception information generated by plug-ins and custom workflow activit" +
            "ies.")]
        PluginTraceLog = 4619,
        
        [EnumMember()]
        [OptionSetMetadata("System Job", Index=880, Lcid=1033, Description="Process whose execution can proceed independently or in the background.")]
        SystemJob = 4700,
        
        [EnumMember()]
        [OptionSetMetadata("Workflow Wait Subscription", Index=444, Lcid=1033, Description="For internal use only.")]
        WorkflowWaitSubscription = 4702,
        
        [EnumMember()]
        [OptionSetMetadata("Process", Index=454, Lcid=1033, Description="Set of logical rules that define the steps necessary to automate a specific busin" +
            "ess process, task, or set of actions to be performed.")]
        Process = 4703,
        
        [EnumMember()]
        [OptionSetMetadata("Process Dependency", Index=448, Lcid=1033, Description="Dependencies for a process.")]
        ProcessDependency = 4704,
        
        [EnumMember()]
        [OptionSetMetadata("ISV Config", Index=830, Lcid=1033, Description="An XML document used to configure client extension controls.")]
        ISVConfig = 4705,
        
        [EnumMember()]
        [OptionSetMetadata("Process Log", Index=446, Lcid=1033, Description="Log used to track process execution.")]
        ProcessLog = 4706,
        
        [EnumMember()]
        [OptionSetMetadata("Application File", Index=864, Lcid=1033, Description="Files used by the application")]
        ApplicationFile = 4707,
        
        [EnumMember()]
        [OptionSetMetadata("Organization Statistic", Index=527, Lcid=1033, Description="Statistics measuring the organization\'s usage of the Microsoft Dynamics 365 syste" +
            "m over the past 24 hours.")]
        OrganizationStatistic = 4708,
        
        [EnumMember()]
        [OptionSetMetadata("Site Map", Index=348, Lcid=1033, Description="XML data used to control the application navigation pane.")]
        SiteMap = 4709,
        
        [EnumMember()]
        [OptionSetMetadata("Process Session", Index=642, Lcid=1033, Description="Information that is generated when a dialog is run. Every time that you run a dia" +
            "log, a dialog session is created.")]
        ProcessSession = 4710,
        
        [EnumMember()]
        [OptionSetMetadata("Expander Event", Index=710, Lcid=1033, Description="For internal use only. An event that will be expanded into jobs whose executions " +
            "can proceed in the background.")]
        ExpanderEvent = 4711,
        
        [EnumMember()]
        [OptionSetMetadata("Process Trigger", Index=639, Lcid=1033, Description="Trigger that invoke a rule.")]
        ProcessTrigger = 4712,
        
        [EnumMember()]
        [OptionSetMetadata("Flow Session", Index=821, Lcid=1033, Description="Entity to store the information that is generated when a Power Automate Desktop f" +
            "low runs.")]
        FlowSession = 4720,
        
        [EnumMember()]
        [OptionSetMetadata("Process Stage", Index=643, Lcid=1033, Description="Stage associated with a process.")]
        ProcessStage = 4724,
        
        [EnumMember()]
        [OptionSetMetadata("Business Process Flow Instance", Index=976, Lcid=1033, Description="Active path associated with every Business Process Flow instance")]
        BusinessProcessFlowInstance = 4725,
        
        [EnumMember()]
        [OptionSetMetadata("Web Wizard", Index=462, Lcid=1033, Description="Definition for a Web-based wizard.")]
        WebWizard = 4800,
        
        [EnumMember()]
        [OptionSetMetadata("Wizard Page", Index=461, Lcid=1033, Description="Page in a Web-based wizard.")]
        WizardPage = 4802,
        
        [EnumMember()]
        [OptionSetMetadata("Web Wizard Access Privilege", Index=460, Lcid=1033, Description="Privilege needed to access a Web-based wizard.")]
        WebWizardAccessPrivilege = 4803,
        
        [EnumMember()]
        [OptionSetMetadata("Time Zone Definition", Index=490, Lcid=1033, Description="Time zone definition, including name and time zone code.")]
        TimeZoneDefinition = 4810,
        
        [EnumMember()]
        [OptionSetMetadata("Time Zone Rule", Index=486, Lcid=1033, Description="Definition for time conversion between local time and Coordinated Universal Time " +
            "(UTC) for a particular time zone at a particular time period.")]
        TimeZoneRule = 4811,
        
        [EnumMember()]
        [OptionSetMetadata("Time Zone Localized Name", Index=488, Lcid=1033, Description="Localized name of the time zone.")]
        TimeZoneLocalizedName = 4812,
        
        [EnumMember()]
        [OptionSetMetadata("Recently Used", Index=664, Lcid=1033, Description="Most recently used data table.")]
        RecentlyUsed = 5000,
        
        [EnumMember()]
        [OptionSetMetadata("NL2SQ Registration Information", Index=586, Lcid=1033, Description="Org registration status, AllowedEntity list, and registration error message.")]
        NL2SQRegistrationInformation = 5004,
        
        [EnumMember()]
        [OptionSetMetadata("Event Expander Breadcrumb", Index=711, Lcid=1033, Description="Table to store breadcrumb records of Event Expander pipeline.")]
        EventExpanderBreadcrumb = 5006,
        
        [EnumMember()]
        [OptionSetMetadata("Entitlement Product", Index=688, Lcid=1033)]
        EntitlementProduct = 6363,
        
        [EnumMember()]
        [OptionSetMetadata("System Application Metadata", Index=465, Lcid=1033, Description="For internal use only.")]
        SystemApplicationMetadata = 7000,
        
        [EnumMember()]
        [OptionSetMetadata("User Application Metadata", Index=427, Lcid=1033, Description="For internal use only.")]
        UserApplicationMetadata = 7001,
        
        [EnumMember()]
        [OptionSetMetadata("Solution", Index=347, Lcid=1033, Description="A solution which contains CRM customizations.")]
        Solution = 7100,
        
        [EnumMember()]
        [OptionSetMetadata("Publisher", Index=674, Lcid=1033, Description="A publisher of a CRM solution.")]
        Publisher = 7101,
        
        [EnumMember()]
        [OptionSetMetadata("Publisher Address", Index=675, Lcid=1033, Description="Address and shipping information. Used to store additional addresses for a publis" +
            "her.")]
        PublisherAddress = 7102,
        
        [EnumMember()]
        [OptionSetMetadata("Solution Component", Index=345, Lcid=1033, Description="A component of a CRM solution.")]
        SolutionComponent = 7103,
        
        [EnumMember()]
        [OptionSetMetadata("Solution Component Definition", Index=374, Lcid=1033, Description="Contains all the information required to process a solution aware entity")]
        SolutionComponentDefinition = 7104,
        
        [EnumMember()]
        [OptionSetMetadata("Dependency", Index=721, Lcid=1033, Description="A component dependency in CRM.")]
        Dependency = 7105,
        
        [EnumMember()]
        [OptionSetMetadata("Dependency Node", Index=720, Lcid=1033, Description="The representation of a component dependency node in CRM.")]
        DependencyNode = 7106,
        
        [EnumMember()]
        [OptionSetMetadata("Invalid Dependency", Index=833, Lcid=1033, Description="An invalid dependency in the CRM system.")]
        InvalidDependency = 7107,
        
        [EnumMember()]
        [OptionSetMetadata("Dependency Feature", Index=722, Lcid=1033, Description="A dependency feature.")]
        DependencyFeature = 7108,
        
        [EnumMember()]
        [OptionSetMetadata("RuntimeDependency", Index=392, Lcid=1033, Description="Form Level dependencies in CRM.")]
        RuntimeDependency = 7200,
        
        [EnumMember()]
        [OptionSetMetadata("Entitlement Contact", Index=689, Lcid=1033)]
        EntitlementContact = 7272,
        
        [EnumMember()]
        [OptionSetMetadata("ElasticFileAttachment", Index=739, Lcid=1033, Description="Elastic File Attachment")]
        ElasticFileAttachment = 7755,
        
        [EnumMember()]
        [OptionSetMetadata("Post", Index=544, Lcid=1033, Description="An activity feed post.")]
        Post = 8000,
        
        [EnumMember()]
        [OptionSetMetadata("Post Role", Index=530, Lcid=1033, Description="Represents the objects with which an activity feed post is associated. For intern" +
            "al use only.")]
        PostRole = 8001,
        
        [EnumMember()]
        [OptionSetMetadata("Post Regarding", Index=532, Lcid=1033, Description="Represents which object an activity feed post is regarding. For internal use only" +
            ".")]
        PostRegarding = 8002,
        
        [EnumMember()]
        [OptionSetMetadata("Follow", Index=538, Lcid=1033, Description="Represents a user following the activity feed of an object.")]
        Follow = 8003,
        
        [EnumMember()]
        [OptionSetMetadata("Comment", Index=545, Lcid=1033, Description="A comment on an activity feed post.")]
        Comment = 8005,
        
        [EnumMember()]
        [OptionSetMetadata("Like", Index=531, Lcid=1033, Description="A like on an activity feed post.")]
        Like = 8006,
        
        [EnumMember()]
        [OptionSetMetadata("ACIViewMapper", Index=898, Lcid=1033, Description="Customized messages for an entity that has been renamed.")]
        ACIViewMapper = 8040,
        
        [EnumMember()]
        [OptionSetMetadata("Trace", Index=437, Lcid=1033, Description="A trace log.")]
        Trace = 8050,
        
        [EnumMember()]
        [OptionSetMetadata("Trace Association", Index=492, Lcid=1033, Description="Represents the objects with which a trace record is associated. For internal use " +
            "only.")]
        TraceAssociation = 8051,
        
        [EnumMember()]
        [OptionSetMetadata("Trace Regarding", Index=438, Lcid=1033, Description="Represents which object a trace record is regarding. For internal use only.")]
        TraceRegarding = 8052,
        
        [EnumMember()]
        [OptionSetMetadata("Routing Rule Set", Index=393, Lcid=1033, Description="Define Routing Rule to route cases to right people at the right time")]
        RoutingRuleSet = 8181,
        
        [EnumMember()]
        [OptionSetMetadata("Rule Item", Index=391, Lcid=1033, Description="Please provide the description for entity")]
        RuleItem_2 = 8199,
        
        [EnumMember()]
        [OptionSetMetadata("AppModule Metadata", Index=848, Lcid=1033, Description="For internal use only.")]
        AppModuleMetadata = 8700,
        
        [EnumMember()]
        [OptionSetMetadata("AppModule Metadata Dependency", Index=849, Lcid=1033, Description="For internal use only.")]
        AppModuleMetadataDependency = 8701,
        
        [EnumMember()]
        [OptionSetMetadata("AppModule Metadata Async Operation", Index=847, Lcid=1033, Description="For internal use only.")]
        AppModuleMetadataAsyncOperation = 8702,
        
        [EnumMember()]
        [OptionSetMetadata("Hierarchy Rule", Index=810, Lcid=1033, Description="Organization-owned entity customizations including mapping Quick view form with R" +
            "elationship Id")]
        HierarchyRule = 8840,
        
        [EnumMember()]
        [OptionSetMetadata("Model-driven App", Index=863, Lcid=1033, Description="A role-based, modular business app that provides task-based functionality for a p" +
            "articular area of work.")]
        ModeldrivenApp = 9006,
        
        [EnumMember()]
        [OptionSetMetadata("App Module Component", Index=861, Lcid=1033, Description="A component available in a business app such as entity, dashboard, form, view, ch" +
            "art, and business process.")]
        AppModuleComponent = 9007,
        
        [EnumMember()]
        [OptionSetMetadata("App Module Roles", Index=845, Lcid=1033, Description="Security roles that have access to a business app.")]
        AppModuleRoles = 9009,
        
        [EnumMember()]
        [OptionSetMetadata("App Config Master", Index=858, Lcid=1033, Description="Contains the master list of all properties that can be customized for apps in Dyn" +
            "amics 365. For internal use only.")]
        AppConfigMaster = 9011,
        
        [EnumMember()]
        [OptionSetMetadata("App Configuration", Index=859, Lcid=1033, Description="Contains a mapping between an app configuration instance and an app, which define" +
            "s the properties that can be customized for the app. Optionally, also contains n" +
            "avigation setting for an app. For internal use only.")]
        AppConfiguration = 9012,
        
        [EnumMember()]
        [OptionSetMetadata("App Configuration Instance", Index=860, Lcid=1033, Description="Contains a property or a list of properties from the app configuration master lis" +
            "t that can be customized for any app in Dynamics 365. For internal use only.")]
        AppConfigurationInstance = 9013,
        
        [EnumMember()]
        [OptionSetMetadata("Report", Index=602, Lcid=1033, Description="Data summary in an easy-to-read layout.")]
        Report = 9100,
        
        [EnumMember()]
        [OptionSetMetadata("Report Related Entity", Index=596, Lcid=1033, Description="Entities related to a report. A report can be related to multiple entities.")]
        ReportRelatedEntity = 9101,
        
        [EnumMember()]
        [OptionSetMetadata("Report Related Category", Index=595, Lcid=1033, Description="Categories related to a report. A report can be related to multiple categories.")]
        ReportRelatedCategory = 9102,
        
        [EnumMember()]
        [OptionSetMetadata("Report Visibility", Index=593, Lcid=1033, Description="Area in which to show a report. A report can be shown in multiple areas.")]
        ReportVisibility = 9103,
        
        [EnumMember()]
        [OptionSetMetadata("Report Link", Index=594, Lcid=1033, Description="Links and dependencies between reports. A report may drill through to another rep" +
            "ort, or it may have another report as a sub-report.")]
        ReportLink = 9104,
        
        [EnumMember()]
        [OptionSetMetadata("Currency", Index=435, Lcid=1033, Description="Currency in which a financial transaction is carried out.")]
        Currency = 9105,
        
        [EnumMember()]
        [OptionSetMetadata("Mail Merge Template", Index=800, Lcid=1033, Description="Template for a mail merge document that contains the standard attributes of that " +
            "document.")]
        MailMergeTemplate = 9106,
        
        [EnumMember()]
        [OptionSetMetadata("Import Job", Index=843, Lcid=1033, Description="For internal use only.")]
        ImportJob = 9107,
        
        [EnumMember()]
        [OptionSetMetadata("LocalConfigStore", Index=797, Lcid=1033, Description="")]
        LocalConfigStore = 9201,
        
        [EnumMember()]
        [OptionSetMetadata("Record Creation and Update Rule", Index=967, Lcid=1033, Description="Defines the settings for automatic record creation.")]
        RecordCreationandUpdateRule = 9300,
        
        [EnumMember()]
        [OptionSetMetadata("Record Creation and Update Rule Item", Index=968, Lcid=1033, Description="Defines the individual conditions required for creating records automatically.")]
        RecordCreationandUpdateRuleItem = 9301,
        
        [EnumMember()]
        [OptionSetMetadata("Web Resource", Index=464, Lcid=1033, Description="Data equivalent to files used in Web development. Web resources provide client-si" +
            "de components that are used to provide custom user interface elements.")]
        WebResource = 9333,
        
        [EnumMember()]
        [OptionSetMetadata("Channel Access Profile Rule", Index=994, Lcid=1033, Description="Defines the rules for automatically associating channel access profiles to extern" +
            "al party records.For internal use only")]
        ChannelAccessProfileRule = 9400,
        
        [EnumMember()]
        [OptionSetMetadata("Channel Access Profile Rule Item", Index=1001, Lcid=1033, Description="Defines the rule items of a profile rule set for the automated profile associatio" +
            "n.For internal use only")]
        ChannelAccessProfileRuleItem = 9401,
        
        [EnumMember()]
        [OptionSetMetadata("SharePoint Site", Index=350, Lcid=1033, Description="SharePoint site from where documents can be managed in Microsoft Dynamics 365.")]
        SharePointSite = 9502,
        
        [EnumMember()]
        [OptionSetMetadata("Sharepoint Document", Index=353, Lcid=1033, Description="Document libraries or folders on a SharePoint server from where documents can be " +
            "managed in Microsoft Dynamics 365.")]
        SharepointDocument = 9507,
        
        [EnumMember()]
        [OptionSetMetadata("Document Location", Index=351, Lcid=1033, Description="Document libraries or folders on a SharePoint server from where documents can be " +
            "managed in Microsoft Dynamics 365.")]
        DocumentLocation = 9508,
        
        [EnumMember()]
        [OptionSetMetadata("SharePoint Data", Index=352, Lcid=1033, Description="SharePoint\'s Data Corresponding to a user , Record , Location and Page")]
        SharePointData = 9509,
        
        [EnumMember()]
        [OptionSetMetadata("Rollup Properties", Index=395, Lcid=1033, Description="Stores properties related to rollup fields.")]
        RollupProperties = 9510,
        
        [EnumMember()]
        [OptionSetMetadata("Rollup Job", Index=394, Lcid=1033, Description="Stores rollup jobs.")]
        RollupJob = 9511,
        
        [EnumMember()]
        [OptionSetMetadata("Goal", Index=804, Lcid=1033, Description="Target objective for a user or a team for a specified time period.")]
        Goal = 9600,
        
        [EnumMember()]
        [OptionSetMetadata("Rollup Query", Index=811, Lcid=1033, Description="Query that is used to filter the results of the goal rollup.")]
        RollupQuery = 9602,
        
        [EnumMember()]
        [OptionSetMetadata("Goal Metric", Index=790, Lcid=1033, Description="Type of measurement for a goal, such as money amount or count.")]
        GoalMetric = 9603,
        
        [EnumMember()]
        [OptionSetMetadata("Rollup Field", Index=619, Lcid=1033, Description="Field to be rolled up to calculate the actual and in-progress values against the " +
            "goal.")]
        RollupField = 9604,
        
        [EnumMember()]
        [OptionSetMetadata("Email Server Profile", Index=746, Lcid=1033, Description="Holds the Email Server Profiles of an organization")]
        EmailServerProfile = 9605,
        
        [EnumMember()]
        [OptionSetMetadata("Mailbox", Index=793, Lcid=1033, Description="")]
        Mailbox = 9606,
        
        [EnumMember()]
        [OptionSetMetadata("Mailbox Statistics", Index=794, Lcid=1033, Description="Stores data regarding Mailbox processing cycles")]
        MailboxStatistics = 9607,
        
        [EnumMember()]
        [OptionSetMetadata("Mailbox Auto Tracking Folder", Index=802, Lcid=1033, Description="Stores data about what folders for a mailbox are auto tracked")]
        MailboxAutoTrackingFolder = 9608,
        
        [EnumMember()]
        [OptionSetMetadata("Mailbox Tracking Category", Index=801, Lcid=1033, Description="Stores data about what categories for a mailbox are tracked")]
        MailboxTrackingCategory = 9609,
        
        [EnumMember()]
        [OptionSetMetadata("Process Configuration", Index=947, Lcid=1033, Description="For internal use only.")]
        ProcessConfiguration = 9650,
        
        [EnumMember()]
        [OptionSetMetadata("Organization Insights Notification", Index=524, Lcid=1033, Description="Stores data regarding organization insights notification")]
        OrganizationInsightsNotification = 9690,
        
        [EnumMember()]
        [OptionSetMetadata("Organization Insights Metric", Index=523, Lcid=1033, Description="Stores data regarding organization insights metric")]
        OrganizationInsightsMetric = 9699,
        
        [EnumMember()]
        [OptionSetMetadata("Entitlement", Index=690, Lcid=1033, Description="Defines the amount and type of support a customer should receive.")]
        Entitlement = 9700,
        
        [EnumMember()]
        [OptionSetMetadata("Entitlement Channel", Index=691, Lcid=1033, Description="Defines the amount and type of support for a channel.")]
        EntitlementChannel = 9701,
        
        [EnumMember()]
        [OptionSetMetadata("Entitlement Template", Index=695, Lcid=1033, Description="Contains predefined customer support terms that can be used to created entitlemen" +
            "ts for customers.")]
        EntitlementTemplate = 9702,
        
        [EnumMember()]
        [OptionSetMetadata("Entitlement Template Channel", Index=696, Lcid=1033, Description="Contains predefined support terms for a channel to create entitlements for custom" +
            "ers.")]
        EntitlementTemplateChannel = 9703,
        
        [EnumMember()]
        [OptionSetMetadata("Entitlement Entity Allocation Type Mapping", Index=687, Lcid=1033, Description="Mapping to define which Allocation Types are available for Entity Type to be used" +
            " on Entitlement")]
        EntitlementEntityAllocationTypeMapping = 9704,
        
        [EnumMember()]
        [OptionSetMetadata("SLA", Index=341, Lcid=1033, Description="Contains information about the tracked service-level KPIs for cases that belong t" +
            "o different customers.")]
        SLA = 9750,
        
        [EnumMember()]
        [OptionSetMetadata("SLA Item", Index=342, Lcid=1033, Description="Contains information about a tracked support KPI for a specific customer.")]
        SLAItem = 9751,
        
        [EnumMember()]
        [OptionSetMetadata("SLA KPI Instance", Index=340, Lcid=1033, Description="Service level agreement (SLA) key performance indicator (KPI) instance that is tr" +
            "acked for an individual case")]
        SLAKPIInstance = 9752,
        
        [EnumMember()]
        [OptionSetMetadata("Custom Control", Index=960, Lcid=1033, Description="For internal use only.")]
        CustomControl = 9753,
        
        [EnumMember()]
        [OptionSetMetadata("Custom Control Resource", Index=956, Lcid=1033, Description="Custom Control Resource Id")]
        CustomControlResource = 9754,
        
        [EnumMember()]
        [OptionSetMetadata("Custom Control Default Config", Index=958, Lcid=1033, Description="For internal use only.")]
        CustomControlDefaultConfig = 9755,
        
        [EnumMember()]
        [OptionSetMetadata("Entity", Index=692, Lcid=1033)]
        Entity = 9800,
        
        [EnumMember()]
        [OptionSetMetadata("Attribute", Index=879, Lcid=1033)]
        Attribute = 9808,
        
        [EnumMember()]
        [OptionSetMetadata("OptionSet", Index=577, Lcid=1033)]
        OptionSet = 9809,
        
        [EnumMember()]
        [OptionSetMetadata("Entity Key", Index=676, Lcid=1033)]
        EntityKey = 9810,
        
        [EnumMember()]
        [OptionSetMetadata("Entity Relationship", Index=685, Lcid=1033)]
        EntityRelationship = 9811,
        
        [EnumMember()]
        [OptionSetMetadata("Managed Property", Index=785, Lcid=1033)]
        ManagedProperty = 9812,
        
        [EnumMember()]
        [OptionSetMetadata("Relationship Entity", Index=611, Lcid=1033)]
        RelationshipEntity = 9813,
        
        [EnumMember()]
        [OptionSetMetadata("Relationship Attribute", Index=612, Lcid=1033, Description="Stores relationship attributes mapping for Multi-predicate relationship")]
        RelationshipAttribute = 9814,
        
        [EnumMember()]
        [OptionSetMetadata("Entity Index", Index=678, Lcid=1033, Description="Metadata describing index of an entity")]
        EntityIndex = 9815,
        
        [EnumMember()]
        [OptionSetMetadata("Index Attribute", Index=827, Lcid=1033, Description="Stores index attributes")]
        IndexAttribute = 9816,
        
        [EnumMember()]
        [OptionSetMetadata("Option Set Value", Index=886, Lcid=1033, Description="Option Set Value")]
        OptionSetValue = 9817,
        
        [EnumMember()]
        [OptionSetMetadata("Secured Masking Column", Index=885, Lcid=1033, Description="Defines secured masking rule for column")]
        SecuredMaskingColumn = 9820,
        
        [EnumMember()]
        [OptionSetMetadata("Mobile Offline Profile", Index=1240, Lcid=1033, Description="Information to administer and manage the data available to mobile devices in offl" +
            "ine mode.")]
        MobileOfflineProfile = 9866,
        
        [EnumMember()]
        [OptionSetMetadata("Mobile Offline Profile Item", Index=1236, Lcid=1033, Description="Information on entity availability to mobile devices in offline mode for a mobile" +
            " offline profile item.")]
        MobileOfflineProfileItem = 9867,
        
        [EnumMember()]
        [OptionSetMetadata("Mobile Offline Profile Item Association", Index=1237, Lcid=1033, Description="Information on relationships to be used to follow related entity\'s records for mo" +
            "bile offline profile item.")]
        MobileOfflineProfileItemAssociation = 9868,
        
        [EnumMember()]
        [OptionSetMetadata("Sync Error", Index=467, Lcid=1033, Description="Failure reason and other detailed information for a record that failed to sync.")]
        SyncError = 9869,
        
        [EnumMember()]
        [OptionSetMetadata("Offline Command Definition", Index=574, Lcid=1033, Description="For internal use only.")]
        OfflineCommandDefinition = 9870,
        
        [EnumMember()]
        [OptionSetMetadata("Language Provisioning State", Index=764, Lcid=1033, Description="Container for language provisioning checkpoint states")]
        LanguageProvisioningState = 9875,
        
        [EnumMember()]
        [OptionSetMetadata("Ribbon Metadata To Process", Index=613, Lcid=1033, Description="Container for Ribbon Metadata To Process")]
        RibbonMetadataToProcess = 9880,
        
        [EnumMember()]
        [OptionSetMetadata("SolutionHistoryData", Index=370, Lcid=1033, Description="solution history data")]
        SolutionHistoryData = 9890,
        
        [EnumMember()]
        [OptionSetMetadata("Navigation Setting", Index=590, Lcid=1033, Description="Navigation Setting: A setting page or group of pages available for configuration " +
            "within an app. A record representing a group of pages is regarded as the parent " +
            "navigation setting of one or more other records. For internal use only.")]
        NavigationSetting = 9900,
        
        [EnumMember()]
        [OptionSetMetadata("MultiEntitySearch", Index=582, Lcid=1033, Description="Multi Entity Search.")]
        MultiEntitySearch = 9910,
        
        [EnumMember()]
        [OptionSetMetadata("Multi Select Option Value", Index=589, Lcid=1033, Description="Multi Select Option Value")]
        MultiSelectOptionValue = 9912,
        
        [EnumMember()]
        [OptionSetMetadata("Hierarchy Security Configuration", Index=808, Lcid=1033)]
        HierarchySecurityConfiguration = 9919,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge Base Record", Index=777, Lcid=1033, Description="Metadata of knowledge base (KB) articles associated with Microsoft Dynamics 365 e" +
            "ntities.")]
        KnowledgeBaseRecord = 9930,
        
        [EnumMember()]
        [OptionSetMetadata("Incident KnowledgeBaseRecord", Index=841, Lcid=1033)]
        IncidentKnowledgeBaseRecord = 9931,
        
        [EnumMember()]
        [OptionSetMetadata("Time Stamp Date Mapping", Index=489, Lcid=1033, Description="For internal use only.`")]
        TimeStampDateMapping = 9932,
        
        [EnumMember()]
        [OptionSetMetadata("Azure Service Connection", Index=869, Lcid=1033, Description="Stores connection information for an Azure service")]
        AzureServiceConnection = 9936,
        
        [EnumMember()]
        [OptionSetMetadata("Document Template", Index=753, Lcid=1033, Description="Used to store Document Templates in database in binary format.")]
        DocumentTemplate = 9940,
        
        [EnumMember()]
        [OptionSetMetadata("Personal Document Template", Index=515, Lcid=1033, Description="Used to store Personal Document Templates in database in binary format.")]
        PersonalDocumentTemplate = 9941,
        
        [EnumMember()]
        [OptionSetMetadata("Topic Model Configuration", Index=493, Lcid=1033, Description="Configuration settings for identification of topics using text analytics.")]
        TopicModelConfiguration = 9942,
        
        [EnumMember()]
        [OptionSetMetadata("Topic Model Execution History", Index=491, Lcid=1033, Description="Entity for Topic Model Execution History")]
        TopicModelExecutionHistory = 9943,
        
        [EnumMember()]
        [OptionSetMetadata("Topic Model", Index=495, Lcid=1033, Description="The model for automatic identification of topics using text analytics.")]
        TopicModel = 9944,
        
        [EnumMember()]
        [OptionSetMetadata("Text Analytics Entity Mapping", Index=503, Lcid=1033, Description="")]
        TextAnalyticsEntityMapping = 9945,
        
        [EnumMember()]
        [OptionSetMetadata("Topic History", Index=494, Lcid=1033, Description="Entity for Topic History")]
        TopicHistory = 9946,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge Search Model", Index=778, Lcid=1033, Description="Configuration for automatic suggestion of knowledge articles using text analytics" +
            " and search")]
        KnowledgeSearchModel = 9947,
        
        [EnumMember()]
        [OptionSetMetadata("Text Analytics Topic", Index=487, Lcid=1033, Description="Text Analytics Topics")]
        TextAnalyticsTopic = 9948,
        
        [EnumMember()]
        [OptionSetMetadata("Advanced Similarity Rule", Index=889, Lcid=1033, Description="A text match rule identifies similar records using keywords and key phrases deter" +
            "mined with text analytics")]
        AdvancedSimilarityRule = 9949,
        
        [EnumMember()]
        [OptionSetMetadata("Office Graph Document", Index=573, Lcid=1033, Description="Office Graph Documents Description")]
        OfficeGraphDocument = 9950,
        
        [EnumMember()]
        [OptionSetMetadata("Similarity Rule", Index=354, Lcid=1033, Description="")]
        SimilarityRule = 9951,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge Article", Index=773, Lcid=1033, Description="Organizational knowledge for internal and external use.")]
        KnowledgeArticle = 9953,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge Article Incident", Index=780, Lcid=1033, Description="Association between an knowledge article and incident.")]
        KnowledgeArticleIncident = 9954,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge Article Views", Index=779, Lcid=1033, Description="No of times an article is viewed per day")]
        KnowledgeArticleViews = 9955,
        
        [EnumMember()]
        [OptionSetMetadata("Language", Index=771, Lcid=1033, Description="Language")]
        Language_2 = 9957,
        
        [EnumMember()]
        [OptionSetMetadata("Feedback", Index=699, Lcid=1033, Description="Feedback and rating.")]
        Feedback = 9958,
        
        [EnumMember()]
        [OptionSetMetadata("Category", Index=997, Lcid=1033, Description="Entity for categorizing records to make it easier for your customers to find them" +
            " on portals and through search.")]
        Category = 9959,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge Article Category", Index=781, Lcid=1033, Description="Category for a Knowledge Article.")]
        KnowledgeArticleCategory = 9960,
        
        [EnumMember()]
        [OptionSetMetadata("DelveActionHub", Index=728, Lcid=1033, Description="Delve Action Hubs Description")]
        DelveActionHub = 9961,
        
        [EnumMember()]
        [OptionSetMetadata("Action Card", Index=899, Lcid=1033, Description="Action card entity to show action cards.")]
        ActionCard = 9962,
        
        [EnumMember()]
        [OptionSetMetadata("ActionCardUserState", Index=907, Lcid=1033, Description="")]
        ActionCardUserState = 9968,
        
        [EnumMember()]
        [OptionSetMetadata("Action Card User Settings", Index=906, Lcid=1033, Description="Stores user settings for action cards")]
        ActionCardUserSettings = 9973,
        
        [EnumMember()]
        [OptionSetMetadata("Action Card Type", Index=1011, Lcid=1033, Description="To provide master data for the card types list. For internal use only")]
        ActionCardType = 9983,
        
        [EnumMember()]
        [OptionSetMetadata("Interaction for Email", Index=826, Lcid=1033, Description="")]
        InteractionforEmail = 9986,
        
        [EnumMember()]
        [OptionSetMetadata("External Party Item", Index=715, Lcid=1033, Description="Information about external party items that need to access Dynamics 365 from exte" +
            "rnal channels.For internal use only")]
        ExternalPartyItem = 9987,
        
        [EnumMember()]
        [OptionSetMetadata("HolidayWrapper", Index=809, Lcid=1033, Description="")]
        HolidayWrapper = 9996,
        
        [EnumMember()]
        [OptionSetMetadata("Email Signature", Index=744, Lcid=1033, Description="Signature for email message")]
        EmailSignature = 9997,
        
        [EnumMember()]
        [OptionSetMetadata("Solution Component Attribute Configuration", Index=343, Lcid=1033, Description="")]
        SolutionComponentAttributeConfiguration = 10000,
        
        [EnumMember()]
        [OptionSetMetadata("Solution Component Batch Configuration", Index=344, Lcid=1033, Description="")]
        SolutionComponentBatchConfiguration = 10001,
        
        [EnumMember()]
        [OptionSetMetadata("Solution Component Configuration", Index=373, Lcid=1033, Description="")]
        SolutionComponentConfiguration = 10002,
        
        [EnumMember()]
        [OptionSetMetadata("Solution Component Relationship Configuration", Index=372, Lcid=1033, Description="")]
        SolutionComponentRelationshipConfiguration = 10003,
        
        [EnumMember()]
        [OptionSetMetadata("Solution History", Index=63, Lcid=1033, Description="")]
        SolutionHistory = 10004,
        
        [EnumMember()]
        [OptionSetMetadata("Solution History Data Source", Index=64, Lcid=1033, Description="")]
        SolutionHistoryDataSource = 10005,
        
        [EnumMember()]
        [OptionSetMetadata("Component Layer", Index=1316, Lcid=1033, Description="")]
        ComponentLayer = 10006,
        
        [EnumMember()]
        [OptionSetMetadata("Component Layer Data Source", Index=1345, Lcid=1033, Description="")]
        ComponentLayerDataSource = 10007,
        
        [EnumMember()]
        [OptionSetMetadata("Package", Index=511, Lcid=1033, Description="")]
        Package = 10008,
        
        [EnumMember()]
        [OptionSetMetadata("Package History", Index=509, Lcid=1033, Description="")]
        PackageHistory = 10009,
        
        [EnumMember()]
        [OptionSetMetadata("StageSolutionUpload", Index=363, Lcid=1033, Description="")]
        StageSolutionUpload = 10011,
        
        [EnumMember()]
        [OptionSetMetadata("ExportSolutionUpload", Index=716, Lcid=1033, Description="")]
        ExportSolutionUpload = 10012,
        
        [EnumMember()]
        [OptionSetMetadata("FeatureControlSetting", Index=707, Lcid=1033, Description="featurecontrolsetting")]
        FeatureControlSetting = 10013,
        
        [EnumMember()]
        [OptionSetMetadata("Solution Component Summary", Index=73, Lcid=1033, Description="")]
        SolutionComponentSummary = 10014,
        
        [EnumMember()]
        [OptionSetMetadata("Solution Component Count Summary", Index=79, Lcid=1033, Description="")]
        SolutionComponentCountSummary = 10015,
        
        [EnumMember()]
        [OptionSetMetadata("Solution Component Data Source", Index=80, Lcid=1033, Description="")]
        SolutionComponentDataSource = 10016,
        
        [EnumMember()]
        [OptionSetMetadata("Solution Component Count Data Source", Index=81, Lcid=1033, Description="")]
        SolutionComponentCountDataSource = 10017,
        
        [EnumMember()]
        [OptionSetMetadata("Microsoft Entra ID", Index=901, Lcid=1033, Description="Virtual entity that represents Microsoft Entra ID")]
        MicrosoftEntraID = 10018,
        
        [EnumMember()]
        [OptionSetMetadata("Staged Entity", Index=375, Lcid=1033, Description="Stores staged entity metadata to be processed before fully created.")]
        StagedEntity = 10019,
        
        [EnumMember()]
        [OptionSetMetadata("Staged Entity Attribute", Index=376, Lcid=1033, Description="Stores staged entity attribute metadata to be processed in async.")]
        StagedEntityAttribute = 10020,
        
        [EnumMember()]
        [OptionSetMetadata("Staged Metadata Async Operation", Index=369, Lcid=1033, Description="Stores staged entity metadata to be processed before fully created.")]
        StagedMetadataAsyncOperation = 10021,
        
        [EnumMember()]
        [OptionSetMetadata("Key Vault Reference", Index=772, Lcid=1033, Description="Contains data that refers to an Azure Key Vault containing credentials used to co" +
            "nnect to secure web-hosted resources.")]
        KeyVaultReference = 10022,
        
        [EnumMember()]
        [OptionSetMetadata("Managed Identity", Index=792, Lcid=1033, Description="Contains data to represent an Azure Active Directory Application used to connect " +
            "to secure web-hosted resources.")]
        ManagedIdentity = 10023,
        
        [EnumMember()]
        [OptionSetMetadata("Catalog", Index=1003, Lcid=1033, Description="Entity for cataloging records to make it easier for your customers to find them o" +
            "n portals and through search.")]
        Catalog = 10024,
        
        [EnumMember()]
        [OptionSetMetadata("Catalog Assignment", Index=996, Lcid=1033, Description="Entity for assigning records to a specific catalog ")]
        CatalogAssignment = 10025,
        
        [EnumMember()]
        [OptionSetMetadata("Internal Catalog Assignment", Index=825, Lcid=1033, Description="")]
        InternalCatalogAssignment = 10026,
        
        [EnumMember()]
        [OptionSetMetadata("Custom API", Index=951, Lcid=1033, Description="Entity that defines a custom API")]
        CustomAPI = 10027,
        
        [EnumMember()]
        [OptionSetMetadata("Custom API Request Parameter", Index=952, Lcid=1033, Description="Entity that defines a request parameter for a custom API")]
        CustomAPIRequestParameter = 10028,
        
        [EnumMember()]
        [OptionSetMetadata("Custom API Response Property", Index=959, Lcid=1033, Description="Entity that defines a response property for a custom API ")]
        CustomAPIResponseProperty = 10029,
        
        [EnumMember()]
        [OptionSetMetadata("Plugin Package", Index=539, Lcid=1033, Description="")]
        PluginPackage = 10030,
        
        [EnumMember()]
        [OptionSetMetadata("NonRelational Data Source", Index=223, Lcid=1033, Description="")]
        NonRelationalDataSource = 10031,
        
        [EnumMember()]
        [OptionSetMetadata("ProvisionLanguageForUser", Index=667, Lcid=1033, Description="")]
        ProvisionLanguageForUser = 10032,
        
        [EnumMember()]
        [OptionSetMetadata("Shared Object", Index=410, Lcid=1033, Description="A record that is being shared in a real time collaboration session.")]
        SharedObject = 10033,
        
        [EnumMember()]
        [OptionSetMetadata("Shared Workspace", Index=408, Lcid=1033, Description="References a container that stores real-time collaboration data.")]
        SharedWorkspace = 10034,
        
        [EnumMember()]
        [OptionSetMetadata("Shared Workspace Access Token", Index=406, Lcid=1033, Description="Contains information about the shared workspace access tokens.")]
        SharedWorkspaceAccessToken = 10035,
        
        [EnumMember()]
        [OptionSetMetadata("Shared Workspace Pool", Index=407, Lcid=1033, Description="Contains metadata about a container used to store real-time collaboration data. O" +
            "nce claimed, a sharedworkspace record would be created with copied metadata.")]
        SharedWorkspacePool = 10036,
        
        [EnumMember()]
        [OptionSetMetadata("Data Lake Folder", Index=731, Lcid=1033, Description="A folder is a place to store data in Azure Data Lake.")]
        DataLakeFolder = 10037,
        
        [EnumMember()]
        [OptionSetMetadata("Data Lake Folder Permission", Index=729, Lcid=1033, Description="")]
        DataLakeFolderPermission = 10038,
        
        [EnumMember()]
        [OptionSetMetadata("Data Lake Workspace", Index=730, Lcid=1033, Description="A workspace is a place to store data in Azure Data Lake.")]
        DataLakeWorkspace = 10039,
        
        [EnumMember()]
        [OptionSetMetadata("Data Lake Workspace Permission", Index=737, Lcid=1033, Description="")]
        DataLakeWorkspacePermission = 10040,
        
        [EnumMember()]
        [OptionSetMetadata("Data Processing configuration", Index=736, Lcid=1033, Description="")]
        DataProcessingconfiguration = 10041,
        
        [EnumMember()]
        [OptionSetMetadata("Exported Excel", Index=709, Lcid=1033, Description="A Place holder entity to save excel file for each exportretaineddata custom api r" +
            "equests.")]
        ExportedExcel = 10042,
        
        [EnumMember()]
        [OptionSetMetadata("RetainedData Excel", Index=627, Lcid=1033, Description="A Place holder entity to save excel file for each exportretaineddata custom api r" +
            "equests.")]
        RetainedDataExcel = 10043,
        
        [EnumMember()]
        [OptionSetMetadata("Synapse Database", Index=484, Lcid=1033, Description="This entity represents an external Synapse database and its associated datalake f" +
            "older link.")]
        SynapseDatabase = 10044,
        
        [EnumMember()]
        [OptionSetMetadata("Synapse Link External Table State", Index=485, Lcid=1033, Description="Synapse Link external table states")]
        SynapseLinkExternalTableState = 10045,
        
        [EnumMember()]
        [OptionSetMetadata("Synapse Link Profile", Index=483, Lcid=1033, Description="Synapse Link Profile")]
        SynapseLinkProfile = 10046,
        
        [EnumMember()]
        [OptionSetMetadata("Synapse Link Profile Entity", Index=481, Lcid=1033, Description="Entities associated with the Synapse Link profile")]
        SynapseLinkProfileEntity = 10047,
        
        [EnumMember()]
        [OptionSetMetadata("Synapse Link Profile Entity State", Index=482, Lcid=1033, Description="Runtime state of the Synapse Link entity")]
        SynapseLinkProfileEntityState = 10048,
        
        [EnumMember()]
        [OptionSetMetadata("Synapse Link Schedule", Index=475, Lcid=1033, Description="Synapse link schedules")]
        SynapseLinkSchedule = 10049,
        
        [EnumMember()]
        [OptionSetMetadata("Component Version", Index=940, Lcid=1033, Description="")]
        ComponentVersion = 10050,
        
        [EnumMember()]
        [OptionSetMetadata("Component Version Data Source", Index=933, Lcid=1033, Description="")]
        ComponentVersionDataSource = 10051,
        
        [EnumMember()]
        [OptionSetMetadata("Component Version (Internal)", Index=934, Lcid=1033)]
        ComponentVersionInternal = 10052,
        
        [EnumMember()]
        [OptionSetMetadata("Git Branch", Index=820, Lcid=1033, Description="")]
        GitBranch = 10053,
        
        [EnumMember()]
        [OptionSetMetadata("Git Configuration Retrieval Data Source", Index=813, Lcid=1033, Description="")]
        GitConfigurationRetrievalDataSource = 10054,
        
        [EnumMember()]
        [OptionSetMetadata("Git Organization", Index=806, Lcid=1033, Description="")]
        GitOrganization = 10055,
        
        [EnumMember()]
        [OptionSetMetadata("Git Project", Index=807, Lcid=1033, Description="")]
        GitProject = 10056,
        
        [EnumMember()]
        [OptionSetMetadata("Git Repository", Index=805, Lcid=1033, Description="")]
        GitRepository = 10057,
        
        [EnumMember()]
        [OptionSetMetadata("Source Control Branch Configuration", Index=371, Lcid=1033, Description="Stores the source control branch configuration associated with the organization o" +
            "r solution")]
        SourceControlBranchConfiguration = 10058,
        
        [EnumMember()]
        [OptionSetMetadata("Source Control Component", Index=378, Lcid=1033, Description="Stores the Source Control Components associated with the organization or solution" +
            "")]
        SourceControlComponent = 10059,
        
        [EnumMember()]
        [OptionSetMetadata("Source Control Component Payload", Index=379, Lcid=1033, Description="Stores the Source Control Component Payloads associated with components.")]
        SourceControlComponentPayload = 10060,
        
        [EnumMember()]
        [OptionSetMetadata("Source Control Configuration", Index=377, Lcid=1033, Description="Stores the git configuration associated with the environment ")]
        SourceControlConfiguration = 10061,
        
        [EnumMember()]
        [OptionSetMetadata("Staged Source Control Component", Index=362, Lcid=1033, Description="Stores the source control components that needs to be processed")]
        StagedSourceControlComponent = 10062,
        
        [EnumMember()]
        [OptionSetMetadata("DataflowRefreshHistory", Index=1061, Lcid=1033, Description="")]
        DataflowRefreshHistory = 10063,
        
        [EnumMember()]
        [OptionSetMetadata("EntityRefreshHistory", Index=1030, Lcid=1033, Description="")]
        EntityRefreshHistory = 10064,
        
        [EnumMember()]
        [OptionSetMetadata("Shared Link Setting", Index=409, Lcid=1033, Description="Shared Link Setting")]
        SharedLinkSetting = 10065,
        
        [EnumMember()]
        [OptionSetMetadata("DelegatedAuthorization", Index=734, Lcid=1033, Description="Context for delegated authorization.")]
        DelegatedAuthorization = 10066,
        
        [EnumMember()]
        [OptionSetMetadata("CascadeGrantRevokeAccessRecordsTracker", Index=1009, Lcid=1033, Description="")]
        CascadeGrantRevokeAccessRecordsTracker = 10068,
        
        [EnumMember()]
        [OptionSetMetadata("CascadeGrantRevokeAccessVersionTracker", Index=1010, Lcid=1033, Description="")]
        CascadeGrantRevokeAccessVersionTracker = 10069,
        
        [EnumMember()]
        [OptionSetMetadata("RevokeInheritedAccessRecordsTracker", Index=629, Lcid=1033, Description="")]
        RevokeInheritedAccessRecordsTracker = 10070,
        
        [EnumMember()]
        [OptionSetMetadata("TdsMetadata", Index=501, Lcid=1033, Description="")]
        TdsMetadata = 10071,
        
        [EnumMember()]
        [OptionSetMetadata("Model-Driven App Element", Index=856, Lcid=1033, Description="Associates a model-driven app with its components.")]
        ModelDrivenAppElement = 10072,
        
        [EnumMember()]
        [OptionSetMetadata("Model-Driven App Component Node\'s Edge", Index=862, Lcid=1033, Description="Contains Model-Driven App Component Node\'s Edge Information.")]
        ModelDrivenAppComponentNodesEdge = 10073,
        
        [EnumMember()]
        [OptionSetMetadata("Model-Driven App Component Node", Index=855, Lcid=1033, Description="Contains Model-Driven App Component Node Information")]
        ModelDrivenAppComponentNode = 10074,
        
        [EnumMember()]
        [OptionSetMetadata("Model-Driven App Setting", Index=854, Lcid=1033, Description="Holds the value for the associated App Setting Definition.")]
        ModelDrivenAppSetting = 10075,
        
        [EnumMember()]
        [OptionSetMetadata("Model-Driven App User Setting", Index=852, Lcid=1033, Description="Holds the value for the associated App User Setting Definition.")]
        ModelDrivenAppUserSetting = 10076,
        
        [EnumMember()]
        [OptionSetMetadata("Organization Setting", Index=526, Lcid=1033, Description="Holds the value for the associated Organization Setting Definition.")]
        OrganizationSetting = 10077,
        
        [EnumMember()]
        [OptionSetMetadata("Setting Definition", Index=402, Lcid=1033, Description="Contains Setting Definitions")]
        SettingDefinition = 10078,
        
        [EnumMember()]
        [OptionSetMetadata("CanvasApp Extended Metadata", Index=1005, Lcid=1033, Description="Holds extended metadata values for canvas apps that are not solution aware")]
        CanvasAppExtendedMetadata = 10079,
        
        [EnumMember()]
        [OptionSetMetadata("Service Plan Mapping", Index=401, Lcid=1033, Description="Service Plan Mapping")]
        ServicePlanMapping = 10080,
        
        [EnumMember()]
        [OptionSetMetadata("Service Plan Custom Control", Index=403, Lcid=1033, Description="Service Plan Custom Controls")]
        ServicePlanCustomControl = 10081,
        
        [EnumMember()]
        [OptionSetMetadata("ApplicationUser", Index=865, Lcid=1033, Description="Application User that has non-interactive access to the CDS system")]
        ApplicationUser = 10083,
        
        [EnumMember()]
        [OptionSetMetadata("OData v4 Data Source", Index=179, Lcid=1033, Description="Data sources used by the OData v4 data provider to access data from an external w" +
            "eb service.")]
        ODatav4DataSource = 10086,
        
        [EnumMember()]
        [OptionSetMetadata("Workflow Binary", Index=447, Lcid=1033, Description="")]
        WorkflowBinary = 10087,
        
        [EnumMember()]
        [OptionSetMetadata("Credential", Index=953, Lcid=1033, Description="")]
        Credential = 10088,
        
        [EnumMember()]
        [OptionSetMetadata("Desktop Flow Module", Index=719, Lcid=1033, Description="")]
        DesktopFlowModule = 10089,
        
        [EnumMember()]
        [OptionSetMetadata("Flow Capacity Assignment", Index=702, Lcid=1033, Description="Capacity assignment for usage in Power Automate")]
        FlowCapacityAssignment = 10090,
        
        [EnumMember()]
        [OptionSetMetadata("Flow Credential Application", Index=703, Lcid=1033, Description="")]
        FlowCredentialApplication = 10091,
        
        [EnumMember()]
        [OptionSetMetadata("Flow Event", Index=760, Lcid=1033, Description="Entity to store the events that happen during usage of Power Automate.")]
        FlowEvent = 10092,
        
        [EnumMember()]
        [OptionSetMetadata("Flow Machine", Index=818, Lcid=1033, Description="")]
        FlowMachine = 10093,
        
        [EnumMember()]
        [OptionSetMetadata("Flow Machine Group", Index=816, Lcid=1033, Description="")]
        FlowMachineGroup = 10094,
        
        [EnumMember()]
        [OptionSetMetadata("Flow Machine Image", Index=814, Lcid=1033, Description="")]
        FlowMachineImage = 10095,
        
        [EnumMember()]
        [OptionSetMetadata("Flow Machine Image Version", Index=815, Lcid=1033, Description="")]
        FlowMachineImageVersion = 10096,
        
        [EnumMember()]
        [OptionSetMetadata("Flow Machine Network", Index=822, Lcid=1033, Description="")]
        FlowMachineNetwork = 10097,
        
        [EnumMember()]
        [OptionSetMetadata("ProcessStageParameter", Index=641, Lcid=1033, Description="")]
        ProcessStageParameter = 10098,
        
        [EnumMember()]
        [OptionSetMetadata("Work Queue", Index=445, Lcid=1033, Description="")]
        WorkQueue = 10099,
        
        [EnumMember()]
        [OptionSetMetadata("Work Queue Item", Index=452, Lcid=1033, Description="")]
        WorkQueueItem = 10100,
        
        [EnumMember()]
        [OptionSetMetadata("Desktop Flow Binary", Index=718, Lcid=1033, Description="")]
        DesktopFlowBinary = 10101,
        
        [EnumMember()]
        [OptionSetMetadata("Flow Log", Index=817, Lcid=1033)]
        FlowLog = 10102,
        
        [EnumMember()]
        [OptionSetMetadata("Flow Run", Index=823, Lcid=1033, Description="")]
        FlowRun = 10103,
        
        [EnumMember()]
        [OptionSetMetadata("Action Approval Model", Index=1019, Lcid=1033, Description="The action approval model data attached to an action approval.")]
        ActionApprovalModel = 10104,
        
        [EnumMember()]
        [OptionSetMetadata("Approval", Index=1020, Lcid=1033, Description="An approval.")]
        Approval = 10105,
        
        [EnumMember()]
        [OptionSetMetadata("Approval Request", Index=1049, Lcid=1033, Description="An individual request for approval.")]
        ApprovalRequest = 10106,
        
        [EnumMember()]
        [OptionSetMetadata("Approval Response", Index=1050, Lcid=1033, Description="An individual response to an approval.")]
        ApprovalResponse = 10107,
        
        [EnumMember()]
        [OptionSetMetadata("Approval Step", Index=1048, Lcid=1033, Description="")]
        ApprovalStep = 10108,
        
        [EnumMember()]
        [OptionSetMetadata("Await All Action Approval Model", Index=1046, Lcid=1033, Description="The await all action approval model data attached to an action approval.")]
        AwaitAllActionApprovalModel = 10109,
        
        [EnumMember()]
        [OptionSetMetadata("Await All Approval Model", Index=1047, Lcid=1033, Description="The await all approval model data attached to an approval.")]
        AwaitAllApprovalModel = 10110,
        
        [EnumMember()]
        [OptionSetMetadata("Basic Approval Model Data", Index=1054, Lcid=1033, Description="The basic approval model data attached to an approval.")]
        BasicApprovalModelData = 10111,
        
        [EnumMember()]
        [OptionSetMetadata("Flow Approval", Index=1055, Lcid=1033, Description="Microsoft Flow data attached to an approval.")]
        FlowApproval = 10112,
        
        [EnumMember()]
        [OptionSetMetadata("Connection Reference", Index=931, Lcid=1033, Description="")]
        ConnectionReference = 10121,
        
        [EnumMember()]
        [OptionSetMetadata("DVFileSearch", Index=751, Lcid=1033, Description="DVFileSearches Component")]
        DVFileSearch = 10122,
        
        [EnumMember()]
        [OptionSetMetadata("DVFileSearchAttribute", Index=758, Lcid=1033, Description="")]
        DVFileSearchAttribute = 10123,
        
        [EnumMember()]
        [OptionSetMetadata("DVFileSearchEntity", Index=759, Lcid=1033, Description="DVFileSearchEntities component.")]
        DVFileSearchEntity = 10124,
        
        [EnumMember()]
        [OptionSetMetadata("DVTableSearch", Index=757, Lcid=1033, Description="DVTableSearches component")]
        DVTableSearch = 10125,
        
        [EnumMember()]
        [OptionSetMetadata("DVTableSearchAttribute", Index=755, Lcid=1033, Description="DVTableSearchAttribute component")]
        DVTableSearchAttribute = 10126,
        
        [EnumMember()]
        [OptionSetMetadata("DVTableSearchEntity", Index=756, Lcid=1033, Description="DVTableSearchEntities component")]
        DVTableSearchEntity = 10127,
        
        [EnumMember()]
        [OptionSetMetadata("AICopilot", Index=893, Lcid=1033, Description="AI Copilot")]
        AICopilot = 10128,
        
        [EnumMember()]
        [OptionSetMetadata("AIPluginAuth", Index=921, Lcid=1033, Description="Entity to store AIPlugin Auth Information")]
        AIPluginAuth = 10129,
        
        [EnumMember()]
        [OptionSetMetadata("AI Plugin Conversation Starter", Index=919, Lcid=1033, Description="Conversation Starters for AI Plugins.")]
        AIPluginConversationStarter = 10130,
        
        [EnumMember()]
        [OptionSetMetadata("AI Plugin Conversation Starter Mapping", Index=920, Lcid=1033, Description="AIPlugins component")]
        AIPluginConversationStarterMapping = 10131,
        
        [EnumMember()]
        [OptionSetMetadata("AI Plugin Governance", Index=926, Lcid=1033, Description="")]
        AIPluginGovernance = 10132,
        
        [EnumMember()]
        [OptionSetMetadata("AI Plugin Governance Extended", Index=924, Lcid=1033, Description="")]
        AIPluginGovernanceExtended = 10133,
        
        [EnumMember()]
        [OptionSetMetadata("AIPluginOperationResponseTemplate", Index=912, Lcid=1033, Description="Content for the AI Plugin Operation Response Template")]
        AIPluginOperationResponseTemplate = 10134,
        
        [EnumMember()]
        [OptionSetMetadata("AIPluginTitle", Index=910, Lcid=1033, Description="AIPlugin Title")]
        AIPluginTitle = 10135,
        
        [EnumMember()]
        [OptionSetMetadata("SideloadedAIPlugin", Index=357, Lcid=1033, Description="Sideloaded AIPlugins metadata.")]
        SideloadedAIPlugin = 10136,
        
        [EnumMember()]
        [OptionSetMetadata("AIPlugin", Index=923, Lcid=1033, Description="AIPlugins component")]
        AIPlugin = 10137,
        
        [EnumMember()]
        [OptionSetMetadata("AIPluginExternalSchema", Index=927, Lcid=1033, Description="AIPluginExternalSchemas component")]
        AIPluginExternalSchema = 10138,
        
        [EnumMember()]
        [OptionSetMetadata("AIPluginExternalSchemaProperty", Index=928, Lcid=1033, Description="AIPluginExternalSchemaProperties component")]
        AIPluginExternalSchemaProperty = 10139,
        
        [EnumMember()]
        [OptionSetMetadata("AIPluginInstance", Index=925, Lcid=1033, Description="AI Plugin Instances Component")]
        AIPluginInstance = 10140,
        
        [EnumMember()]
        [OptionSetMetadata("AIPluginOperation", Index=918, Lcid=1033, Description="AIPluginOperations component")]
        AIPluginOperation = 10141,
        
        [EnumMember()]
        [OptionSetMetadata("AIPluginOperationParameter", Index=911, Lcid=1033, Description="Parameter overrides for AI Operation")]
        AIPluginOperationParameter = 10142,
        
        [EnumMember()]
        [OptionSetMetadata("AIPluginUserSetting", Index=908, Lcid=1033, Description="")]
        AIPluginUserSetting = 10143,
        
        [EnumMember()]
        [OptionSetMetadata("AI Event", Index=1251, Lcid=1033, Description="")]
        AIEvent = 10145,
        
        [EnumMember()]
        [OptionSetMetadata("AI Builder Feedback Loop", Index=1246, Lcid=1033, Description="")]
        AIBuilderFeedbackLoop = 10146,
        
        [EnumMember()]
        [OptionSetMetadata("AI Form Processing Document", Index=1252, Lcid=1033, Description="")]
        AIFormProcessingDocument = 10147,
        
        [EnumMember()]
        [OptionSetMetadata("AI Object Detection Image", Index=1198, Lcid=1033, Description="")]
        AIObjectDetectionImage = 10148,
        
        [EnumMember()]
        [OptionSetMetadata("AI Object Detection Label", Index=1196, Lcid=1033, Description="")]
        AIObjectDetectionLabel = 10149,
        
        [EnumMember()]
        [OptionSetMetadata("AI Object Detection Bounding Box", Index=1194, Lcid=1033, Description="")]
        AIObjectDetectionBoundingBox = 10150,
        
        [EnumMember()]
        [OptionSetMetadata("AI Object Detection Image Mapping", Index=1195, Lcid=1033, Description="")]
        AIObjectDetectionImageMapping = 10151,
        
        [EnumMember()]
        [OptionSetMetadata("AI Builder Dataset", Index=1256, Lcid=1033, Description="")]
        AIBuilderDataset = 10153,
        
        [EnumMember()]
        [OptionSetMetadata("AI Builder Dataset File", Index=1249, Lcid=1033, Description="")]
        AIBuilderDatasetFile = 10154,
        
        [EnumMember()]
        [OptionSetMetadata("AI Builder Dataset Record", Index=1250, Lcid=1033, Description="")]
        AIBuilderDatasetRecord = 10155,
        
        [EnumMember()]
        [OptionSetMetadata("AI Builder Datasets Container", Index=1248, Lcid=1033, Description="")]
        AIBuilderDatasetsContainer = 10156,
        
        [EnumMember()]
        [OptionSetMetadata("AI Builder File", Index=1247, Lcid=1033, Description="")]
        AIBuilderFile = 10157,
        
        [EnumMember()]
        [OptionSetMetadata("AI Builder File Attached Data", Index=1254, Lcid=1033, Description="")]
        AIBuilderFileAttachedData = 10158,
        
        [EnumMember()]
        [OptionSetMetadata("Help Page", Index=1156, Lcid=1033, Description="")]
        HelpPage = 10159,
        
        [EnumMember()]
        [OptionSetMetadata("Tour", Index=37, Lcid=1033, Description="")]
        Tour = 10160,
        
        [EnumMember()]
        [OptionSetMetadata("BotContent", Index=163, Lcid=1033, Description="")]
        BotContent = 10161,
        
        [EnumMember()]
        [OptionSetMetadata("ConversationTranscript", Index=969, Lcid=1033, Description="Contains the transcripts of conversations between participants such as customers," +
            " Virtual Agents or Human agents.")]
        ConversationTranscript = 10162,
        
        [EnumMember()]
        [OptionSetMetadata("Copilot", Index=986, Lcid=1033, Description="Represents a copilot created in Copilot Studio. https://copilotstudio.microsoft.c" +
            "om/")]
        Copilot = 10163,
        
        [EnumMember()]
        [OptionSetMetadata("Copilot component", Index=987, Lcid=1033, Description="Holds key authoring components of a Copilot such a topics, entities, variables, e" +
            "tc.")]
        Copilotcomponent = 10164,
        
        [EnumMember()]
        [OptionSetMetadata("Copilot component collection", Index=985, Lcid=1033, Description="")]
        Copilotcomponentcollection = 10165,
        
        [EnumMember()]
        [OptionSetMetadata("Comment", Index=941, Lcid=1033, Description="A collaborative comment on a maker artifact")]
        Comment_2 = 10176,
        
        [EnumMember()]
        [OptionSetMetadata("Governance Configuration", Index=812, Lcid=1033, Description="")]
        GovernanceConfiguration = 10177,
        
        [EnumMember()]
        [OptionSetMetadata("Fabric AISkill", Index=713, Lcid=1033, Description="AISkills published from Fabric.")]
        FabricAISkill = 10178,
        
        [EnumMember()]
        [OptionSetMetadata("App Insights Metadata", Index=1191, Lcid=1033, Description="Metadata for App Insights Platform components")]
        AppInsightsMetadata = 10179,
        
        [EnumMember()]
        [OptionSetMetadata("Dataflow Connection Reference", Index=1063, Lcid=1033, Description="Intersecting table between Dataflow and Connection Reference")]
        DataflowConnectionReference = 10180,
        
        [EnumMember()]
        [OptionSetMetadata("Schedule", Index=277, Lcid=1033, Description="Generic refresh schedule")]
        Schedule = 10181,
        
        [EnumMember()]
        [OptionSetMetadata("Dataflow Template", Index=1062, Lcid=1033, Description="An entity to store information about dataflow templates")]
        DataflowTemplate = 10182,
        
        [EnumMember()]
        [OptionSetMetadata("Dataflow DatalakeFolder", Index=1065, Lcid=1033, Description="")]
        DataflowDatalakeFolder = 10183,
        
        [EnumMember()]
        [OptionSetMetadata("Data Movement Service Request", Index=1077, Lcid=1033, Description="Table for Data Movement Service Requests")]
        DataMovementServiceRequest = 10184,
        
        [EnumMember()]
        [OptionSetMetadata("Data Movement Service Request Status", Index=1078, Lcid=1033, Description="Table for Data Movement Service Request Status")]
        DataMovementServiceRequestStatus = 10185,
        
        [EnumMember()]
        [OptionSetMetadata("DMS Sync Request", Index=1085, Lcid=1033, Description="An entity to save DMS sync requests.")]
        DMSSyncRequest = 10186,
        
        [EnumMember()]
        [OptionSetMetadata("DMS Sync Status", Index=1086, Lcid=1033, Description="An entity to save DMS sync statuses.")]
        DMSSyncStatus = 10187,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge Asset Configuration", Index=1103, Lcid=1033, Description="Knowledge asset configurations for data sources configured in knowledge hub.")]
        KnowledgeAssetConfiguration = 10188,
        
        [EnumMember()]
        [OptionSetMetadata("Module Run Detail", Index=1125, Lcid=1033, Description="Result of execution of a MEF model")]
        ModuleRunDetail = 10189,
        
        [EnumMember()]
        [OptionSetMetadata("QnA", Index=319, Lcid=1033, Description="Question and Answers entity")]
        QnA = 10190,
        
        [EnumMember()]
        [OptionSetMetadata("Salesforce Structured Object", Index=286, Lcid=1033, Description="Entity that represents the Salesforce Structured Object.")]
        SalesforceStructuredObject = 10191,
        
        [EnumMember()]
        [OptionSetMetadata("Salesforce Structured QnA Config", Index=287, Lcid=1033, Description="Entity that represents the Salesforce Structured QnA Config.")]
        SalesforceStructuredQnAConfig = 10192,
        
        [EnumMember()]
        [OptionSetMetadata("Workflow Action Status", Index=127, Lcid=1033, Description="PA Workflows action processing status")]
        WorkflowActionStatus = 10193,
        
        [EnumMember()]
        [OptionSetMetadata("FederatedKnowledgeConfiguration", Index=700, Lcid=1033, Description="FederatedKnowledgeConfigurations component")]
        FederatedKnowledgeConfiguration = 10194,
        
        [EnumMember()]
        [OptionSetMetadata("FederatedKnowledgeEntityConfiguration", Index=701, Lcid=1033, Description="FederatedKnowledgeEntityConfigurations component")]
        FederatedKnowledgeEntityConfiguration = 10195,
        
        [EnumMember()]
        [OptionSetMetadata("Form Mapping", Index=1042, Lcid=1033, Description="")]
        FormMapping = 10196,
        
        [EnumMember()]
        [OptionSetMetadata("PDF Setting", Index=508, Lcid=1033, Description="PDF Settings to save enabled pdf entities")]
        PDFSetting = 10197,
        
        [EnumMember()]
        [OptionSetMetadata("Activity File Attachment", Index=905, Lcid=1033, Description="Attachment entity with data stored in file type attribute")]
        ActivityFileAttachment = 10198,
        
        [EnumMember()]
        [OptionSetMetadata("Teams chat", Index=999, Lcid=1033, Description="For internal use only. Entity which stores association data of Dynamics 365 recor" +
            "ds with Microsoft Teams chat")]
        Teamschat = 10199,
        
        [EnumMember()]
        [OptionSetMetadata("Service Configuration", Index=52, Lcid=1033, Description="")]
        ServiceConfiguration = 10200,
        
        [EnumMember()]
        [OptionSetMetadata("SLA KPI", Index=82, Lcid=1033, Description="")]
        SLAKPI = 10201,
        
        [EnumMember()]
        [OptionSetMetadata("Integrated search provider", Index=1145, Lcid=1033, Description="Ingest and search files, documents, or articles from data sources outside of your" +
            " current Dynamics 365 organization with a unified ranking.")]
        Integratedsearchprovider = 10202,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge Management Setting", Index=1107, Lcid=1033, Description="Setup knowledge management for your organization.")]
        KnowledgeManagementSetting = 10203,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge Federated Article", Index=1015, Lcid=1033, Description="")]
        KnowledgeFederatedArticle = 10204,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge Federated Article Incident", Index=1022, Lcid=1033, Description="")]
        KnowledgeFederatedArticleIncident = 10205,
        
        [EnumMember()]
        [OptionSetMetadata("Search provider", Index=1119, Lcid=1033, Description="")]
        Searchprovider = 10206,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge Article Image", Index=1115, Lcid=1033, Description="")]
        KnowledgeArticleImage = 10207,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge Configuration", Index=1101, Lcid=1033, Description="Represents the possible settings used in Knowledge management")]
        KnowledgeConfiguration = 10208,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge Interaction Insight", Index=1100, Lcid=1033, Description="Knowledge Interaction Insight")]
        KnowledgeInteractionInsight = 10209,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge Search Insight", Index=1104, Lcid=1033, Description="Knowledge Search Insight")]
        KnowledgeSearchInsight = 10210,
        
        [EnumMember()]
        [OptionSetMetadata("Favorite knowledge article", Index=1014, Lcid=1033, Description="Entity for favorite knowledge articles")]
        Favoriteknowledgearticle = 10211,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge article language setting", Index=1112, Lcid=1033, Description="Allows you to select default language for knowledge authoring.")]
        Knowledgearticlelanguagesetting = 10212,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge Article Attachment", Index=1110, Lcid=1033, Description="")]
        KnowledgeArticleAttachment = 10213,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge personalization", Index=1117, Lcid=1033, Description="Allows users to personalize their knowledge search filters and knowledge authorin" +
            "g language.")]
        Knowledgepersonalization = 10214,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge Article Template", Index=1102, Lcid=1033, Description="Organizational Knowledge Article Template for Internal and external creation of K" +
            "nowledge Articles.")]
        KnowledgeArticleTemplate = 10215,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge search personal filter config", Index=1108, Lcid=1033, Description="Allows you to configure and manage personal filter settings.")]
        Knowledgesearchpersonalfilterconfig = 10216,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge search filter", Index=1106, Lcid=1033, Description="Allows you to configure and manage filter settings.")]
        Knowledgesearchfilter = 10217,
        
        [EnumMember()]
        [OptionSetMetadata("SupportUserTable", Index=477, Lcid=1033, Description="")]
        SupportUserTable = 10219,
        
        [EnumMember()]
        [OptionSetMetadata("FxExpression", Index=819, Lcid=1033, Description="")]
        FxExpression = 10220,
        
        [EnumMember()]
        [OptionSetMetadata("Function", Index=1040, Lcid=1033, Description="")]
        Function = 10221,
        
        [EnumMember()]
        [OptionSetMetadata("Plug-in", Index=543, Lcid=1033, Description="")]
        Plugin = 10222,
        
        [EnumMember()]
        [OptionSetMetadata("PowerfxRule", Index=533, Lcid=1033, Description="")]
        PowerfxRule = 10223,
        
        [EnumMember()]
        [OptionSetMetadata("Planner Business Scenario", Index=513, Lcid=1033, Description="For internal use only. The Business Scenario record to be created in Planner.")]
        PlannerBusinessScenario = 10224,
        
        [EnumMember()]
        [OptionSetMetadata("Planner Sync Action", Index=542, Lcid=1033, Description="The Planner Sync Action to be executed.")]
        PlannerSyncAction = 10225,
        
        [EnumMember()]
        [OptionSetMetadata("Ms Graph Resource To Subscription", Index=108, Lcid=1033, Description="For internal use only. The mapping between Ms Graph Resources and Subscriptions.")]
        MsGraphResourceToSubscription = 10226,
        
        [EnumMember()]
        [OptionSetMetadata("Virtual Entity  Metadata", Index=456, Lcid=1033, Description="Holds  metadata values for virtual entities")]
        VirtualEntityMetadata = 10227,
        
        [EnumMember()]
        [OptionSetMetadata("Background Operation", Index=870, Lcid=1033, Description="")]
        BackgroundOperation = 10228,
        
        [EnumMember()]
        [OptionSetMetadata("Report Parameter", Index=592, Lcid=1033, Description="")]
        ReportParameter = 10229,
        
        [EnumMember()]
        [OptionSetMetadata("MobileOfflineProfileExtension", Index=1238, Lcid=1033, Description="")]
        MobileOfflineProfileExtension = 10230,
        
        [EnumMember()]
        [OptionSetMetadata("MobileOfflineProfileItemFilter", Index=1244, Lcid=1033, Description="")]
        MobileOfflineProfileItemFilter = 10231,
        
        [EnumMember()]
        [OptionSetMetadata("TeamMobileOfflineProfileMembership", Index=497, Lcid=1033, Description="")]
        TeamMobileOfflineProfileMembership = 10232,
        
        [EnumMember()]
        [OptionSetMetadata("UserMobileOfflineProfileMembership", Index=430, Lcid=1033, Description="")]
        UserMobileOfflineProfileMembership = 10233,
        
        [EnumMember()]
        [OptionSetMetadata("OrganizationDataSyncSubscription", Index=520, Lcid=1033, Description="")]
        OrganizationDataSyncSubscription = 10234,
        
        [EnumMember()]
        [OptionSetMetadata("OrganizationDataSyncSubscriptionEntity", Index=518, Lcid=1033, Description="")]
        OrganizationDataSyncSubscriptionEntity = 10235,
        
        [EnumMember()]
        [OptionSetMetadata("OrganizationDataSyncSubscriptionFnoTable", Index=519, Lcid=1033, Description="")]
        OrganizationDataSyncSubscriptionFnoTable = 10236,
        
        [EnumMember()]
        [OptionSetMetadata("OrganizationDataSyncFnoState", Index=521, Lcid=1033, Description="Information regarding data synchronization state")]
        OrganizationDataSyncFnoState = 10237,
        
        [EnumMember()]
        [OptionSetMetadata("OrganizationDataSyncState", Index=522, Lcid=1033, Description="Information regarding data synchronization state")]
        OrganizationDataSyncState = 10238,
        
        [EnumMember()]
        [OptionSetMetadata("ArchiveCleanupInfo", Index=850, Lcid=1033, Description="This is Deprecated Entity.")]
        ArchiveCleanupInfo = 10239,
        
        [EnumMember()]
        [OptionSetMetadata("ArchiveCleanupOperation", Index=851, Lcid=1033, Description="This is Deprecated Entity.")]
        ArchiveCleanupOperation = 10240,
        
        [EnumMember()]
        [OptionSetMetadata("BulkArchiveConfig", Index=983, Lcid=1033, Description="This is Deprecated Entity.")]
        BulkArchiveConfig = 10241,
        
        [EnumMember()]
        [OptionSetMetadata("BulkArchiveFailureDetail", Index=984, Lcid=1033, Description="This is Deprecated Entity.")]
        BulkArchiveFailureDetail = 10242,
        
        [EnumMember()]
        [OptionSetMetadata("BulkArchiveOperation", Index=991, Lcid=1033, Description="This is Deprecated Entity.")]
        BulkArchiveOperation = 10243,
        
        [EnumMember()]
        [OptionSetMetadata("BulkArchiveOperationDetail", Index=992, Lcid=1033, Description="This is Deprecated Entity.")]
        BulkArchiveOperationDetail = 10244,
        
        [EnumMember()]
        [OptionSetMetadata("EnableArchivalRequest", Index=745, Lcid=1033, Description="For internal use only.")]
        EnableArchivalRequest = 10245,
        
        [EnumMember()]
        [OptionSetMetadata("MetadataForArchival", Index=783, Lcid=1033, Description="Holds  metadata values of tables for retention")]
        MetadataForArchival = 10246,
        
        [EnumMember()]
        [OptionSetMetadata("ReconciliationEntityInfo", Index=660, Lcid=1033, Description="Table level details of the data lake reconciliation process. For internal use onl" +
            "y.")]
        ReconciliationEntityInfo = 10247,
        
        [EnumMember()]
        [OptionSetMetadata("ReconciliationEntityStepInfo", Index=661, Lcid=1033, Description="Step level details of the data lake reconciliation process. For internal use only" +
            ".")]
        ReconciliationEntityStepInfo = 10248,
        
        [EnumMember()]
        [OptionSetMetadata("ReconciliationInfo", Index=606, Lcid=1033, Description="Information about data lake reconciliation operation. For internal use only.")]
        ReconciliationInfo = 10249,
        
        [EnumMember()]
        [OptionSetMetadata("RetentionCleanupInfo", Index=628, Lcid=1033, Description="Holds watermark information about retention cleanup operations. For internal use " +
            "only.")]
        RetentionCleanupInfo = 10250,
        
        [EnumMember()]
        [OptionSetMetadata("RetentionCleanupOperation", Index=626, Lcid=1033, Description="Holds data of cleanup operations such as reconcile and purge.  For internal use o" +
            "nly.")]
        RetentionCleanupOperation = 10251,
        
        [EnumMember()]
        [OptionSetMetadata("RetentionConfig", Index=624, Lcid=1033, Description="Holds retention policies for a table.")]
        RetentionConfig = 10252,
        
        [EnumMember()]
        [OptionSetMetadata("RetentionFailureDetail", Index=625, Lcid=1033, Description="Retention failure details.")]
        RetentionFailureDetail = 10253,
        
        [EnumMember()]
        [OptionSetMetadata("RetentionOperation", Index=632, Lcid=1033, Description="Retention policy execution details.")]
        RetentionOperation = 10254,
        
        [EnumMember()]
        [OptionSetMetadata("RetentionOperationDetail", Index=633, Lcid=1033, Description="Table level details of retention execution.")]
        RetentionOperationDetail = 10255,
        
        [EnumMember()]
        [OptionSetMetadata("RetentionSuccessDetail", Index=631, Lcid=1033, Description="Retention Success details.")]
        RetentionSuccessDetail = 10256,
        
        [EnumMember()]
        [OptionSetMetadata("CertificateCredential", Index=995, Lcid=1033, Description="Contains data to represent an Azure Active Directory Application used to connect " +
            "to secure web-hosted resources.")]
        CertificateCredential = 10257,
        
        [EnumMember()]
        [OptionSetMetadata("Notification", Index=846, Lcid=1033, Description="Notification to be provided to a user.")]
        Notification_2 = 10258,
        
        [EnumMember()]
        [OptionSetMetadata("User Rating", Index=458, Lcid=1033, Description="")]
        UserRating = 10259,
        
        [EnumMember()]
        [OptionSetMetadata("Mobile App", Index=1129, Lcid=1033, Description="Mobile App")]
        MobileApp = 10260,
        
        [EnumMember()]
        [OptionSetMetadata("Insights Store Data Source", Index=1090, Lcid=1033, Description="")]
        InsightsStoreDataSource = 10261,
        
        [EnumMember()]
        [OptionSetMetadata("Insights Store Virtual Entity", Index=1144, Lcid=1033, Description="Insights Store Virtual Entity")]
        InsightsStoreVirtualEntity = 10262,
        
        [EnumMember()]
        [OptionSetMetadata("RoleEditorLayout", Index=620, Lcid=1033, Description="")]
        RoleEditorLayout = 10263,
        
        [EnumMember()]
        [OptionSetMetadata("Deleted Record Reference", Index=735, Lcid=1033, Description="Deleted Record Reference")]
        DeletedRecordReference = 10264,
        
        [EnumMember()]
        [OptionSetMetadata("Restore Deleted Records Configuration", Index=604, Lcid=1033, Description="Holds Restore Deleted Records configuration for entities")]
        RestoreDeletedRecordsConfiguration = 10265,
        
        [EnumMember()]
        [OptionSetMetadata("App Action", Index=915, Lcid=1033, Description="Contains Modern Command Information")]
        AppAction = 10266,
        
        [EnumMember()]
        [OptionSetMetadata("App Action Migration", Index=913, Lcid=1033, Description="")]
        AppActionMigration = 10267,
        
        [EnumMember()]
        [OptionSetMetadata("App Action Rule", Index=914, Lcid=1033, Description="")]
        AppActionRule = 10268,
        
        [EnumMember()]
        [OptionSetMetadata("Card", Index=1012, Lcid=1033, Description="Card")]
        Card = 10271,
        
        [EnumMember()]
        [OptionSetMetadata("Card State Item", Index=1013, Lcid=1033, Description="")]
        CardStateItem = 10272,
        
        [EnumMember()]
        [OptionSetMetadata("Entity link chat configuration", Index=1034, Lcid=1033, Description="")]
        Entitylinkchatconfiguration = 10275,
        
        [EnumMember()]
        [OptionSetMetadata("AI Skill Config", Index=909, Lcid=1033, Description="")]
        AISkillConfig = 10276,
        
        [EnumMember()]
        [OptionSetMetadata("Rich Text Attachment", Index=270, Lcid=1033, Description="Image or file attached to a rich text field")]
        RichTextAttachment = 10277,
        
        [EnumMember()]
        [OptionSetMetadata("Custom Control Extended Setting", Index=1305, Lcid=1033, Description="")]
        CustomControlExtendedSetting = 10278,
        
        [EnumMember()]
        [OptionSetMetadata("Timeline Pin", Index=40, Lcid=1033, Description="Timeline Pin Record")]
        TimelinePin = 10279,
        
        [EnumMember()]
        [OptionSetMetadata("Virtual Connector Data Source", Index=1346, Lcid=1033, Description="")]
        VirtualConnectorDataSource = 10280,
        
        [EnumMember()]
        [OptionSetMetadata("Virtual Table Column Candidate", Index=142, Lcid=1033, Description="")]
        VirtualTableColumnCandidate = 10281,
        
        [EnumMember()]
        [OptionSetMetadata("PM Analysis History", Index=198, Lcid=1033, Description="")]
        PMAnalysisHistory = 10283,
        
        [EnumMember()]
        [OptionSetMetadata("PM Business Rule Automation Config", Index=199, Lcid=1033, Description="")]
        PMBusinessRuleAutomationConfig = 10284,
        
        [EnumMember()]
        [OptionSetMetadata("PM Calendar", Index=197, Lcid=1033, Description="")]
        PMCalendar = 10285,
        
        [EnumMember()]
        [OptionSetMetadata("PM Calendar Version", Index=195, Lcid=1033, Description="")]
        PMCalendarVersion = 10286,
        
        [EnumMember()]
        [OptionSetMetadata("PM Inferred Task", Index=196, Lcid=1033, Description="")]
        PMInferredTask = 10287,
        
        [EnumMember()]
        [OptionSetMetadata("PM Process Extended Metadata Version", Index=253, Lcid=1033, Description="")]
        PMProcessExtendedMetadataVersion = 10288,
        
        [EnumMember()]
        [OptionSetMetadata("PM Process Template", Index=310, Lcid=1033, Description="")]
        PMProcessTemplate = 10289,
        
        [EnumMember()]
        [OptionSetMetadata("PM Process User Settings", Index=311, Lcid=1033, Description="")]
        PMProcessUserSettings = 10290,
        
        [EnumMember()]
        [OptionSetMetadata("PM Process Version", Index=309, Lcid=1033, Description="")]
        PMProcessVersion = 10291,
        
        [EnumMember()]
        [OptionSetMetadata("PM Recording", Index=307, Lcid=1033, Description="")]
        PMRecording = 10292,
        
        [EnumMember()]
        [OptionSetMetadata("PM Simulation", Index=308, Lcid=1033, Description="")]
        PMSimulation = 10293,
        
        [EnumMember()]
        [OptionSetMetadata("PM Template", Index=315, Lcid=1033, Description="")]
        PMTemplate = 10294,
        
        [EnumMember()]
        [OptionSetMetadata("PM View", Index=316, Lcid=1033, Description="")]
        PMView = 10295,
        
        [EnumMember()]
        [OptionSetMetadata("Analysis Component", Index=1203, Lcid=1033, Description="")]
        AnalysisComponent = 10296,
        
        [EnumMember()]
        [OptionSetMetadata("Analysis Job", Index=1201, Lcid=1033, Description="")]
        AnalysisJob = 10297,
        
        [EnumMember()]
        [OptionSetMetadata("Analysis Override", Index=1199, Lcid=1033, Description="")]
        AnalysisOverride = 10298,
        
        [EnumMember()]
        [OptionSetMetadata("Analysis Result", Index=1200, Lcid=1033, Description="")]
        AnalysisResult = 10299,
        
        [EnumMember()]
        [OptionSetMetadata("Analysis Result Detail", Index=1193, Lcid=1033, Description="")]
        AnalysisResultDetail = 10300,
        
        [EnumMember()]
        [OptionSetMetadata("Solution Health Rule", Index=66, Lcid=1033, Description="")]
        SolutionHealthRule = 10301,
        
        [EnumMember()]
        [OptionSetMetadata("Solution Health Rule Argument", Index=67, Lcid=1033, Description="")]
        SolutionHealthRuleArgument = 10302,
        
        [EnumMember()]
        [OptionSetMetadata("Solution Health Rule Set", Index=65, Lcid=1033, Description="Represents a set that owns a number of solution health rules.")]
        SolutionHealthRuleSet = 10303,
        
        [EnumMember()]
        [OptionSetMetadata("Power BI Dataset", Index=528, Lcid=1033, Description="")]
        PowerBIDataset = 10304,
        
        [EnumMember()]
        [OptionSetMetadata("powerbidatasetapdx", Index=529, Lcid=1033, Description="PowerBI Dataset appendix entity - for unmanaged technical attributes")]
        powerbidatasetapdx = 10305,
        
        [EnumMember()]
        [OptionSetMetadata("Power BI Mashup Parameter", Index=536, Lcid=1033, Description="")]
        PowerBIMashupParameter = 10306,
        
        [EnumMember()]
        [OptionSetMetadata("Power BI Report", Index=537, Lcid=1033, Description="")]
        PowerBIReport = 10307,
        
        [EnumMember()]
        [OptionSetMetadata("powerbireportapdx", Index=535, Lcid=1033, Description="PowerBI Report appendix entity for unmanaged technical attributes")]
        powerbireportapdx = 10308,
        
        [EnumMember()]
        [OptionSetMetadata("File Upload", Index=1023, Lcid=1033, Description="")]
        FileUpload = 10309,
        
        [EnumMember()]
        [OptionSetMetadata("MainFewShot", Index=798, Lcid=1033, Description="This fewshot entity will only be updated during solution installation.")]
        MainFewShot = 10310,
        
        [EnumMember()]
        [OptionSetMetadata("MakerFewShot", Index=799, Lcid=1033, Description="This fewshot is updated by maker for testing the queries and by the NL2SQ with th" +
            "e results")]
        MakerFewShot = 10311,
        
        [EnumMember()]
        [OptionSetMetadata("SearchAttributeSettings", Index=414, Lcid=1033, Description="")]
        SearchAttributeSettings = 10312,
        
        [EnumMember()]
        [OptionSetMetadata("SearchCustomAnalyzer", Index=412, Lcid=1033, Description="")]
        SearchCustomAnalyzer = 10313,
        
        [EnumMember()]
        [OptionSetMetadata("SearchRelationshipSettings", Index=413, Lcid=1033, Description="")]
        SearchRelationshipSettings = 10314,
        
        [EnumMember()]
        [OptionSetMetadata("SearchResultsCache", Index=420, Lcid=1033, Description="Cache search results internally")]
        SearchResultsCache = 10315,
        
        [EnumMember()]
        [OptionSetMetadata("Search Telemetry", Index=421, Lcid=1033, Description="Entity to log telemetry that used to improve search quality")]
        SearchTelemetry = 10316,
        
        [EnumMember()]
        [OptionSetMetadata("ViewAsExampleQuestion", Index=455, Lcid=1033, Description="This fewshot is converted by view")]
        ViewAsExampleQuestion = 10317,
        
        [EnumMember()]
        [OptionSetMetadata("CopilotExampleQuestion", Index=961, Lcid=1033, Description="CopilotExampleQuestions Component")]
        CopilotExampleQuestion = 10318,
        
        [EnumMember()]
        [OptionSetMetadata("CopilotGlossaryTerm", Index=954, Lcid=1033, Description="CopilotGlossaryTerm Component")]
        CopilotGlossaryTerm = 10319,
        
        [EnumMember()]
        [OptionSetMetadata("CopilotSynonyms", Index=955, Lcid=1033, Description="CopilotSynonyms Component")]
        CopilotSynonyms = 10320,
        
        [EnumMember()]
        [OptionSetMetadata("Site Component", Index=534, Lcid=1033, Description="")]
        SiteComponent = 10321,
        
        [EnumMember()]
        [OptionSetMetadata("Site", Index=591, Lcid=1033, Description="")]
        Site_2 = 10322,
        
        [EnumMember()]
        [OptionSetMetadata("Site Language", Index=648, Lcid=1033, Description="")]
        SiteLanguage = 10323,
        
        [EnumMember()]
        [OptionSetMetadata("Power Pages Site Published", Index=649, Lcid=1033, Description="")]
        PowerPagesSitePublished = 10324,
        
        [EnumMember()]
        [OptionSetMetadata("External Identity", Index=887, Lcid=1033, Description="")]
        ExternalIdentity = 10327,
        
        [EnumMember()]
        [OptionSetMetadata("Invitation", Index=888, Lcid=1033, Description="Send invitations to existing contacts or email addresses and assign them to web r" +
            "oles upon redemption.")]
        Invitation = 10328,
        
        [EnumMember()]
        [OptionSetMetadata("Invite Redemption", Index=895, Lcid=1033, Description="Holds information about the redemption of an invite.")]
        InviteRedemption = 10329,
        
        [EnumMember()]
        [OptionSetMetadata("Portal Comment", Index=896, Lcid=1033, Description="An activity which is used to share information between the user and the customer " +
            "on the portal.")]
        PortalComment = 10330,
        
        [EnumMember()]
        [OptionSetMetadata("Setting", Index=894, Lcid=1033, Description="")]
        Setting = 10331,
        
        [EnumMember()]
        [OptionSetMetadata("Multistep Form Session", Index=892, Lcid=1033, Description="Serves as a mechanism to log the occurrence of an incomplete multistep form entry" +
            " for a given user so they can return and complete it later.")]
        MultistepFormSession = 10332,
        
        [EnumMember()]
        [OptionSetMetadata("Ad Placement", Index=114, Lcid=1033, Description="")]
        AdPlacement = 10336,
        
        [EnumMember()]
        [OptionSetMetadata("Column Permission", Index=115, Lcid=1033, Description="")]
        ColumnPermission = 10337,
        
        [EnumMember()]
        [OptionSetMetadata("Column Permission Profile", Index=113, Lcid=1033, Description="")]
        ColumnPermissionProfile = 10338,
        
        [EnumMember()]
        [OptionSetMetadata("Content Snippet", Index=111, Lcid=1033, Description="Content snippets are inserted in page templates so that any label, text string or" +
            " image in the template can be content-managed.")]
        ContentSnippet = 10339,
        
        [EnumMember()]
        [OptionSetMetadata("Basic Form", Index=112, Lcid=1033, Description="Defines the form to render for a given entity type.")]
        BasicForm = 10340,
        
        [EnumMember()]
        [OptionSetMetadata("Basic Form Metadata", Index=563, Lcid=1033, Description="Defines the additional behavior modification logic to augment or override the fun" +
            "ctionality of form components that is not possible with Dynamics 365 entity and " +
            "form metadata.")]
        BasicFormMetadata = 10341,
        
        [EnumMember()]
        [OptionSetMetadata("List", Index=564, Lcid=1033, Description="")]
        List = 10342,
        
        [EnumMember()]
        [OptionSetMetadata("Table Permission", Index=562, Lcid=1033, Description="")]
        TablePermission = 10343,
        
        [EnumMember()]
        [OptionSetMetadata("Page Template", Index=560, Lcid=1033, Description="URL of the .aspx page used to create new webpages.")]
        PageTemplate = 10344,
        
        [EnumMember()]
        [OptionSetMetadata("Poll Placement", Index=561, Lcid=1033, Description="")]
        PollPlacement = 10345,
        
        [EnumMember()]
        [OptionSetMetadata("Power Pages Core Entity DS", Index=568, Lcid=1033, Description="")]
        PowerPagesCoreEntityDS = 10346,
        
        [EnumMember()]
        [OptionSetMetadata("Publishing State", Index=569, Lcid=1033, Description="")]
        PublishingState = 10347,
        
        [EnumMember()]
        [OptionSetMetadata("Publishing State Transition Rule", Index=567, Lcid=1033, Description="")]
        PublishingStateTransitionRule = 10348,
        
        [EnumMember()]
        [OptionSetMetadata("Redirect", Index=565, Lcid=1033, Description="")]
        Redirect = 10349,
        
        [EnumMember()]
        [OptionSetMetadata("Shortcut", Index=566, Lcid=1033, Description="")]
        Shortcut = 10350,
        
        [EnumMember()]
        [OptionSetMetadata("Site Marker", Index=559, Lcid=1033, Description="Used by web page templates to locate a specific page of content.")]
        SiteMarker = 10351,
        
        [EnumMember()]
        [OptionSetMetadata("Site Setting", Index=552, Lcid=1033, Description="Site specific settings or variables refferenced by the web site code files.")]
        SiteSetting = 10352,
        
        [EnumMember()]
        [OptionSetMetadata("Web File", Index=553, Lcid=1033, Description="Storage of files used in the web Portals.")]
        WebFile = 10353,
        
        [EnumMember()]
        [OptionSetMetadata("Multistep Form", Index=551, Lcid=1033, Description="Defines the necessary properties and relationships to the other key entities in o" +
            "rder to control the initialization of the form within a web portal.")]
        MultistepForm = 10354,
        
        [EnumMember()]
        [OptionSetMetadata("Multistep Form Metadata", Index=549, Lcid=1033, Description="Defines the additional behavior modification logic to augment or override the fun" +
            "ctionality of form fields that is not possible with Dynamics 365 entity and form" +
            " metadata.")]
        MultistepFormMetadata = 10355,
        
        [EnumMember()]
        [OptionSetMetadata("Form Step", Index=550, Lcid=1033, Description="Defines the flow logic of the form\'s user experience such as steps and conditiona" +
            "l branching.")]
        FormStep = 10356,
        
        [EnumMember()]
        [OptionSetMetadata("Web Link", Index=557, Lcid=1033, Description="A textual or imaged based link to an interal or external URL.")]
        WebLink = 10357,
        
        [EnumMember()]
        [OptionSetMetadata("Web Link Set", Index=558, Lcid=1033, Description="A grouping of web links.")]
        WebLinkSet = 10358,
        
        [EnumMember()]
        [OptionSetMetadata("Web Page", Index=556, Lcid=1033, Description="Web Page")]
        WebPage = 10359,
        
        [EnumMember()]
        [OptionSetMetadata("Web Page Access Control Rule", Index=554, Lcid=1033, Description="")]
        WebPageAccessControlRule = 10360,
        
        [EnumMember()]
        [OptionSetMetadata("Web Role", Index=555, Lcid=1033, Description="Sets the user\'s role for the Portal.")]
        WebRole = 10361,
        
        [EnumMember()]
        [OptionSetMetadata("Website", Index=584, Lcid=1033, Description="Web Portal")]
        Website = 10362,
        
        [EnumMember()]
        [OptionSetMetadata("Website Access", Index=585, Lcid=1033, Description="")]
        WebsiteAccess = 10363,
        
        [EnumMember()]
        [OptionSetMetadata("Website Language", Index=583, Lcid=1033, Description="Languages supported and publishing status for the portal")]
        WebsiteLanguage = 10364,
        
        [EnumMember()]
        [OptionSetMetadata("Web Template", Index=581, Lcid=1033, Description="")]
        WebTemplate = 10365,
        
        [EnumMember()]
        [OptionSetMetadata("Power Pages Scan Report", Index=646, Lcid=1033, Description="Power Pages Scan Report")]
        PowerPagesScanReport = 10372,
        
        [EnumMember()]
        [OptionSetMetadata("Power Pages Log", Index=647, Lcid=1033, Description="")]
        PowerPagesLog = 10373,
        
        [EnumMember()]
        [OptionSetMetadata("PowerPagesManagedIdentity", Index=645, Lcid=1033, Description="")]
        PowerPagesManagedIdentity = 10374,
        
        [EnumMember()]
        [OptionSetMetadata("Power Pages Site AI Feedback", Index=653, Lcid=1033, Description="")]
        PowerPagesSiteAIFeedback = 10375,
        
        [EnumMember()]
        [OptionSetMetadata("Catalog Submission Files", Index=106, Lcid=1033, Description="Files associated with the package that will be used as part of the submission to " +
            "the catalog system.")]
        CatalogSubmissionFiles = 10380,
        
        [EnumMember()]
        [OptionSetMetadata("Package Submission Store", Index=107, Lcid=1033, Description="Manages submissions to the Catalog and provisioning")]
        PackageSubmissionStore = 10381,
        
        [EnumMember()]
        [OptionSetMetadata("signal", Index=358, Lcid=1033, Description="")]
        signal = 10382,
        
        [EnumMember()]
        [OptionSetMetadata("trait", Index=436, Lcid=1033, Description="")]
        trait = 10383,
        
        [EnumMember()]
        [OptionSetMetadata("List Operation", Index=796, Lcid=1033, Description="System operation used to perform lengthy and asynchronous list operations on larg" +
            "e data sets, such as adding members to a list.")]
        ListOperation = 10384,
        
        [EnumMember()]
        [OptionSetMetadata("Marketing Form Display Attributes", Index=786, Lcid=1033, Description="Setting to allow customized form for In-app Marketing Form")]
        MarketingFormDisplayAttributes = 10385,
        
        [EnumMember()]
        [OptionSetMetadata("Database Version", Index=1057, Lcid=1033, Description="Stores the latest database version for a solution, for internal use only.")]
        DatabaseVersion = 10386,
        
        [EnumMember()]
        [OptionSetMetadata("Upgrade Run", Index=22, Lcid=1033, Description="Contains logging information about a run of a Package Deployer package that upgra" +
            "des a solution")]
        UpgradeRun = 10387,
        
        [EnumMember()]
        [OptionSetMetadata("Upgrade Step", Index=29, Lcid=1033, Description="One step during an upgrade, such as a single method or stored procedure.")]
        UpgradeStep = 10388,
        
        [EnumMember()]
        [OptionSetMetadata("Upgrade Version", Index=30, Lcid=1033, Description="Information about upgrading from one release to the next release")]
        UpgradeVersion = 10389,
        
        [EnumMember()]
        [OptionSetMetadata("Activity monitor", Index=904, Lcid=1033, Description="Entity that tracks ARC runtime information.")]
        Activitymonitor = 10390,
        
        [EnumMember()]
        [OptionSetMetadata("Originating Queue Mapping", Index=204, Lcid=1033, Description="This entity maps entities created by ARC to the queue that was being procesed at " +
            "that time")]
        OriginatingQueueMapping = 10391,
        
        [EnumMember()]
        [OptionSetMetadata("Unified Routing Setup Tracker", Index=23, Lcid=1033, Description="Unified Routing Setup Trackers")]
        UnifiedRoutingSetupTracker = 10392,
        
        [EnumMember()]
        [OptionSetMetadata("Available Times", Index=883, Lcid=1033, Description="")]
        AvailableTimes = 10393,
        
        [EnumMember()]
        [OptionSetMetadata("Available Times Data Source", Index=876, Lcid=1033, Description="")]
        AvailableTimesDataSource = 10394,
        
        [EnumMember()]
        [OptionSetMetadata("resource group data source", Index=599, Lcid=1033, Description="")]
        resourcegroupdatasource = 10395,
        
        [EnumMember()]
        [OptionSetMetadata("Virtual Resource Group Resource", Index=463, Lcid=1033, Description="")]
        VirtualResourceGroupResource = 10396,
        
        [EnumMember()]
        [OptionSetMetadata("Migration tracker", Index=1128, Lcid=1033, Description="Entity that tracks the migration process of legacy to modern SLA/ARC items")]
        Migrationtracker = 10397,
        
        [EnumMember()]
        [OptionSetMetadata("Asset Category Template Association", Index=1218, Lcid=1033, Description="")]
        AssetCategoryTemplateAssociation = 10398,
        
        [EnumMember()]
        [OptionSetMetadata("Asset Template Association", Index=1219, Lcid=1033, Description="")]
        AssetTemplateAssociation = 10399,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Asset", Index=1306, Lcid=1033, Description="Specify Customer Asset.")]
        CustomerAsset = 10400,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Asset Attachment", Index=1299, Lcid=1033, Description="Attachments for Customer Asset")]
        CustomerAssetAttachment = 10403,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Asset Category", Index=1292, Lcid=1033, Description="The Category of Customer Asset.")]
        CustomerAssetCategory = 10404,
        
        [EnumMember()]
        [OptionSetMetadata("Functional Location", Index=1041, Lcid=1033, Description="")]
        FunctionalLocation = 10405,
        
        [EnumMember()]
        [OptionSetMetadata("Functional Location Type", Index=1098, Lcid=1033, Description="")]
        FunctionalLocationType = 10406,
        
        [EnumMember()]
        [OptionSetMetadata("Location Template Association", Index=1130, Lcid=1033, Description="Captures the relationship between a Property Template, which in turns captures a " +
            "set of Properties, and a Functional Location.")]
        LocationTemplateAssociation = 10407,
        
        [EnumMember()]
        [OptionSetMetadata("Functional Location Type Template Association", Index=1123, Lcid=1033, Description="")]
        FunctionalLocationTypeTemplateAssociation = 10408,
        
        [EnumMember()]
        [OptionSetMetadata("Property Definition", Index=335, Lcid=1033, Description="")]
        PropertyDefinition = 10409,
        
        [EnumMember()]
        [OptionSetMetadata("Property Asset Association", Index=333, Lcid=1033, Description="")]
        PropertyAssetAssociation = 10410,
        
        [EnumMember()]
        [OptionSetMetadata("Property Location Association", Index=334, Lcid=1033, Description="Captures the relationship between a Property and a Functional Location.")]
        PropertyLocationAssociation = 10411,
        
        [EnumMember()]
        [OptionSetMetadata("Property Log", Index=327, Lcid=1033, Description="")]
        PropertyLog = 10412,
        
        [EnumMember()]
        [OptionSetMetadata("Property Template Association", Index=320, Lcid=1033, Description="")]
        PropertyTemplateAssociation = 10413,
        
        [EnumMember()]
        [OptionSetMetadata("Template For Properties", Index=36, Lcid=1033, Description="")]
        TemplateForProperties = 10414,
        
        [EnumMember()]
        [OptionSetMetadata("Warranty", Index=137, Lcid=1033, Description="")]
        Warranty = 10415,
        
        [EnumMember()]
        [OptionSetMetadata("IoT Alert", Index=1178, Lcid=1033, Description="")]
        IoTAlert = 10422,
        
        [EnumMember()]
        [OptionSetMetadata("IoT Device", Index=1179, Lcid=1033, Description="Represents a connected device that can be registered with an IoT provider.")]
        IoTDevice = 10423,
        
        [EnumMember()]
        [OptionSetMetadata("IoT Device Category", Index=1172, Lcid=1033, Description="Used to categorize IoT devices.")]
        IoTDeviceCategory = 10424,
        
        [EnumMember()]
        [OptionSetMetadata("IoT Device Command", Index=1165, Lcid=1033, Description="Represents an outgoing message to a device connected to an IoT provider.")]
        IoTDeviceCommand = 10425,
        
        [EnumMember()]
        [OptionSetMetadata("IoT Device Command Definition", Index=1166, Lcid=1033, Description="Metadata for commands that a device or a device category supports.")]
        IoTDeviceCommandDefinition = 10426,
        
        [EnumMember()]
        [OptionSetMetadata("IoT Device Data History", Index=1164, Lcid=1033, Description="The name of the entity that holds the device data every time a device data pull o" +
            "ccurs between Dynamics 365 and an IoT provider")]
        IoTDeviceDataHistory = 10427,
        
        [EnumMember()]
        [OptionSetMetadata("IoT Device Property", Index=1162, Lcid=1033, Description="Link entity between IoT Device Category and IoT Property Definition. This is used" +
            " to model properties and tags for devices.")]
        IoTDeviceProperty = 10428,
        
        [EnumMember()]
        [OptionSetMetadata("IoT Device Registration History", Index=1163, Lcid=1033, Description="Tracks registration activities on an IoT device.")]
        IoTDeviceRegistrationHistory = 10429,
        
        [EnumMember()]
        [OptionSetMetadata("IoT Device Visualization Configuration", Index=1170, Lcid=1033, Description="IoT Device Visualization Configuration")]
        IoTDeviceVisualizationConfiguration = 10430,
        
        [EnumMember()]
        [OptionSetMetadata("IoT Field Mapping", Index=1171, Lcid=1033, Description="")]
        IoTFieldMapping = 10431,
        
        [EnumMember()]
        [OptionSetMetadata("IoT Property Definition", Index=1169, Lcid=1033, Description="Defines a device property or a parameter that can be used for one or more command" +
            " definitions.")]
        IoTPropertyDefinition = 10432,
        
        [EnumMember()]
        [OptionSetMetadata("IoT Provider", Index=1167, Lcid=1033, Description="The IoT Provider where a device is registered and through which all interactions " +
            "with the device take place")]
        IoTProvider = 10433,
        
        [EnumMember()]
        [OptionSetMetadata("IoT Provider Instance", Index=1168, Lcid=1033, Description="An instance of an IoT Provider.")]
        IoTProviderInstance = 10434,
        
        [EnumMember()]
        [OptionSetMetadata("IoT Settings", Index=1113, Lcid=1033, Description="")]
        IoTSettings = 10435,
        
        [EnumMember()]
        [OptionSetMetadata("IoT Alert to Case Process", Index=1114, Lcid=1033, Description="Base entity for process IoT to Case Process")]
        IoTAlerttoCaseProcess = 10438,
        
        [EnumMember()]
        [OptionSetMetadata("Playbook Callable Context", Index=1212, Lcid=1033, Description="")]
        PlaybookCallableContext = 10440,
        
        [EnumMember()]
        [OptionSetMetadata("Playbook activity", Index=193, Lcid=1033, Description="Stores the details of the activities to be created when a playbook is launched.")]
        Playbookactivity = 10441,
        
        [EnumMember()]
        [OptionSetMetadata("Playbook activity attribute", Index=194, Lcid=1033, Description="Stores attribute names and values of the playbook activity.")]
        Playbookactivityattribute = 10442,
        
        [EnumMember()]
        [OptionSetMetadata("[DEPRECATED] Playbook category", Index=192, Lcid=1033, Description="List of categories for which a playbook can be created.")]
        DEPRECATEDPlaybookcategory = 10443,
        
        [EnumMember()]
        [OptionSetMetadata("Playbook", Index=190, Lcid=1033, Description="Actual instance of a playbook template once it is launched.")]
        Playbook = 10444,
        
        [EnumMember()]
        [OptionSetMetadata("[DEPRECATED] Playbook template", Index=191, Lcid=1033, Description="Playbook templates contains the definition of the Playbook that helps to standard" +
            "ize a set of best practices or next best actions.")]
        DEPRECATEDPlaybooktemplate = 10445,
        
        [EnumMember()]
        [OptionSetMetadata("admin_settings_entity", Index=891, Lcid=1033, Description="")]
        admin_settings_entity = 10447,
        
        [EnumMember()]
        [OptionSetMetadata("Collab Space Team Association", Index=1315, Lcid=1033, Description="Collab Space Team Association")]
        CollabSpaceTeamAssociation = 10448,
        
        [EnumMember()]
        [OptionSetMetadata("CRM Connection", Index=1301, Lcid=1033, Description="")]
        CRMConnection = 10449,
        
        [EnumMember()]
        [OptionSetMetadata("External CRM", Index=1018, Lcid=1033, Description="External CRM - Copilot for Sales")]
        ExternalCRM = 10450,
        
        [EnumMember()]
        [OptionSetMetadata("External Record", Index=1016, Lcid=1033, Description="External Record - Copilot for Sales")]
        ExternalRecord = 10451,
        
        [EnumMember()]
        [OptionSetMetadata("Tagged Record", Index=9, Lcid=1033, Description="Tagged Record - Copilot for Sales")]
        TaggedRecord = 10452,
        
        [EnumMember()]
        [OptionSetMetadata("Copilot for Sales customer list", Index=138, Lcid=1033, Description="")]
        CopilotforSalescustomerlist = 10453,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_vivaentitysetting", Index=139, Lcid=1033, Description="Entity level settings for Copilot for Sales")]
        msdyn_vivaentitysetting = 10454,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_vivaorgextensioncred", Index=146, Lcid=1033, Description="Org level extension credential for Viva apps")]
        msdyn_vivaorgextensioncred = 10455,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_vivaorgsetting", Index=147, Lcid=1033, Description="Org level settings for Copilot for Sales app")]
        msdyn_vivaorgsetting = 10456,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_vivausersetting", Index=145, Lcid=1033, Description="User level settings for Copilot for Sales")]
        msdyn_vivausersetting = 10457,
        
        [EnumMember()]
        [OptionSetMetadata("Sales Copilot Insight", Index=260, Lcid=1033, Description="")]
        SalesCopilotInsight = 10458,
        
        [EnumMember()]
        [OptionSetMetadata("Org level settings for Sales Copilot apps", Index=290, Lcid=1033, Description="Org level settings for Sales Copilot apps")]
        OrglevelsettingsforSalesCopilotapps = 10459,
        
        [EnumMember()]
        [OptionSetMetadata("Sales Copilot User Setting", Index=288, Lcid=1033, Description="")]
        SalesCopilotUserSetting = 10460,
        
        [EnumMember()]
        [OptionSetMetadata("App profile", Index=1183, Lcid=1033, Description="")]
        Appprofile = 10461,
        
        [EnumMember()]
        [OptionSetMetadata("Application Extension", Index=1192, Lcid=1033, Description="")]
        ApplicationExtension = 10462,
        
        [EnumMember()]
        [OptionSetMetadata("Application Tab Template", Index=1190, Lcid=1033, Description="")]
        ApplicationTabTemplate = 10463,
        
        [EnumMember()]
        [OptionSetMetadata("App profile role mapping", Index=1188, Lcid=1033, Description="")]
        Appprofilerolemapping = 10464,
        
        [EnumMember()]
        [OptionSetMetadata("Notification Field", Index=231, Lcid=1033, Description="")]
        NotificationField = 10465,
        
        [EnumMember()]
        [OptionSetMetadata("Notification Template", Index=229, Lcid=1033, Description="")]
        NotificationTemplate = 10466,
        
        [EnumMember()]
        [OptionSetMetadata("Session Template", Index=47, Lcid=1033, Description="")]
        SessionTemplate = 10467,
        
        [EnumMember()]
        [OptionSetMetadata("Template Parameter", Index=34, Lcid=1033, Description="")]
        TemplateParameter = 10468,
        
        [EnumMember()]
        [OptionSetMetadata("Channel Integration Framework v1.0 Provider", Index=1319, Lcid=1033, Description="Entity that holds the configuration data for a channel provider based on Channel " +
            "Integration Framework v1.0")]
        ChannelIntegrationFrameworkv10Provider = 10474,
        
        [EnumMember()]
        [OptionSetMetadata("Notification Field (Deprecated)", Index=1344, Lcid=1033, Description="Defines a field (key, templateValue) that needs to be populated in the notificati" +
            "on body.")]
        NotificationFieldDeprecated = 10475,
        
        [EnumMember()]
        [OptionSetMetadata("Notification Template (Deprecated)", Index=1342, Lcid=1033, Description="Template for a notification")]
        NotificationTemplateDeprecated = 10476,
        
        [EnumMember()]
        [OptionSetMetadata("App Parameter Definition (Deprecated)", Index=1347, Lcid=1033, Description="")]
        AppParameterDefinitionDeprecated = 10477,
        
        [EnumMember()]
        [OptionSetMetadata("Session Templates (Deprecated)", Index=1343, Lcid=1033, Description="")]
        SessionTemplatesDeprecated = 10478,
        
        [EnumMember()]
        [OptionSetMetadata("Application Tab Template (Deprecated)", Index=1350, Lcid=1033, Description="An application tab template with various template parameters defined.")]
        ApplicationTabTemplateDeprecated = 10479,
        
        [EnumMember()]
        [OptionSetMetadata("Parameter (Deprecated)", Index=1351, Lcid=1033, Description="Template parameter values for a given application template")]
        ParameterDeprecated = 10480,
        
        [EnumMember()]
        [OptionSetMetadata("Template Tag (Deprecated)", Index=33, Lcid=1033, Description="Tags associated with templates. Templates are discovered via tags")]
        TemplateTagDeprecated = 10481,
        
        [EnumMember()]
        [OptionSetMetadata("Application Type (Deprecated)", Index=1349, Lcid=1033, Description="Define a UCI pagetype. For each pagetype, define the parameters that need to be a" +
            " part of the template for this application type")]
        ApplicationTypeDeprecated = 10482,
        
        [EnumMember()]
        [OptionSetMetadata("Channel Integration Framework v2.0 Provider", Index=1318, Lcid=1033, Description="Entity that holds the configuration data for a third-party voice channel provider" +
            " based on Channel Integration Framework v2.0")]
        ChannelIntegrationFrameworkv20Provider = 10491,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Data (Deprecated)", Index=1338, Lcid=1033, Description="Primary entity for a conversation")]
        ConversationDataDeprecated = 10493,
        
        [EnumMember()]
        [OptionSetMetadata("KPI Event Data", Index=1105, Lcid=1033, Description="Primary entity for a kpi event")]
        KPIEventData = 10494,
        
        [EnumMember()]
        [OptionSetMetadata("KPI Event Definition", Index=1134, Lcid=1033, Description="Primary entity for defining a KPI event")]
        KPIEventDefinition = 10495,
        
        [EnumMember()]
        [OptionSetMetadata("Session Data (Deprecated)", Index=43, Lcid=1033, Description="Primary entity for session data")]
        SessionDataDeprecated = 10496,
        
        [EnumMember()]
        [OptionSetMetadata("Session Participant Data (Deprecated)", Index=49, Lcid=1033, Description="")]
        SessionParticipantDataDeprecated = 10497,
        
        [EnumMember()]
        [OptionSetMetadata("Channel Definition", Index=1326, Lcid=1033, Description="Stores details about a channel definition.")]
        ChannelDefinition = 10498,
        
        [EnumMember()]
        [OptionSetMetadata("Channel Definition Consent", Index=1327, Lcid=1033, Description="")]
        ChannelDefinitionConsent = 10499,
        
        [EnumMember()]
        [OptionSetMetadata("Channel Definition Locale", Index=1320, Lcid=1033, Description="")]
        ChannelDefinitionLocale = 10500,
        
        [EnumMember()]
        [OptionSetMetadata("Channel Instance", Index=1313, Lcid=1033, Description="")]
        ChannelInstance = 10501,
        
        [EnumMember()]
        [OptionSetMetadata("Channel Instance Account", Index=1314, Lcid=1033, Description="")]
        ChannelInstanceAccount = 10502,
        
        [EnumMember()]
        [OptionSetMetadata("Channel Message Attachment", Index=1312, Lcid=1033, Description="")]
        ChannelMessageAttachment = 10503,
        
        [EnumMember()]
        [OptionSetMetadata("Channel Message Context Part", Index=1310, Lcid=1033, Description="Context about channel message")]
        ChannelMessageContextPart = 10504,
        
        [EnumMember()]
        [OptionSetMetadata("Channel Message Part", Index=1311, Lcid=1033, Description="")]
        ChannelMessagePart = 10505,
        
        [EnumMember()]
        [OptionSetMetadata("Consuming Application", Index=1348, Lcid=1033, Description="Consuming Application that use Unified Channel")]
        ConsumingApplication = 10506,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_DefExtendedChannelInstance", Index=1095, Lcid=1033, Description="")]
        msdyn_DefExtendedChannelInstance = 10507,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_DefExtendedChannelInstanceAccount", Index=1093, Lcid=1033, Description="")]
        msdyn_DefExtendedChannelInstanceAccount = 10508,
        
        [EnumMember()]
        [OptionSetMetadata("Productivity pane configuration", Index=203, Lcid=1033, Description="")]
        Productivitypaneconfiguration = 10509,
        
        [EnumMember()]
        [OptionSetMetadata("Pane tab configuration", Index=201, Lcid=1033, Description="")]
        Panetabconfiguration = 10510,
        
        [EnumMember()]
        [OptionSetMetadata("Pane tool configuration", Index=202, Lcid=1033, Description="")]
        Panetoolconfiguration = 10511,
        
        [EnumMember()]
        [OptionSetMetadata("Agent script", Index=332, Lcid=1033, Description="Agent script v2")]
        Agentscript = 10513,
        
        [EnumMember()]
        [OptionSetMetadata("Agent script step", Index=330, Lcid=1033, Description="")]
        Agentscriptstep = 10514,
        
        [EnumMember()]
        [OptionSetMetadata("Action Input Parameter", Index=302, Lcid=1033, Description="Attributes of action input parameters")]
        ActionInputParameter = 10516,
        
        [EnumMember()]
        [OptionSetMetadata("Action Output Parameter", Index=331, Lcid=1033, Description="Attributes of action output parameters")]
        ActionOutputParameter = 10517,
        
        [EnumMember()]
        [OptionSetMetadata("Macro Action Template", Index=328, Lcid=1033, Description="Attributes for macro action template")]
        MacroActionTemplate = 10518,
        
        [EnumMember()]
        [OptionSetMetadata("Macro Solution Configuration", Index=336, Lcid=1033, Description="Macro solution related configurations")]
        MacroSolutionConfiguration = 10519,
        
        [EnumMember()]
        [OptionSetMetadata("Macro Connector", Index=329, Lcid=1033, Description="Attributes for macro connectors")]
        MacroConnector = 10520,
        
        [EnumMember()]
        [OptionSetMetadata("Macro Run History", Index=1122, Lcid=1033, Description="Stores history of macro runs")]
        MacroRunHistory = 10521,
        
        [EnumMember()]
        [OptionSetMetadata("Parameter definition", Index=337, Lcid=1033, Description="Macro parameter definitions")]
        Parameterdefinition = 10522,
        
        [EnumMember()]
        [OptionSetMetadata("Adaptive Card Configuration", Index=1226, Lcid=1033, Description="Adaptive Card Configuration")]
        AdaptiveCardConfiguration = 10525,
        
        [EnumMember()]
        [OptionSetMetadata("Smartassist configuration", Index=83, Lcid=1033, Description="Stores Smartassist configurations")]
        Smartassistconfiguration = 10526,
        
        [EnumMember()]
        [OptionSetMetadata("Read Tracker", Index=325, Lcid=1033, Description="Keeps track of the records read by an user in the system")]
        ReadTracker = 10528,
        
        [EnumMember()]
        [OptionSetMetadata("Read tracking enabled information", Index=326, Lcid=1033, Description="")]
        Readtrackingenabledinformation = 10529,
        
        [EnumMember()]
        [OptionSetMetadata("Microsoft Teams Graph resource Entity", Index=1317, Lcid=1033, Description="Entity which stores collaboration data of Dynamics 365 with Microsoft Teams")]
        MicrosoftTeamsGraphresourceEntity = 10530,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_msteamssetting", Index=226, Lcid=1033, Description="")]
        msdyn_msteamssetting = 10531,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_msteamssettingsv2", Index=224, Lcid=1033, Description="")]
        msdyn_msteamssettingsv2 = 10532,
        
        [EnumMember()]
        [OptionSetMetadata("Microsoft Teams Collaboration entity", Index=6, Lcid=1033, Description="Entity which stores collaboration data of Dynamics 365 with Microsoft Teams")]
        MicrosoftTeamsCollaborationentity = 10533,
        
        [EnumMember()]
        [OptionSetMetadata("Teams Dialer Admin settings", Index=35, Lcid=1033, Description="")]
        TeamsDialerAdminsettings = 10534,
        
        [EnumMember()]
        [OptionSetMetadata("Teams Contact Suggestion by AI", Index=1253, Lcid=1033, Description="")]
        TeamsContactSuggestionbyAI = 10535,
        
        [EnumMember()]
        [OptionSetMetadata("Contact suggestion rule", Index=1334, Lcid=1033, Description="")]
        Contactsuggestionrule = 10536,
        
        [EnumMember()]
        [OptionSetMetadata("Contact suggestion ruleset", Index=1335, Lcid=1033, Description="")]
        Contactsuggestionruleset = 10537,
        
        [EnumMember()]
        [OptionSetMetadata("Microsoft Teams chat association entity", Index=7, Lcid=1033, Description="For internal use only. Entity which stores association data of Dynamics 365 recor" +
            "ds with Microsoft Teams chat")]
        MicrosoftTeamschatassociationentity = 10538,
        
        [EnumMember()]
        [OptionSetMetadata("Microsoft Teams chat suggestion", Index=5, Lcid=1033, Description="For internal use only")]
        MicrosoftTeamschatsuggestion = 10539,
        
        [EnumMember()]
        [OptionSetMetadata("Microsoft Orgchart node entity", Index=175, Lcid=1033, Description="For internal use only. Entity which stores association data of account with conta" +
            "cts present in the orgchart hierarchy of the account")]
        MicrosoftOrgchartnodeentity = 10540,
        
        [EnumMember()]
        [OptionSetMetadata("Forecast Manual Adjustment History", Index=1233, Lcid=1033, Description="Forecast Manual Adjustment History")]
        ForecastManualAdjustmentHistory = 10541,
        
        [EnumMember()]
        [OptionSetMetadata("Distributed Lock", Index=1079, Lcid=1033, Description="Distributed Locks")]
        DistributedLock = 10542,
        
        [EnumMember()]
        [OptionSetMetadata("Entity Delta Change", Index=1026, Lcid=1033, Description="Entity Delta Changes")]
        EntityDeltaChange = 10543,
        
        [EnumMember()]
        [OptionSetMetadata("File Upload Status Tracker", Index=1021, Lcid=1033, Description="File Upload Status Tracker")]
        FileUploadStatusTracker = 10544,
        
        [EnumMember()]
        [OptionSetMetadata("Forecast", Index=1051, Lcid=1033, Description="Forecast")]
        Forecast_2 = 10545,
        
        [EnumMember()]
        [OptionSetMetadata("Forecast Configuration", Index=1052, Lcid=1033, Description="")]
        ForecastConfiguration = 10546,
        
        [EnumMember()]
        [OptionSetMetadata("Forecast definition", Index=1045, Lcid=1033, Description="Defines the parameters used for forecasting.")]
        Forecastdefinition = 10547,
        
        [EnumMember()]
        [OptionSetMetadata("Forecasting Cache", Index=1038, Lcid=1033, Description="Forecasting Cache")]
        ForecastingCache = 10548,
        
        [EnumMember()]
        [OptionSetMetadata("Forecast Insights", Index=1039, Lcid=1033, Description="Forecast Insights")]
        ForecastInsights = 10549,
        
        [EnumMember()]
        [OptionSetMetadata("Forecast", Index=1037, Lcid=1033, Description="Stores sales predictions for your team or organization. For internal use.")]
        Forecast = 10550,
        
        [EnumMember()]
        [OptionSetMetadata("Forecast Prediction Data", Index=1035, Lcid=1033, Description="Forecast Prediction Data")]
        ForecastPredictionData = 10551,
        
        [EnumMember()]
        [OptionSetMetadata("Forecast Prediction Status", Index=1036, Lcid=1033, Description="Forecast Prediction Status")]
        ForecastPredictionStatus = 10552,
        
        [EnumMember()]
        [OptionSetMetadata("Forecast recurrence", Index=1043, Lcid=1033, Description="Stores recalculation information for each recurrence of the forecast hierarchy. F" +
            "or internal use.")]
        Forecastrecurrence = 10553,
        
        [EnumMember()]
        [OptionSetMetadata("Recompute Tracker", Index=323, Lcid=1033, Description="")]
        RecomputeTracker = 10554,
        
        [EnumMember()]
        [OptionSetMetadata("Forecast Recurrence", Index=269, Lcid=1033, Description="Forecast Recurrence")]
        ForecastRecurrence = 10555,
        
        [EnumMember()]
        [OptionSetMetadata("ShareAs Configuration", Index=48, Lcid=1033, Description="ShareAs Configuration")]
        ShareAsConfiguration = 10556,
        
        [EnumMember()]
        [OptionSetMetadata("Customer email communication", Index=1293, Lcid=1033, Description="")]
        Customeremailcommunication = 10557,
        
        [EnumMember()]
        [OptionSetMetadata("GDPRData", Index=1155, Lcid=1033, Description="")]
        GDPRData = 10558,
        
        [EnumMember()]
        [OptionSetMetadata("ODOSFeatureMetadata", Index=172, Lcid=1033, Description="")]
        ODOSFeatureMetadata = 10559,
        
        [EnumMember()]
        [OptionSetMetadata("ODOSMetadata", Index=173, Lcid=1033, Description="")]
        ODOSMetadata = 10560,
        
        [EnumMember()]
        [OptionSetMetadata("Recurring Sales Action", Index=267, Lcid=1033, Description="")]
        RecurringSalesAction = 10561,
        
        [EnumMember()]
        [OptionSetMetadata("Recurring Sales Action V2", Index=265, Lcid=1033, Description="")]
        RecurringSalesActionV2 = 10562,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_relationshipinsightsunifiedconfig", Index=274, Lcid=1033, Description="")]
        msdyn_relationshipinsightsunifiedconfig = 10563,
        
        [EnumMember()]
        [OptionSetMetadata("siconfig", Index=77, Lcid=1033, Description="")]
        siconfig = 10564,
        
        [EnumMember()]
        [OptionSetMetadata("SI Key Value Config", Index=78, Lcid=1033, Description="")]
        SIKeyValueConfig = 10565,
        
        [EnumMember()]
        [OptionSetMetadata("Usage Metric", Index=27, Lcid=1033, Description="")]
        UsageMetric = 10566,
        
        [EnumMember()]
        [OptionSetMetadata("Action Card Regarding", Index=1242, Lcid=1033, Description="")]
        ActionCardRegarding = 10567,
        
        [EnumMember()]
        [OptionSetMetadata("Action Card Role Setting", Index=1235, Lcid=1033, Description="")]
        ActionCardRoleSetting = 10568,
        
        [EnumMember()]
        [OptionSetMetadata("EntityRankingRule", Index=1032, Lcid=1033, Description="")]
        EntityRankingRule = 10569,
        
        [EnumMember()]
        [OptionSetMetadata("flowcardtype", Index=1053, Lcid=1033, Description="")]
        flowcardtype = 10570,
        
        [EnumMember()]
        [OptionSetMetadata("salesinsightssettings", Index=294, Lcid=1033, Description="Storing settings for studio feature")]
        salesinsightssettings = 10571,
        
        [EnumMember()]
        [OptionSetMetadata("Action Card Usage", Index=1241, Lcid=1033, Description="")]
        ActionCardUsage = 10572,
        
        [EnumMember()]
        [OptionSetMetadata("Action Card Usage Aggregation", Index=1228, Lcid=1033, Description="")]
        ActionCardUsageAggregation = 10573,
        
        [EnumMember()]
        [OptionSetMetadata("Auto Capture Rule", Index=1207, Lcid=1033, Description="Auto Capture Rules")]
        AutoCaptureRule = 10574,
        
        [EnumMember()]
        [OptionSetMetadata("Auto Capture Settings", Index=1208, Lcid=1033, Description="Auto Capture Settings")]
        AutoCaptureSettings = 10575,
        
        [EnumMember()]
        [OptionSetMetadata("UntrackedAppointment", Index=21, Lcid=1033, Description="UntrackedAppointments")]
        UntrackedAppointment = 10576,
        
        [EnumMember()]
        [OptionSetMetadata("Suggested Activity", Index=68, Lcid=1033, Description="Activity suggestions")]
        SuggestedActivity = 10577,
        
        [EnumMember()]
        [OptionSetMetadata("Suggested Activity Data Source", Index=69, Lcid=1033, Description="Suggested Activity Data Sources")]
        SuggestedActivityDataSource = 10578,
        
        [EnumMember()]
        [OptionSetMetadata("Suggested Contact", Index=14, Lcid=1033, Description="Contact suggestions")]
        SuggestedContact = 10579,
        
        [EnumMember()]
        [OptionSetMetadata("Suggested Contacts Data Source", Index=15, Lcid=1033, Description="Suggested contacts data sources")]
        SuggestedContactsDataSource = 10580,
        
        [EnumMember()]
        [OptionSetMetadata("Notes analysis Config", Index=230, Lcid=1033, Description="")]
        NotesanalysisConfig = 10581,
        
        [EnumMember()]
        [OptionSetMetadata("icebreakersconfig", Index=1160, Lcid=1033, Description="")]
        icebreakersconfig = 10582,
        
        [EnumMember()]
        [OptionSetMetadata("dealmanageraccess", Index=1088, Lcid=1033, Description="")]
        dealmanageraccess = 10583,
        
        [EnumMember()]
        [OptionSetMetadata("Deal manager settings", Index=1089, Lcid=1033, Description="Deal manager settings")]
        Dealmanagersettings = 10584,
        
        [EnumMember()]
        [OptionSetMetadata("Account KPI Item", Index=1243, Lcid=1033, Description="")]
        AccountKPIItem = 10585,
        
        [EnumMember()]
        [OptionSetMetadata("Activity Analysis CleanUp State", Index=1227, Lcid=1033, Description="")]
        ActivityAnalysisCleanUpState = 10586,
        
        [EnumMember()]
        [OptionSetMetadata("Relationship Analytics Config", Index=1225, Lcid=1033, Description="")]
        RelationshipAnalyticsConfig = 10587,
        
        [EnumMember()]
        [OptionSetMetadata("Contact KPI Item", Index=1341, Lcid=1033, Description="")]
        ContactKPIItem = 10588,
        
        [EnumMember()]
        [OptionSetMetadata("Daily Kpis for account", Index=1297, Lcid=1033, Description="")]
        DailyKpisforaccount = 10589,
        
        [EnumMember()]
        [OptionSetMetadata("Daily kpis for contact", Index=1298, Lcid=1033, Description="")]
        Dailykpisforcontact = 10590,
        
        [EnumMember()]
        [OptionSetMetadata("Daily kpis for lead", Index=1296, Lcid=1033, Description="")]
        Dailykpisforlead = 10591,
        
        [EnumMember()]
        [OptionSetMetadata("Daily kpis for Opportunity", Index=1294, Lcid=1033, Description="")]
        DailykpisforOpportunity = 10592,
        
        [EnumMember()]
        [OptionSetMetadata("Lead KPI Item", Index=1131, Lcid=1033, Description="")]
        LeadKPIItem = 10593,
        
        [EnumMember()]
        [OptionSetMetadata("Most Contacted", Index=1126, Lcid=1033, Description="Most Contacted")]
        MostContacted = 10594,
        
        [EnumMember()]
        [OptionSetMetadata("Most Contacted By", Index=225, Lcid=1033, Description="Most Contacted By")]
        MostContactedBy = 10595,
        
        [EnumMember()]
        [OptionSetMetadata("Opportunity KPI Item", Index=176, Lcid=1033, Description="")]
        OpportunityKPIItem = 10596,
        
        [EnumMember()]
        [OptionSetMetadata("Relationship Analytics Metadata", Index=273, Lcid=1033, Description="")]
        RelationshipAnalyticsMetadata = 10597,
        
        [EnumMember()]
        [OptionSetMetadata("Similar entities feature importance", Index=76, Lcid=1033, Description="")]
        Similarentitiesfeatureimportance = 10598,
        
        [EnumMember()]
        [OptionSetMetadata("wkwcolleaguesforcompany", Index=130, Lcid=1033, Description="")]
        wkwcolleaguesforcompany = 10599,
        
        [EnumMember()]
        [OptionSetMetadata("wkwcolleaguesforcontact", Index=131, Lcid=1033, Description="Entity for storing contact introducer")]
        wkwcolleaguesforcontact = 10600,
        
        [EnumMember()]
        [OptionSetMetadata("wkwconfig", Index=129, Lcid=1033, Description="")]
        wkwconfig = 10601,
        
        [EnumMember()]
        [OptionSetMetadata("Attribute Influence Statistics", Index=1222, Lcid=1033, Description="")]
        AttributeInfluenceStatistics = 10602,
        
        [EnumMember()]
        [OptionSetMetadata("Prediction Computation Operation", Index=306, Lcid=1033, Description="")]
        PredictionComputationOperation = 10603,
        
        [EnumMember()]
        [OptionSetMetadata("Prediction Model Status", Index=299, Lcid=1033, Description="Stores metadata about predictive models")]
        PredictionModelStatus = 10604,
        
        [EnumMember()]
        [OptionSetMetadata("Prediction Scheduled Operation", Index=300, Lcid=1033, Description="Contains meta-data about the scheduled operations.")]
        PredictionScheduledOperation = 10605,
        
        [EnumMember()]
        [OptionSetMetadata("Predictive Model Score", Index=298, Lcid=1033, Description="")]
        PredictiveModelScore = 10606,
        
        [EnumMember()]
        [OptionSetMetadata("Predictive Score", Index=296, Lcid=1033, Description="")]
        PredictiveScore = 10607,
        
        [EnumMember()]
        [OptionSetMetadata("Predictive Scoring Sync Status", Index=297, Lcid=1033, Description="Internal entity used to store sync status for predictive scoring core entities.")]
        PredictiveScoringSyncStatus = 10608,
        
        [EnumMember()]
        [OptionSetMetadata("Real Time Scoring", Index=324, Lcid=1033, Description="Stores meta data information for real time scoring.")]
        RealTimeScoring = 10609,
        
        [EnumMember()]
        [OptionSetMetadata("Real Time Scoring Operation", Index=322, Lcid=1033, Description="Stores metadata for real time scoring job.")]
        RealTimeScoringOperation = 10610,
        
        [EnumMember()]
        [OptionSetMetadata("Submodel Definition", Index=70, Lcid=1033, Description="Stores metadata about submodels")]
        SubmodelDefinition = 10611,
        
        [EnumMember()]
        [OptionSetMetadata("Time spent in BPF", Index=41, Lcid=1033, Description="")]
        TimespentinBPF = 10612,
        
        [EnumMember()]
        [OptionSetMetadata("Training Result", Index=38, Lcid=1033, Description="Stores Training results for the model")]
        TrainingResult = 10613,
        
        [EnumMember()]
        [OptionSetMetadata("OpportunityModelConfig", Index=174, Lcid=1033, Description="")]
        OpportunityModelConfig = 10614,
        
        [EnumMember()]
        [OptionSetMetadata("LeadModelConfig", Index=1132, Lcid=1033, Description="")]
        LeadModelConfig = 10615,
        
        [EnumMember()]
        [OptionSetMetadata("ModelPreviewStatus", Index=1127, Lcid=1033, Description="")]
        ModelPreviewStatus = 10616,
        
        [EnumMember()]
        [OptionSetMetadata("Profile Album", Index=314, Lcid=1033, Description="Contains user profile images that are stored as attachments and displayed in post" +
            "s.")]
        ProfileAlbum = 10617,
        
        [EnumMember()]
        [OptionSetMetadata("Post Configuration", Index=312, Lcid=1033, Description="Enable or disable entities for Activity Feeds and Yammer collaboration.")]
        PostConfiguration = 10618,
        
        [EnumMember()]
        [OptionSetMetadata("Post Rule Configuration", Index=313, Lcid=1033, Description="Enable or disable system post rules for an entity for Activity Feeds and Yammer.")]
        PostRuleConfiguration = 10619,
        
        [EnumMember()]
        [OptionSetMetadata("Wall View", Index=143, Lcid=1033, Description="Contains information regarding which views are available for users to display on " +
            "their personal walls. Only an administrator can specify the views that users can" +
            " choose from to display on their personal walls.")]
        WallView = 10620,
        
        [EnumMember()]
        [OptionSetMetadata("Filter", Index=144, Lcid=1033, Description="Contains user personalization information regarding which of the administrator’s " +
            "selected views to display on a user’s personal wall.")]
        Filter = 10621,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Voice alert", Index=91, Lcid=1033, Description="")]
        CustomerVoicealert = 10622,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Voice alert rule", Index=120, Lcid=1033, Description="")]
        CustomerVoicealertrule = 10623,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Voice survey email template", Index=121, Lcid=1033, Description="Template for an email message that contains the survey invitation link.")]
        CustomerVoicesurveyemailtemplate = 10624,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Voice file response", Index=119, Lcid=1033, Description="Response to a file upload question.")]
        CustomerVoicefileresponse = 10625,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Voice localized survey email template", Index=117, Lcid=1033, Description="Stores localized data for email templates.")]
        CustomerVoicelocalizedsurveyemailtemplate = 10626,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Voice project", Index=118, Lcid=1033, Description="Set of surveys to collect feedback.")]
        CustomerVoiceproject = 10627,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Voice survey question", Index=125, Lcid=1033, Description="Question in a survey to collect feedback.")]
        CustomerVoicesurveyquestion = 10628,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Voice survey question response", Index=126, Lcid=1033, Description="Response to a question in a survey.")]
        CustomerVoicesurveyquestionresponse = 10629,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Voice satisfaction metric", Index=124, Lcid=1033, Description="Satisfaction metric defined for a project.")]
        CustomerVoicesatisfactionmetric = 10630,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Voice survey", Index=122, Lcid=1033, Description="Set of questions to collect feedback.")]
        CustomerVoicesurvey = 10631,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Voice survey invite", Index=123, Lcid=1033, Description="Activity that tracks a survey invitation sent to a person.")]
        CustomerVoicesurveyinvite = 10632,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Voice survey reminder", Index=116, Lcid=1033, Description="Email reminders for surveys created in Customer Voice.")]
        CustomerVoicesurveyreminder = 10633,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Voice survey response", Index=109, Lcid=1033, Description="Response to a survey.")]
        CustomerVoicesurveyresponse = 10634,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Voice unsubscribed recipient", Index=110, Lcid=1033, Description="Email address of an unsubscribed respondent.")]
        CustomerVoiceunsubscribedrecipient = 10635,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Service Key Value Configuration", Index=1309, Lcid=1033, Description="")]
        CustomerServiceKeyValueConfiguration = 10636,
        
        [EnumMember()]
        [OptionSetMetadata("AddToCalendar style", Index=161, Lcid=1033, Description="")]
        AddToCalendarstyle = 10637,
        
        [EnumMember()]
        [OptionSetMetadata("basestyle", Index=159, Lcid=1033, Description="")]
        basestyle = 10638,
        
        [EnumMember()]
        [OptionSetMetadata("Button style", Index=160, Lcid=1033, Description="")]
        Buttonstyle = 10639,
        
        [EnumMember()]
        [OptionSetMetadata("Code style", Index=167, Lcid=1033, Description="")]
        Codestyle = 10640,
        
        [EnumMember()]
        [OptionSetMetadata("Column style", Index=168, Lcid=1033, Description="")]
        Columnstyle = 10641,
        
        [EnumMember()]
        [OptionSetMetadata("Content Block", Index=166, Lcid=1033, Description="")]
        ContentBlock = 10642,
        
        [EnumMember()]
        [OptionSetMetadata("Divider style", Index=164, Lcid=1033, Description="")]
        Dividerstyle = 10643,
        
        [EnumMember()]
        [OptionSetMetadata("General styles", Index=165, Lcid=1033, Description="")]
        Generalstyles = 10644,
        
        [EnumMember()]
        [OptionSetMetadata("imagestyle", Index=158, Lcid=1033, Description="")]
        imagestyle = 10645,
        
        [EnumMember()]
        [OptionSetMetadata("Layout Style", Index=151, Lcid=1033, Description="")]
        LayoutStyle = 10646,
        
        [EnumMember()]
        [OptionSetMetadata("QR code style", Index=152, Lcid=1033, Description="")]
        QRcodestyle = 10647,
        
        [EnumMember()]
        [OptionSetMetadata("Text style", Index=150, Lcid=1033, Description="")]
        Textstyle = 10648,
        
        [EnumMember()]
        [OptionSetMetadata("Video style", Index=148, Lcid=1033, Description="")]
        Videostyle = 10649,
        
        [EnumMember()]
        [OptionSetMetadata("App state", Index=1189, Lcid=1033, Description="")]
        Appstate = 10650,
        
        [EnumMember()]
        [OptionSetMetadata("CSAdminConfig", Index=1308, Lcid=1033, Description="")]
        CSAdminConfig = 10651,
        
        [EnumMember()]
        [OptionSetMetadata("Custom API Ruleset Configuration", Index=1307, Lcid=1033, Description="Configuration table for setting up custom APIs for usage inside the Unified routi" +
            "ng system")]
        CustomAPIRulesetConfiguration = 10652,
        
        [EnumMember()]
        [OptionSetMetadata("Decision contract", Index=1096, Lcid=1033, Description="Stores information about contract that will be required for ruleset definition")]
        Decisioncontract = 10653,
        
        [EnumMember()]
        [OptionSetMetadata("Decision rule set", Index=1097, Lcid=1033, Description="Contains list of rules to define demand and assignment behavior")]
        Decisionruleset = 10654,
        
        [EnumMember()]
        [OptionSetMetadata("Rulesetentitymapping", Index=256, Lcid=1033, Description="For internal use only entity used to store an implicit mapping between a ruleset " +
            "and polymorphic entity")]
        Rulesetentitymapping = 10655,
        
        [EnumMember()]
        [OptionSetMetadata("Routing diagnostic item", Index=24, Lcid=1033, Description="The entity used to store unified routing diagnostic data.")]
        Routingdiagnosticitem = 10656,
        
        [EnumMember()]
        [OptionSetMetadata("Routing diagnostic", Index=25, Lcid=1033, Description="")]
        Routingdiagnostic = 10657,
        
        [EnumMember()]
        [OptionSetMetadata("Inbox card configuration", Index=1157, Lcid=1033, Description="")]
        Inboxcardconfiguration = 10658,
        
        [EnumMember()]
        [OptionSetMetadata("Inbox Configuration", Index=1158, Lcid=1033, Description="")]
        InboxConfiguration = 10659,
        
        [EnumMember()]
        [OptionSetMetadata("Inbox Entity Configuration", Index=1151, Lcid=1033, Description="")]
        InboxEntityConfiguration = 10660,
        
        [EnumMember()]
        [OptionSetMetadata("App Profile Copilot Configuration", Index=1184, Lcid=1033, Description="")]
        AppProfileCopilotConfiguration = 10661,
        
        [EnumMember()]
        [OptionSetMetadata("Swarm", Index=3, Lcid=1033, Description="Tracks the list of swarms created by agents to resolve the customer issues")]
        Swarm = 10662,
        
        [EnumMember()]
        [OptionSetMetadata("Swarm participant", Index=4, Lcid=1033, Description="Stores the participants information of swarm")]
        Swarmparticipant = 10663,
        
        [EnumMember()]
        [OptionSetMetadata("Swarm participant rule", Index=2, Lcid=1033, Description="Rules to fetch participants based on their role")]
        Swarmparticipantrule = 10664,
        
        [EnumMember()]
        [OptionSetMetadata("Swarm role", Index=0, Lcid=1033, Description="Stores the different participant roles and associated role type defined")]
        Swarmrole = 10665,
        
        [EnumMember()]
        [OptionSetMetadata("Swarm skill", Index=1, Lcid=1033, Description="Stores the skills required for the swarm")]
        Swarmskill = 10666,
        
        [EnumMember()]
        [OptionSetMetadata("Swarm template", Index=8, Lcid=1033, Description="Entity which stores different templates for the swarm")]
        Swarmtemplate = 10667,
        
        [EnumMember()]
        [OptionSetMetadata("Autonomous case creation and update rules", Index=1206, Lcid=1033, Description="Autonomous case creation and update rules")]
        Autonomouscasecreationandupdaterules = 10668,
        
        [EnumMember()]
        [OptionSetMetadata("Entity Attachment", Index=1029, Lcid=1033, Description="")]
        EntityAttachment = 10669,
        
        [EnumMember()]
        [OptionSetMetadata("Time Tracker", Index=39, Lcid=1033, Description="")]
        TimeTracker = 10670,
        
        [EnumMember()]
        [OptionSetMetadata("Customer feedback survey", Index=1291, Lcid=1033, Description="")]
        Customerfeedbacksurvey = 10671,
        
        [EnumMember()]
        [OptionSetMetadata("Customer feedback survey invite", Index=1289, Lcid=1033, Description="")]
        Customerfeedbacksurveyinvite = 10672,
        
        [EnumMember()]
        [OptionSetMetadata("Customer feedback survey response", Index=1290, Lcid=1033, Description="")]
        Customerfeedbacksurveyresponse = 10673,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_surveyconfig", Index=17, Lcid=1033, Description="")]
        msdyn_surveyconfig = 10674,
        
        [EnumMember()]
        [OptionSetMetadata("Survey setting", Index=10, Lcid=1033, Description="")]
        Surveysetting = 10675,
        
        [EnumMember()]
        [OptionSetMetadata("Master Entity Routing Configuration", Index=1121, Lcid=1033, Description="Defines master routing details for the entity.")]
        MasterEntityRoutingConfiguration = 10676,
        
        [EnumMember()]
        [OptionSetMetadata("Routing Rule Set Setting", Index=258, Lcid=1033, Description="")]
        RoutingRuleSetSetting = 10677,
        
        [EnumMember()]
        [OptionSetMetadata("Assignment Configuration", Index=1217, Lcid=1033, Description="")]
        AssignmentConfiguration = 10678,
        
        [EnumMember()]
        [OptionSetMetadata("Assignment Configuration Step", Index=1215, Lcid=1033, Description="")]
        AssignmentConfigurationStep = 10679,
        
        [EnumMember()]
        [OptionSetMetadata("Capacity Profile", Index=1211, Lcid=1033, Description="Capacity Profiles")]
        CapacityProfile = 10680,
        
        [EnumMember()]
        [OptionSetMetadata("Overflow Action Config", Index=205, Lcid=1033, Description="Overflow action configurations.")]
        OverflowActionConfig = 10681,
        
        [EnumMember()]
        [OptionSetMetadata("Preferred Agent", Index=304, Lcid=1033, Description="Preferred Agent Table, table used to store the mapping between the system user an" +
            "d contact/account")]
        PreferredAgent = 10682,
        
        [EnumMember()]
        [OptionSetMetadata("Preferred Agent Customer Identity", Index=305, Lcid=1033, Description="Used for storing the table used to identify customer and the corresponding associ" +
            "ated table")]
        PreferredAgentCustomerIdentity = 10683,
        
        [EnumMember()]
        [OptionSetMetadata("Preferred Agent Routed Entity", Index=303, Lcid=1033, Description="Preferred Agent Routed table used to store information for routed table name and " +
            "customer identifying column on the table")]
        PreferredAgentRoutedEntity = 10684,
        
        [EnumMember()]
        [OptionSetMetadata("Routing configuration", Index=271, Lcid=1033, Description="Defines routing details for the workstream")]
        Routingconfiguration = 10685,
        
        [EnumMember()]
        [OptionSetMetadata("Routing configuration step", Index=264, Lcid=1033, Description="Links the routing configuration with ruleset")]
        Routingconfigurationstep = 10686,
        
        [EnumMember()]
        [OptionSetMetadata("Bot Channel Registration", Index=213, Lcid=1033, Description="Bot channel registration used for channel integration")]
        BotChannelRegistration = 10687,
        
        [EnumMember()]
        [OptionSetMetadata("Channel Configuration", Index=218, Lcid=1033, Description="Channel Configuration")]
        ChannelConfiguration = 10688,
        
        [EnumMember()]
        [OptionSetMetadata("Channel State Configuration", Index=216, Lcid=1033, Description="Channel State Configuration")]
        ChannelStateConfiguration = 10689,
        
        [EnumMember()]
        [OptionSetMetadata("Provisioning State", Index=235, Lcid=1033, Description="Provisioning state")]
        ProvisioningState = 10690,
        
        [EnumMember()]
        [OptionSetMetadata("AdminAppState", Index=1234, Lcid=1033, Description="State for each user in Admin App")]
        AdminAppState = 10691,
        
        [EnumMember()]
        [OptionSetMetadata("Agent Status history", Index=1263, Lcid=1033, Description="Agent status history entity records any changes to agent’s presence or available " +
            "capacity.")]
        AgentStatushistory = 10692,
        
        [EnumMember()]
        [OptionSetMetadata("Power BI Configuration", Index=1186, Lcid=1033, Description="Stores the Power BI configurations for supervisor experience")]
        PowerBIConfiguration = 10693,
        
        [EnumMember()]
        [OptionSetMetadata("Authentication Settings", Index=1221, Lcid=1033, Description="Stores the settings for user authentication")]
        AuthenticationSettings = 10694,
        
        [EnumMember()]
        [OptionSetMetadata("Auth Settings Entry", Index=1214, Lcid=1033, Description="")]
        AuthSettingsEntry = 10695,
        
        [EnumMember()]
        [OptionSetMetadata("Quick reply", Index=1213, Lcid=1033, Description="Stores the quick replies that agents can use in the conversation control while in" +
            "teracting with the customers")]
        Quickreply = 10696,
        
        [EnumMember()]
        [OptionSetMetadata("Entity Routing Context", Index=1330, Lcid=1033, Description="Entity Routing Contexts")]
        EntityRoutingContext = 10697,
        
        [EnumMember()]
        [OptionSetMetadata("Channel Capability", Index=1328, Lcid=1033, Description="The capability that a channel can enable, such as co-browse, screen sharing.")]
        ChannelCapability = 10698,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Action", Index=1333, Lcid=1033, Description="The action that can be performed in the conversation.")]
        ConversationAction = 10699,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Action Locale", Index=1332, Lcid=1033, Description="Localization information associated with the Conversation action.")]
        ConversationActionLocale = 10700,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Message Block", Index=1337, Lcid=1033, Description=@"A Message Block would constitute a block of messages up till an agent responds (including the messages sent by the agent). A follow up message, after an agent responds, will create another message block, this block again ends with the messages from the agent")]
        ConversationMessageBlock = 10701,
        
        [EnumMember()]
        [OptionSetMetadata("DeletedConversation", Index=1094, Lcid=1033, Description="Holds id of deleted conversation")]
        DeletedConversation = 10702,
        
        [EnumMember()]
        [OptionSetMetadata("Deprecated Workstream Entity Configuration", Index=1025, Lcid=1033, Description="Stores entity routing configuration per workstream")]
        DeprecatedWorkstreamEntityConfiguration = 10703,
        
        [EnumMember()]
        [OptionSetMetadata("Entity", Index=1031, Lcid=1033, Description="Entity Routing Configuration")]
        Entity_2 = 10704,
        
        [EnumMember()]
        [OptionSetMetadata("Ongoing conversation (Deprecated)", Index=1140, Lcid=1033, Description="Tracks the interactions between the agents and customer")]
        OngoingconversationDeprecated = 10705,
        
        [EnumMember()]
        [OptionSetMetadata("Live work item event", Index=1138, Lcid=1033, Description="This entity captures all events corresponding to a live work item.")]
        Liveworkitemevent = 10706,
        
        [EnumMember()]
        [OptionSetMetadata("Work Stream", Index=1136, Lcid=1033, Description="Stores information about the properties of work items that are generated by a uni" +
            "que channel endpoint")]
        WorkStream = 10707,
        
        [EnumMember()]
        [OptionSetMetadata("Masking Rule", Index=1120, Lcid=1033, Description="Masking Rules to apply to chat messages.")]
        MaskingRule = 10708,
        
        [EnumMember()]
        [OptionSetMetadata("Auto block rule", Index=221, Lcid=1033, Description="")]
        Autoblockrule = 10709,
        
        [EnumMember()]
        [OptionSetMetadata("Bot Channel Registration Secret", Index=211, Lcid=1033, Description="")]
        BotChannelRegistrationSecret = 10710,
        
        [EnumMember()]
        [OptionSetMetadata("Omnichannel channel api conversation privilege", Index=212, Lcid=1033, Description="Entity for creating privilege for custom apis. The privileges for this entity wil" +
            "l be used to restrict custom api access.")]
        Omnichannelchannelapiconversationprivilege = 10711,
        
        [EnumMember()]
        [OptionSetMetadata("Omnichannel channel api message privilege", Index=219, Lcid=1033, Description="Entity for creating privilege for custom apis. The privileges for this entity wil" +
            "l be used to restrict custom api access.")]
        Omnichannelchannelapimessageprivilege = 10712,
        
        [EnumMember()]
        [OptionSetMetadata("Channel api method mapping", Index=220, Lcid=1033, Description="OC channel api method mapping entity.")]
        Channelapimethodmapping = 10713,
        
        [EnumMember()]
        [OptionSetMetadata("External context", Index=217, Lcid=1033, Description="")]
        Externalcontext = 10714,
        
        [EnumMember()]
        [OptionSetMetadata("Flagged spam", Index=246, Lcid=1033, Description="")]
        Flaggedspam = 10715,
        
        [EnumMember()]
        [OptionSetMetadata("Language", Index=247, Lcid=1033, Description="")]
        Language = 10716,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation", Index=245, Lcid=1033, Description="Tracks the interaction between the agents and customer")]
        Conversation = 10717,
        
        [EnumMember()]
        [OptionSetMetadata("Context item value", Index=251, Lcid=1033, Description="Stores context item values for an engagement.")]
        Contextitemvalue = 10720,
        
        [EnumMember()]
        [OptionSetMetadata("Live Work Item Participant (Deprecated)", Index=252, Lcid=1033, Description="")]
        LiveWorkItemParticipantDeprecated = 10721,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Sentiment", Index=250, Lcid=1033, Description="Stores the machine learning generated customer sentiment of the communication  be" +
            "tween the user and the customer")]
        ConversationSentiment = 10722,
        
        [EnumMember()]
        [OptionSetMetadata("Context variable", Index=248, Lcid=1033, Description="Stores the context variables for a work stream.")]
        Contextvariable = 10723,
        
        [EnumMember()]
        [OptionSetMetadata("Localization", Index=249, Lcid=1033, Description="Entity used for data localization on CRM org.")]
        Localization = 10724,
        
        [EnumMember()]
        [OptionSetMetadata("OC Payment Profile", Index=242, Lcid=1033, Description="")]
        OCPaymentProfile = 10725,
        
        [EnumMember()]
        [OptionSetMetadata("Recording", Index=236, Lcid=1033, Description="Records the audio/video session")]
        Recording = 10726,
        
        [EnumMember()]
        [OptionSetMetadata("Omnichannel Request", Index=234, Lcid=1033, Description="Entity to store Requests across Omnichannel.")]
        OmnichannelRequest = 10727,
        
        [EnumMember()]
        [OptionSetMetadata("Rich message", Index=232, Lcid=1033, Description="Rich messages for Omnichannel integration")]
        Richmessage = 10728,
        
        [EnumMember()]
        [OptionSetMetadata("Rich message map", Index=233, Lcid=1033, Description="Rich messages map for Omnichannel integration")]
        Richmessagemap = 10729,
        
        [EnumMember()]
        [OptionSetMetadata("Rule Item", Index=240, Lcid=1033, Description="Stores the condition and destination including Omnichannel queues or agents")]
        RuleItem = 10730,
        
        [EnumMember()]
        [OptionSetMetadata("Sentiment daily topic", Index=241, Lcid=1033, Description="1. store properties regarding each topic cluster\r\n2. used for dashboard visualiza" +
            "tion (like topic example) and calculation for topic mapping")]
        Sentimentdailytopic = 10731,
        
        [EnumMember()]
        [OptionSetMetadata("Sentiment daily topic keyword", Index=239, Lcid=1033, Description="1. Store the keyword and frequency for topic clusters\r\n2. Used for word cloud in " +
            "the dashboard")]
        Sentimentdailytopickeyword = 10732,
        
        [EnumMember()]
        [OptionSetMetadata("Sentiment daily topic trending", Index=237, Lcid=1033, Description="1. Store the day to day topic mapping information\r\n2. Used for dashboard visualiz" +
            "ation")]
        Sentimentdailytopictrending = 10733,
        
        [EnumMember()]
        [OptionSetMetadata("Session", Index=238, Lcid=1033, Description="Session for interacting with a customer")]
        Session = 10734,
        
        [EnumMember()]
        [OptionSetMetadata("Session Participant Event", Index=184, Lcid=1033, Description="Session participant events")]
        SessionParticipantEvent = 10735,
        
        [EnumMember()]
        [OptionSetMetadata("Session Sentiment", Index=182, Lcid=1033, Description="Stores the session level sentiment for customer interactions calculated using AI." +
            "")]
        SessionSentiment = 10736,
        
        [EnumMember()]
        [OptionSetMetadata("Message", Index=185, Lcid=1033, Description="Stores the system messages sent to the message receiver for various events.")]
        Message = 10737,
        
        [EnumMember()]
        [OptionSetMetadata("Tag", Index=186, Lcid=1033, Description="Tags for quick categorization")]
        Tag = 10738,
        
        [EnumMember()]
        [OptionSetMetadata("Geo Location Provider", Index=227, Lcid=1033, Description="Geo Location Providers")]
        GeoLocationProvider = 10739,
        
        [EnumMember()]
        [OptionSetMetadata("Omnichannel Configuration", Index=171, Lcid=1033, Description="Configuration for Omnichannel")]
        OmnichannelConfiguration = 10740,
        
        [EnumMember()]
        [OptionSetMetadata("Omnichannel Personalization", Index=169, Lcid=1033, Description="Stores personalization information of Omnichannel Agent/Supervisor dashboards")]
        OmnichannelPersonalization = 10741,
        
        [EnumMember()]
        [OptionSetMetadata("Omnichannel Queue (Deprecated)", Index=170, Lcid=1033, Description="Stores omni-channel work items of a specific issue type or a specific team")]
        OmnichannelQueueDeprecated = 10742,
        
        [EnumMember()]
        [OptionSetMetadata("Omnichannel Sync Config", Index=177, Lcid=1033, Description="Config for entities to be synced to Omnichannel")]
        OmnichannelSyncConfig = 10743,
        
        [EnumMember()]
        [OptionSetMetadata("Operating Hour", Index=178, Lcid=1033, Description="Stores all the operating hours that are configured for an organization.")]
        OperatingHour = 10744,
        
        [EnumMember()]
        [OptionSetMetadata("Personal quick reply", Index=209, Lcid=1033, Description="Omnichannel agents\'s personal quick replies")]
        Personalquickreply = 10745,
        
        [EnumMember()]
        [OptionSetMetadata("Personal sound setting", Index=210, Lcid=1033, Description="Entity to store personalized sound records for the users.")]
        Personalsoundsetting = 10746,
        
        [EnumMember()]
        [OptionSetMetadata("Persona Security Role Mapping", Index=208, Lcid=1033, Description="")]
        PersonaSecurityRoleMapping = 10747,
        
        [EnumMember()]
        [OptionSetMetadata("Presence", Index=301, Lcid=1033, Description="Stores presence status information")]
        Presence = 10748,
        
        [EnumMember()]
        [OptionSetMetadata("Provider", Index=321, Lcid=1033, Description="A list of third-party providers that bring capabilities into the application. ")]
        Provider = 10749,
        
        [EnumMember()]
        [OptionSetMetadata("RoutingRequest", Index=257, Lcid=1033, Description="Routing request definition entity")]
        RoutingRequest = 10750,
        
        [EnumMember()]
        [OptionSetMetadata("Search Configuration", Index=281, Lcid=1033, Description="Configuration entity for agent search screen")]
        SearchConfiguration = 10751,
        
        [EnumMember()]
        [OptionSetMetadata("Sentiment analysis", Index=54, Lcid=1033, Description="Sentiment analysis configuration")]
        Sentimentanalysis = 10752,
        
        [EnumMember()]
        [OptionSetMetadata("Session event", Index=50, Lcid=1033, Description="Stores the session events for a session")]
        Sessionevent = 10753,
        
        [EnumMember()]
        [OptionSetMetadata("Session participant", Index=51, Lcid=1033, Description="Users in a session interacting with the customer")]
        Sessionparticipant = 10754,
        
        [EnumMember()]
        [OptionSetMetadata("Audio File", Index=71, Lcid=1033, Description="Entity to store all audio files for Omnichannel")]
        AudioFile = 10755,
        
        [EnumMember()]
        [OptionSetMetadata("Sound notification setting", Index=72, Lcid=1033, Description="Entity to store the sound notification setting records for channels and other sce" +
            "narios. ")]
        Soundnotificationsetting = 10756,
        
        [EnumMember()]
        [OptionSetMetadata("Transcript", Index=31, Lcid=1033, Description="Stores the transcript of the communication  between the user and the customer")]
        Transcript = 10757,
        
        [EnumMember()]
        [OptionSetMetadata("UR notification template", Index=28, Lcid=1033, Description="The entity stores all the templates used for UR notification.")]
        URnotificationtemplate = 10758,
        
        [EnumMember()]
        [OptionSetMetadata("UR Notification Template Mapping", Index=26, Lcid=1033, Description="This entity stores the mapping for notification template and workstream.")]
        URNotificationTemplateMapping = 10759,
        
        [EnumMember()]
        [OptionSetMetadata("User settings", Index=141, Lcid=1033, Description="Parent entity for Omnichannel personalizations")]
        Usersettings = 10760,
        
        [EnumMember()]
        [OptionSetMetadata("Self service", Index=140, Lcid=1033, Description="Stores each customer action as a record. The actions tracked are before an intera" +
            "ction is initiated. Agents will see the actions for an interaction in the Self S" +
            "ervice section of the Customer Summary page, when enabled.")]
        Selfservice = 10761,
        
        [EnumMember()]
        [OptionSetMetadata("Agent capacity update history", Index=1230, Lcid=1033, Description="Agent capacity update history entity records any changes to agent capacity agains" +
            "t a capacity profile")]
        Agentcapacityupdatehistory = 10768,
        
        [EnumMember()]
        [OptionSetMetadata("Bookable Resource Capacity Profile", Index=1204, Lcid=1033, Description="Bookable Resource Capacity Profile")]
        BookableResourceCapacityProfile = 10769,
        
        [EnumMember()]
        [OptionSetMetadata("Work stream capacity profile", Index=1137, Lcid=1033, Description="Work stream capacity profile")]
        Workstreamcapacityprofile = 10770,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Capacity profile", Index=243, Lcid=1033, Description="Conversation Capacity profile")]
        ConversationCapacityprofile = 10771,
        
        [EnumMember()]
        [OptionSetMetadata("Agent Capacity Profile Unit", Index=1232, Lcid=1033, Description="Agent Capacity Profile Units holds agent’s available capacity for each capacity p" +
            "rofile associated.")]
        AgentCapacityProfileUnit = 10772,
        
        [EnumMember()]
        [OptionSetMetadata("Agent Channel State", Index=1231, Lcid=1033, Description="")]
        AgentChannelState = 10773,
        
        [EnumMember()]
        [OptionSetMetadata("Agent Status", Index=1262, Lcid=1033, Description="Agent Status holds agent’s status or presence details.")]
        AgentStatus = 10774,
        
        [EnumMember()]
        [OptionSetMetadata("Agent Group", Index=1261, Lcid=1033, Description="Captures unique Agent Groups")]
        AgentGroup = 10775,
        
        [EnumMember()]
        [OptionSetMetadata("Agent Group Membership", Index=1257, Lcid=1033, Description="Captures Members of the Agent Groups")]
        AgentGroupMembership = 10776,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Characteristic", Index=244, Lcid=1033, Description="Characteristic associated to Omnichannel conversation")]
        ConversationCharacteristic = 10777,
        
        [EnumMember()]
        [OptionSetMetadata("Session Characteristic", Index=183, Lcid=1033, Description="Characteristic associated to Omnichannel session")]
        SessionCharacteristic = 10778,
        
        [EnumMember()]
        [OptionSetMetadata("Skill Attachment Rule", Index=74, Lcid=1033, Description="")]
        SkillAttachmentRule = 10779,
        
        [EnumMember()]
        [OptionSetMetadata("Attach Skill", Index=75, Lcid=1033, Description="")]
        AttachSkill = 10780,
        
        [EnumMember()]
        [OptionSetMetadata("Model training details", Index=180, Lcid=1033, Description="Indicates model\'s training details")]
        Modeltrainingdetails = 10781,
        
        [EnumMember()]
        [OptionSetMetadata("Training data import configuration", Index=181, Lcid=1033, Description="Indicates the training data import configuration")]
        Trainingdataimportconfiguration = 10782,
        
        [EnumMember()]
        [OptionSetMetadata("Characteristic mapping", Index=188, Lcid=1033, Description="Indicates the mapping of skills from training data to characteristics")]
        Characteristicmapping = 10783,
        
        [EnumMember()]
        [OptionSetMetadata("Training record", Index=189, Lcid=1033, Description="Indicates individual training record to be used for model training")]
        Trainingrecord = 10784,
        
        [EnumMember()]
        [OptionSetMetadata("Skill finder model", Index=187, Lcid=1033, Description="Indicates the OmniChannel Model for the corresponding AI model")]
        Skillfindermodel = 10785,
        
        [EnumMember()]
        [OptionSetMetadata("Effort estimate", Index=1083, Lcid=1033, Description="Entity to persist effort model prediction results")]
        Effortestimate = 10786,
        
        [EnumMember()]
        [OptionSetMetadata("Effort estimation model", Index=1161, Lcid=1033, Description="Indicates the OmniChannel Model for the corresponding AI model")]
        Effortestimationmodel = 10787,
        
        [EnumMember()]
        [OptionSetMetadata("Effort model training details", Index=1159, Lcid=1033, Description="Indicates model\'s training details")]
        Effortmodeltrainingdetails = 10788,
        
        [EnumMember()]
        [OptionSetMetadata("ConversationInsight", Index=1336, Lcid=1033, Description="")]
        ConversationInsight = 10789,
        
        [EnumMember()]
        [OptionSetMetadata("Active ICD Extension", Index=1229, Lcid=1033, Description="This notes the currently active description and examples for given entity (queue/" +
            "agent etc.) as selected by the C1 administrator.")]
        ActiveICDExtension = 10790,
        
        [EnumMember()]
        [OptionSetMetadata("Entity-Workstream Map", Index=1024, Lcid=1033, Description="This notes the entity (queue, agent etc.) mapped to the workstreams.")]
        EntityWorkstreamMap = 10791,
        
        [EnumMember()]
        [OptionSetMetadata("ICD Extension", Index=1153, Lcid=1033, Description="Contains ICD related fields that will be generated and kept.")]
        ICDExtension = 10792,
        
        [EnumMember()]
        [OptionSetMetadata("Lock Status", Index=1124, Lcid=1033, Description="")]
        LockStatus = 10793,
        
        [EnumMember()]
        [OptionSetMetadata("Omnichannel agent assignment custom api privilege ", Index=228, Lcid=1033, Description="Entity for creating privilege for agent assignment private custom apis. The privi" +
            "leges for this entity will be used to restrict custom api access only for FPA ap" +
            "p user.")]
        Omnichannelagentassignmentcustomapiprivilege = 10794,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Action Item", Index=1331, Lcid=1033, Description="")]
        ConversationActionItem = 10795,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Aggregated Insights", Index=1339, Lcid=1033, Description="")]
        ConversationAggregatedInsights = 10796,
        
        [EnumMember()]
        [OptionSetMetadata("Comment", Index=1340, Lcid=1033, Description="A comment on a specific section in a transcript")]
        Comment_3 = 10797,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Participant Insights", Index=1282, Lcid=1033, Description="")]
        ConversationParticipantInsights = 10798,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Participant Sentiment", Index=1283, Lcid=1033, Description="")]
        ConversationParticipantSentiment = 10799,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Question", Index=1281, Lcid=1033, Description="")]
        ConversationQuestion = 10800,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Segment Sentiment", Index=1279, Lcid=1033, Description="")]
        ConversationSegmentSentiment = 10801,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Sentiment", Index=1280, Lcid=1033, Description="")]
        ConversationSentiment_2 = 10802,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Signal", Index=1287, Lcid=1033, Description="")]
        ConversationSignal = 10803,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Subject", Index=1288, Lcid=1033, Description="")]
        ConversationSubject = 10804,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Summary Suggestion", Index=1285, Lcid=1033, Description="")]
        ConversationSummarySuggestion = 10805,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation System Tag", Index=1278, Lcid=1033, Description="")]
        ConversationSystemTag = 10806,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Tag", Index=1271, Lcid=1033, Description="")]
        ConversationTag = 10807,
        
        [EnumMember()]
        [OptionSetMetadata("Recording (Deprecated)", Index=268, Lcid=1033, Description="")]
        RecordingDeprecated = 10808,
        
        [EnumMember()]
        [OptionSetMetadata("SCI Conversation", Index=275, Lcid=1033, Description="")]
        SCIConversation = 10809,
        
        [EnumMember()]
        [OptionSetMetadata("Custom Email Highlight", Index=276, Lcid=1033, Description="")]
        CustomEmailHighlight = 10810,
        
        [EnumMember()]
        [OptionSetMetadata("Custom Highlight", Index=283, Lcid=1033, Description="Highlight of relevant conversation section")]
        CustomHighlight = 10811,
        
        [EnumMember()]
        [OptionSetMetadata("Custom Publisher", Index=284, Lcid=1033, Description="The publisher of the conversation highlight")]
        CustomPublisher = 10812,
        
        [EnumMember()]
        [OptionSetMetadata("EnvironmentSettings", Index=282, Lcid=1033, Description="SCI environment level settings")]
        EnvironmentSettings = 10813,
        
        [EnumMember()]
        [OptionSetMetadata("UserSettings", Index=280, Lcid=1033, Description="SCI user level settings")]
        UserSettings = 10814,
        
        [EnumMember()]
        [OptionSetMetadata("CatalogEventStatusConfiguration", Index=157, Lcid=1033, Description="Status configuration for events in a catalog.")]
        CatalogEventStatusConfiguration = 10815,
        
        [EnumMember()]
        [OptionSetMetadata("Configuration", Index=155, Lcid=1033, Description="")]
        Configuration = 10816,
        
        [EnumMember()]
        [OptionSetMetadata("Trigger", Index=153, Lcid=1033, Description="Metadata for Cxp Events")]
        Trigger = 10817,
        
        [EnumMember()]
        [OptionSetMetadata("Triggers To Sdk Message Processing Steps", Index=154, Lcid=1033, Description="Mapping between CJO Marketing Triggers and Sdk Message Processing Steps")]
        TriggersToSdkMessageProcessingSteps = 10818,
        
        [EnumMember()]
        [OptionSetMetadata("EventParameterMetadata", Index=99, Lcid=1033, Description="Metadata for Cxp Event Parameters")]
        EventParameterMetadata = 10819,
        
        [EnumMember()]
        [OptionSetMetadata("TrackingContext", Index=86, Lcid=1033, Description="")]
        TrackingContext = 10820,
        
        [EnumMember()]
        [OptionSetMetadata("Marketing feature configuration", Index=98, Lcid=1033, Description="")]
        Marketingfeatureconfiguration = 10821,
        
        [EnumMember()]
        [OptionSetMetadata("msdynmkt_experimentv2", Index=100, Lcid=1033, Description="")]
        msdynmkt_experimentv2 = 10822,
        
        [EnumMember()]
        [OptionSetMetadata("ACS channel instance", Index=149, Lcid=1033, Description="")]
        ACSchannelinstance = 10823,
        
        [EnumMember()]
        [OptionSetMetadata("ACS channel instance account", Index=156, Lcid=1033, Description="")]
        ACSchannelinstanceaccount = 10824,
        
        [EnumMember()]
        [OptionSetMetadata("Infobip channel instance", Index=96, Lcid=1033, Description="")]
        Infobipchannelinstance = 10825,
        
        [EnumMember()]
        [OptionSetMetadata("Infobip channel instance account", Index=97, Lcid=1033, Description="")]
        Infobipchannelinstanceaccount = 10826,
        
        [EnumMember()]
        [OptionSetMetadata("Link mobility channel instance", Index=104, Lcid=1033, Description="")]
        Linkmobilitychannelinstance = 10827,
        
        [EnumMember()]
        [OptionSetMetadata("Link mobility channel instance account", Index=105, Lcid=1033, Description="")]
        Linkmobilitychannelinstanceaccount = 10828,
        
        [EnumMember()]
        [OptionSetMetadata("MockSmsProvider channel instance", Index=95, Lcid=1033, Description="")]
        MockSmsProviderchannelinstance = 10829,
        
        [EnumMember()]
        [OptionSetMetadata("MockSmsProvider channel instance account", Index=88, Lcid=1033, Description="")]
        MockSmsProviderchannelinstanceaccount = 10830,
        
        [EnumMember()]
        [OptionSetMetadata("TeleSign channel instance", Index=87, Lcid=1033, Description="")]
        TeleSignchannelinstance = 10831,
        
        [EnumMember()]
        [OptionSetMetadata("TeleSign channel instance account", Index=85, Lcid=1033, Description="")]
        TeleSignchannelinstanceaccount = 10832,
        
        [EnumMember()]
        [OptionSetMetadata("Twilio channel instance", Index=93, Lcid=1033, Description="")]
        Twiliochannelinstance = 10833,
        
        [EnumMember()]
        [OptionSetMetadata("Twilio channel instance account", Index=94, Lcid=1033, Description="")]
        Twiliochannelinstanceaccount = 10834,
        
        [EnumMember()]
        [OptionSetMetadata("Vibes channel instance", Index=92, Lcid=1033, Description="")]
        Vibeschannelinstance = 10835,
        
        [EnumMember()]
        [OptionSetMetadata("Vibes channel instance account", Index=90, Lcid=1033, Description="")]
        Vibeschannelinstanceaccount = 10836,
        
        [EnumMember()]
        [OptionSetMetadata("Predefined Placeholder", Index=89, Lcid=1033, Description="")]
        PredefinedPlaceholder = 10837,
        
        [EnumMember()]
        [OptionSetMetadata("Metadata Entity Relationship", Index=103, Lcid=1033, Description="")]
        MetadataEntityRelationship = 10838,
        
        [EnumMember()]
        [OptionSetMetadata("Metadata Item", Index=101, Lcid=1033, Description="")]
        MetadataItem = 10839,
        
        [EnumMember()]
        [OptionSetMetadata("Metadata Store State", Index=102, Lcid=1033, Description="")]
        MetadataStoreState = 10840,
        
        [EnumMember()]
        [OptionSetMetadata("DigitalSellingActiveTask", Index=1080, Lcid=1033, Description="")]
        DigitalSellingActiveTask = 10841,
        
        [EnumMember()]
        [OptionSetMetadata("DigitalSellingCompletedTask", Index=1081, Lcid=1033, Description="")]
        DigitalSellingCompletedTask = 10842,
        
        [EnumMember()]
        [OptionSetMetadata("Sales Tag", Index=278, Lcid=1033, Description="")]
        SalesTag = 10843,
        
        [EnumMember()]
        [OptionSetMetadata("Sequence", Index=61, Lcid=1033, Description="")]
        Sequence = 10844,
        
        [EnumMember()]
        [OptionSetMetadata("Sequence Stat", Index=62, Lcid=1033, Description="")]
        SequenceStat = 10845,
        
        [EnumMember()]
        [OptionSetMetadata("Sequence Target", Index=60, Lcid=1033, Description="")]
        SequenceTarget = 10846,
        
        [EnumMember()]
        [OptionSetMetadata("Sequence Target Step", Index=58, Lcid=1033, Description="")]
        SequenceTargetStep = 10847,
        
        [EnumMember()]
        [OptionSetMetadata("Sequence Template", Index=59, Lcid=1033, Description="")]
        SequenceTemplate = 10848,
        
        [EnumMember()]
        [OptionSetMetadata("sabackupdiagnostic", Index=254, Lcid=1033, Description="")]
        sabackupdiagnostic = 10850,
        
        [EnumMember()]
        [OptionSetMetadata("SABatchRunInstance", Index=255, Lcid=1033, Description="")]
        SABatchRunInstance = 10851,
        
        [EnumMember()]
        [OptionSetMetadata("salesroutingdiagnostic", Index=291, Lcid=1033, Description="")]
        salesroutingdiagnostic = 10852,
        
        [EnumMember()]
        [OptionSetMetadata("SARunInstance", Index=279, Lcid=1033, Description="")]
        SARunInstance = 10853,
        
        [EnumMember()]
        [OptionSetMetadata("Segment", Index=56, Lcid=1033, Description="")]
        Segment = 10854,
        
        [EnumMember()]
        [OptionSetMetadata("segmentsetting", Index=57, Lcid=1033, Description="")]
        segmentsetting = 10855,
        
        [EnumMember()]
        [OptionSetMetadata("Segment property", Index=55, Lcid=1033, Description="")]
        Segmentproperty = 10856,
        
        [EnumMember()]
        [OptionSetMetadata("SegmentsUtil", Index=53, Lcid=1033, Description="")]
        SegmentsUtil = 10857,
        
        [EnumMember()]
        [OptionSetMetadata("Assignment Rule", Index=1223, Lcid=1033, Description="Defines criteria based on which Entities are routed to Users or Sales Team")]
        AssignmentRule = 10858,
        
        [EnumMember()]
        [OptionSetMetadata("Seller attribute", Index=1224, Lcid=1033, Description="Sales Attribute")]
        Sellerattribute = 10859,
        
        [EnumMember()]
        [OptionSetMetadata("Seller attribute value", Index=1220, Lcid=1033, Description="Attribute Value of sales person or sales team")]
        Sellerattributevalue = 10860,
        
        [EnumMember()]
        [OptionSetMetadata("Assignment Map", Index=1216, Lcid=1033, Description="")]
        AssignmentMap = 10861,
        
        [EnumMember()]
        [OptionSetMetadata("Sales Assignment Setting", Index=261, Lcid=1033, Description="")]
        SalesAssignmentSetting = 10862,
        
        [EnumMember()]
        [OptionSetMetadata("Sales routing run", Index=292, Lcid=1033, Description="")]
        Salesroutingrun = 10863,
        
        [EnumMember()]
        [OptionSetMetadata("Extended User Setting", Index=1017, Lcid=1033, Description="")]
        ExtendedUserSetting = 10865,
        
        [EnumMember()]
        [OptionSetMetadata("Sales acceleration insights", Index=262, Lcid=1033, Description="Sales acceleration insights")]
        Salesaccelerationinsights = 10866,
        
        [EnumMember()]
        [OptionSetMetadata("Sales Acceleration settings", Index=263, Lcid=1033, Description="")]
        SalesAccelerationsettings = 10867,
        
        [EnumMember()]
        [OptionSetMetadata("Insight", Index=285, Lcid=1033, Description="")]
        Insight = 10868,
        
        [EnumMember()]
        [OptionSetMetadata("Work List Suggestion", Index=128, Lcid=1033, Description="")]
        WorkListSuggestion = 10869,
        
        [EnumMember()]
        [OptionSetMetadata("Work list suggestion source", Index=135, Lcid=1033, Description="")]
        Worklistsuggestionsource = 10870,
        
        [EnumMember()]
        [OptionSetMetadata("Work List View Configuration", Index=136, Lcid=1033, Description="Entity to store work list view configurations on filter, icons, sort etc")]
        WorkListViewConfiguration = 10871,
        
        [EnumMember()]
        [OptionSetMetadata("Work Queue Record", Index=134, Lcid=1033, Description="Entity created to store WorkQueue Data Model Records")]
        WorkQueueRecord = 10872,
        
        [EnumMember()]
        [OptionSetMetadata("Work Queue Record State", Index=132, Lcid=1033, Description="Entity created to store WorkQueue Records state")]
        WorkQueueRecordState = 10873,
        
        [EnumMember()]
        [OptionSetMetadata("Work list user setting", Index=133, Lcid=1033, Description="Entity created to store work list user setting")]
        Worklistusersetting = 10874,
        
        [EnumMember()]
        [OptionSetMetadata("WQDataSource", Index=162, Lcid=1033, Description="")]
        WQDataSource = 10875,
        
        [EnumMember()]
        [OptionSetMetadata("Suggestion Assignment Rule", Index=13, Lcid=1033, Description="")]
        SuggestionAssignmentRule = 10876,
        
        [EnumMember()]
        [OptionSetMetadata("Suggestion Principal Object Access", Index=12, Lcid=1033, Description="")]
        SuggestionPrincipalObjectAccess = 10877,
        
        [EnumMember()]
        [OptionSetMetadata("Suggestion Seller Priority", Index=20, Lcid=1033, Description="")]
        SuggestionSellerPriority = 10878,
        
        [EnumMember()]
        [OptionSetMetadata("Data Hygiene Setting Info", Index=1091, Lcid=1033, Description="Data Hygiene Setting Info")]
        DataHygieneSettingInfo = 10879,
        
        [EnumMember()]
        [OptionSetMetadata("Duplicate Detection Plugin Run", Index=1084, Lcid=1033, Description="Duplicate Detection Plugin Run used to track successful and failure state of the " +
            "Duplicate Detection Plugin")]
        DuplicateDetectionPluginRun = 10880,
        
        [EnumMember()]
        [OptionSetMetadata("Duplicate Lead Mapping", Index=1082, Lcid=1033, Description="This enity is used to connect base lead to duplicate leads")]
        DuplicateLeadMapping = 10881,
        
        [EnumMember()]
        [OptionSetMetadata("Lead Hygiene Setting", Index=1133, Lcid=1033, Description="Lead Hygiene Setting")]
        LeadHygieneSetting = 10882,
        
        [EnumMember()]
        [OptionSetMetadata("Linked Entity Attribute Validity", Index=1139, Lcid=1033, Description="")]
        LinkedEntityAttributeValidity = 10883,
        
        [EnumMember()]
        [OptionSetMetadata("Sales provisioning request", Index=42, Lcid=1033, Description="")]
        Salesprovisioningrequest = 10884,
        
        [EnumMember()]
        [OptionSetMetadata("SalesOmnichannel Message", Index=295, Lcid=1033, Description="")]
        SalesOmnichannelMessage = 10885,
        
        [EnumMember()]
        [OptionSetMetadata("Text message template", Index=293, Lcid=1033, Description="")]
        Textmessagetemplate = 10886,
        
        [EnumMember()]
        [OptionSetMetadata("Data Analytics Admin Settings (Deprecated)", Index=1187, Lcid=1033, Description="Data Analytics Admin Settings (Deprecated)")]
        DataAnalyticsAdminSettingsDeprecated = 10887,
        
        [EnumMember()]
        [OptionSetMetadata("Data Analytics Report", Index=1071, Lcid=1033, Description="Data Analytics Reports")]
        DataAnalyticsReport = 10888,
        
        [EnumMember()]
        [OptionSetMetadata("Insights", Index=1092, Lcid=1033, Description="Analytics and insights feature entity")]
        Insights = 10889,
        
        [EnumMember()]
        [OptionSetMetadata("Sales acceleration reports", Index=1059, Lcid=1033, Description="Sales acceleration reports")]
        Salesaccelerationreports = 10890,
        
        [EnumMember()]
        [OptionSetMetadata("Bot Session", Index=1205, Lcid=1033, Description="Bot specific sessions ")]
        BotSession = 10892,
        
        [EnumMember()]
        [OptionSetMetadata("Automated action rule", Index=214, Lcid=1033, Description="The omnichannel automated action rules.")]
        Automatedactionrule = 10893,
        
        [EnumMember()]
        [OptionSetMetadata("Automated action rules mapping", Index=215, Lcid=1033, Description="The mapping of omnichannel automated action rules.")]
        Automatedactionrulesmapping = 10894,
        
        [EnumMember()]
        [OptionSetMetadata("Agent Copilot Setting", Index=1260, Lcid=1033, Description="")]
        AgentCopilotSetting = 10895,
        
        [EnumMember()]
        [OptionSetMetadata("Copilot Summarization Setting", Index=1304, Lcid=1033, Description="")]
        CopilotSummarizationSetting = 10896,
        
        [EnumMember()]
        [OptionSetMetadata("intent", Index=1143, Lcid=1033, Description="Captures the unique natural language intent")]
        intent = 10897,
        
        [EnumMember()]
        [OptionSetMetadata("intentattribute", Index=1141, Lcid=1033, Description="Captures all possible attributes across all intents")]
        intentattribute = 10898,
        
        [EnumMember()]
        [OptionSetMetadata("intentattributeset", Index=1149, Lcid=1033, Description="Captures the attributes required to complete a given intent")]
        intentattributeset = 10899,
        
        [EnumMember()]
        [OptionSetMetadata("intentattribute_entity", Index=1142, Lcid=1033, Description="Associates the value of an intent attribute identified for a given case or conver" +
            "sation.")]
        intentattribute_entity = 10900,
        
        [EnumMember()]
        [OptionSetMetadata("Intent Config", Index=1150, Lcid=1033, Description="Configuration that captures the fields needed for intent determination")]
        IntentConfig = 10901,
        
        [EnumMember()]
        [OptionSetMetadata("intententity", Index=1148, Lcid=1033, Description="Associates an intent to any entity such as case, conversation to capture evolving" +
            " intent.")]
        intententity = 10902,
        
        [EnumMember()]
        [OptionSetMetadata("Line of Business", Index=1147, Lcid=1033, Description="")]
        LineofBusiness = 10903,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_intentfeature_configuration", Index=1177, Lcid=1033, Description="")]
        msdyn_intentfeature_configuration = 10904,
        
        [EnumMember()]
        [OptionSetMetadata("Intent Group Condition", Index=1175, Lcid=1033, Description="")]
        IntentGroupCondition = 10905,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_intentharvesting_batchjobstatus", Index=1173, Lcid=1033, Description="")]
        msdyn_intentharvesting_batchjobstatus = 10906,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_intentharvesting_provisioning_status", Index=1181, Lcid=1033, Description="")]
        msdyn_intentharvesting_provisioning_status = 10907,
        
        [EnumMember()]
        [OptionSetMetadata("Intent Solution Map", Index=1180, Lcid=1033, Description="Captures Solutions for Intent Groups")]
        IntentSolutionMap = 10908,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_intentsolution_mappingconfiguration", Index=1182, Lcid=1033, Description="")]
        msdyn_intentsolution_mappingconfiguration = 10909,
        
        [EnumMember()]
        [OptionSetMetadata("Case Enrichment", Index=1209, Lcid=1033, Description="")]
        CaseEnrichment = 10910,
        
        [EnumMember()]
        [OptionSetMetadata("Case follow up and closure configuration", Index=1210, Lcid=1033, Description="")]
        Casefollowupandclosureconfiguration = 10911,
        
        [EnumMember()]
        [OptionSetMetadata("Case Suggestion", Index=1267, Lcid=1033, Description="")]
        CaseSuggestion = 10912,
        
        [EnumMember()]
        [OptionSetMetadata("Case Suggestion Request Payload", Index=1324, Lcid=1033, Description="")]
        CaseSuggestionRequestPayload = 10913,
        
        [EnumMember()]
        [OptionSetMetadata("Case Suggestions Data Souce", Index=1325, Lcid=1033, Description="")]
        CaseSuggestionsDataSouce = 10914,
        
        [EnumMember()]
        [OptionSetMetadata("Agent Preference For Copilot", Index=1276, Lcid=1033, Description="")]
        AgentPreferenceForCopilot = 10915,
        
        [EnumMember()]
        [OptionSetMetadata("Copilot Interaction", Index=1275, Lcid=1033, Description="")]
        CopilotInteraction = 10916,
        
        [EnumMember()]
        [OptionSetMetadata("Copilot Interaction Data", Index=1273, Lcid=1033, Description="")]
        CopilotInteractionData = 10917,
        
        [EnumMember()]
        [OptionSetMetadata("Copilot knowledge interaction", Index=1303, Lcid=1033, Description="Record of copilot using knowledge article")]
        Copilotknowledgeinteraction = 10918,
        
        [EnumMember()]
        [OptionSetMetadata("Copilot Transcript", Index=1302, Lcid=1033, Description="")]
        CopilotTranscript = 10919,
        
        [EnumMember()]
        [OptionSetMetadata("Copilot Transcript Data", Index=1300, Lcid=1033, Description="")]
        CopilotTranscriptData = 10920,
        
        [EnumMember()]
        [OptionSetMetadata("KB Enrichment", Index=1111, Lcid=1033, Description="")]
        KBEnrichment = 10921,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge Article Suggestion", Index=1116, Lcid=1033, Description="")]
        KnowledgeArticleSuggestion = 10922,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge Article Suggestion Data Source", Index=1109, Lcid=1033, Description="")]
        KnowledgeArticleSuggestionDataSource = 10923,
        
        [EnumMember()]
        [OptionSetMetadata("Next Action", Index=222, Lcid=1033, Description="")]
        NextAction = 10924,
        
        [EnumMember()]
        [OptionSetMetadata("Service Copilot Plugin", Index=45, Lcid=1033, Description="")]
        ServiceCopilotPlugin = 10925,
        
        [EnumMember()]
        [OptionSetMetadata("Service Copilot Plugin Action", Index=46, Lcid=1033, Description="")]
        ServiceCopilotPluginAction = 10926,
        
        [EnumMember()]
        [OptionSetMetadata("Service Copilot Plugin Role", Index=44, Lcid=1033, Description="")]
        ServiceCopilotPluginRole = 10927,
        
        [EnumMember()]
        [OptionSetMetadata("Suggestion Interaction", Index=11, Lcid=1033, Description="")]
        SuggestionInteraction = 10928,
        
        [EnumMember()]
        [OptionSetMetadata("Suggestion request payload", Index=19, Lcid=1033, Description="")]
        Suggestionrequestpayload = 10929,
        
        [EnumMember()]
        [OptionSetMetadata("Suggestions Model Summary", Index=18, Lcid=1033, Description="Suggestions Model Summary entity")]
        SuggestionsModelSummary = 10930,
        
        [EnumMember()]
        [OptionSetMetadata("Suggestions Setting", Index=16, Lcid=1033, Description="Suggestions settings entity")]
        SuggestionsSetting = 10931,
        
        [EnumMember()]
        [OptionSetMetadata("Data Analytics User Customized Report", Index=1295, Lcid=1033, Description="Data Analytics User Customized Report")]
        DataAnalyticsUserCustomizedReport = 10932,
        
        [EnumMember()]
        [OptionSetMetadata("Data Analytics Dataset", Index=1070, Lcid=1033, Description="Data Analytics Power BI Datasets")]
        DataAnalyticsDataset = 10933,
        
        [EnumMember()]
        [OptionSetMetadata("Data Analytics Workspace", Index=1056, Lcid=1033, Description="Data Analytics Power BI Workspaces")]
        DataAnalyticsWorkspace = 10934,
        
        [EnumMember()]
        [OptionSetMetadata("Report Bookmark", Index=272, Lcid=1033, Description="")]
        ReportBookmark = 10935,
        
        [EnumMember()]
        [OptionSetMetadata("Agent Resource Forecasting", Index=1264, Lcid=1033, Description="Agent Resource Forecasting")]
        AgentResourceForecasting = 10936,
        
        [EnumMember()]
        [OptionSetMetadata("[Deprecated] Dynamics Customer Service Analytics", Index=1185, Lcid=1033, Description="[Deprecated] Controls access to Analytics Reporting Sitemap in Dynamics Customer " +
            "Service App")]
        DeprecatedDynamicsCustomerServiceAnalytics = 10937,
        
        [EnumMember()]
        [OptionSetMetadata("Case Topic", Index=1323, Lcid=1033, Description="")]
        CaseTopic = 10938,
        
        [EnumMember()]
        [OptionSetMetadata("Case Topic Setting", Index=1322, Lcid=1033, Description="Case Topic Setting Entity")]
        CaseTopicSetting = 10939,
        
        [EnumMember()]
        [OptionSetMetadata("Case Topic Summary", Index=1329, Lcid=1033, Description="Case Topic Summary Entity")]
        CaseTopicSummary = 10940,
        
        [EnumMember()]
        [OptionSetMetadata("Case topic Incident mapping", Index=1321, Lcid=1033, Description="Cases mapping with the case topics")]
        CasetopicIncidentmapping = 10941,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Service historical analytics", Index=1067, Lcid=1033, Description="Customer Service historical analytics")]
        CustomerServicehistoricalanalytics = 10942,
        
        [EnumMember()]
        [OptionSetMetadata("Forecast", Index=1075, Lcid=1033, Description="Case, Conversation Volume Forecast analytics")]
        Forecast_3 = 10943,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge analytics", Index=1076, Lcid=1033, Description="Knowledge analytics")]
        Knowledgeanalytics = 10944,
        
        [EnumMember()]
        [OptionSetMetadata("Model Customization analytics", Index=1074, Lcid=1033, Description="Model Customization analytics")]
        ModelCustomizationanalytics = 10945,
        
        [EnumMember()]
        [OptionSetMetadata("UR RecordRouting Real-time Analytics", Index=1058, Lcid=1033, Description="UR RecordRouting Real-time Analytics")]
        URRecordRoutingRealtimeAnalytics = 10946,
        
        [EnumMember()]
        [OptionSetMetadata("Forecast Summary and Setting", Index=1044, Lcid=1033, Description="")]
        ForecastSummaryandSetting = 10947,
        
        [EnumMember()]
        [OptionSetMetadata("Keywords Description Suggestion Setting", Index=1118, Lcid=1033, Description="Keywords Description Suggestion settings entity")]
        KeywordsDescriptionSuggestionSetting = 10948,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Summary Interaction", Index=1286, Lcid=1033, Description="Conversation Summary Interaction Entity")]
        ConversationSummaryInteraction = 10949,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Summary Setting", Index=1284, Lcid=1033, Description="Conversation Summary Settings Entity")]
        ConversationSummarySetting = 10950,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Topic", Index=1272, Lcid=1033, Description="")]
        ConversationTopic = 10951,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Topic Setting", Index=1268, Lcid=1033, Description="Conversation Topic Setting Entity")]
        ConversationTopicSetting = 10952,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation Topic Summary", Index=1269, Lcid=1033, Description="Conversation Topic Summary Entity")]
        ConversationTopicSummary = 10953,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation topic Conversation mapping", Index=1270, Lcid=1033, Description="Conversation mapping with conversation topics")]
        ConversationtopicConversationmapping = 10954,
        
        [EnumMember()]
        [OptionSetMetadata("Omnichannel historical analytics", Index=1072, Lcid=1033, Description="Omnichannel historical analytics")]
        Omnichannelhistoricalanalytics = 10955,
        
        [EnumMember()]
        [OptionSetMetadata("Omnichannel voice historical analytics (preview) (Deprecated)", Index=1066, Lcid=1033, Description="Omnichannel voice historical analytics (preview) (Deprecated)")]
        OmnichannelvoicehistoricalanalyticspreviewDeprecated = 10956,
        
        [EnumMember()]
        [OptionSetMetadata("Omnichannel Realtime analytics", Index=1073, Lcid=1033, Description="Omnichannel Realtime analytics")]
        OmnichannelRealtimeanalytics = 10957,
        
        [EnumMember()]
        [OptionSetMetadata("Copilot Analytics", Index=1069, Lcid=1033, Description="Case, Conversation, Email Copilot interaction analytics")]
        CopilotAnalytics = 10958,
        
        [EnumMember()]
        [OptionSetMetadata("Product", Index=787, Lcid=1033, Description="")]
        Product_2 = 10959,
        
        [EnumMember()]
        [OptionSetMetadata("Template Rule Set", Index=32, Lcid=1033, Description="Contains template rulesets that can be applied to custom assignment method in a q" +
            "ueue")]
        TemplateRuleSet = 11029,
        
        [EnumMember()]
        [OptionSetMetadata("Entity Attribute Prediction Rule", Index=1027, Lcid=1033, Description="")]
        EntityAttributePredictionRule = 11030,
        
        [EnumMember()]
        [OptionSetMetadata("Invoice Collection", Index=789, Lcid=1033, Description="")]
        InvoiceCollection = 11051,
        
        [EnumMember()]
        [OptionSetMetadata("Subscription", Index=788, Lcid=1033, Description="Entity description")]
        Subscription_2 = 11060,
        
        [EnumMember()]
        [OptionSetMetadata("SharePoint Managed Identity", Index=349, Lcid=1033, Description="Entity representing a managed identity for SharePoint, used for authentication an" +
            "d authorization purposes.")]
        SharePointManagedIdentity = 11114,
        
        [EnumMember()]
        [OptionSetMetadata("AI Insight Card", Index=922, Lcid=1033, Description="")]
        AIInsightCard = 11115,
        
        [EnumMember()]
        [OptionSetMetadata("Processor Registration", Index=635, Lcid=1033, Description="")]
        ProcessorRegistration = 11116,
        
        [EnumMember()]
        [OptionSetMetadata("Signal Registration", Index=356, Lcid=1033, Description="")]
        SignalRegistration = 11117,
        
        [EnumMember()]
        [OptionSetMetadata("Trait Registration", Index=434, Lcid=1033, Description="")]
        TraitRegistration = 11118,
        
        [EnumMember()]
        [OptionSetMetadata("Email analytics", Index=1068, Lcid=1033, Description="Email analytics")]
        Emailanalytics = 11119,
        
        [EnumMember()]
        [OptionSetMetadata("LOB Backfill Status", Index=1146, Lcid=1033, Description="")]
        LOBBackfillStatus = 11120,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_intentfamily_harvestingconfiguration", Index=1176, Lcid=1033, Description="")]
        msdyn_intentfamily_harvestingconfiguration = 11121,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_intentharvesting_batchjobstatusdetail", Index=1174, Lcid=1033, Description="")]
        msdyn_intentharvesting_batchjobstatusdetail = 11122,
        
        [EnumMember()]
        [OptionSetMetadata("Copilot assisted case form fill settings", Index=1277, Lcid=1033, Description="Copilot assisted case form fill settings")]
        Copilotassistedcaseformfillsettings = 11123,
        
        [EnumMember()]
        [OptionSetMetadata("Sales usage telemetry reports", Index=1060, Lcid=1033, Description="Sales usage telemetry reports")]
        Salesusagetelemetryreports = 11124,
        
        [EnumMember()]
        [OptionSetMetadata("Sales usage reporting", Index=84, Lcid=1033, Description="Sales usage reporting")]
        Salesusagereporting = 11125,
        
        [EnumMember()]
        [OptionSetMetadata("Derived insights related entity", Index=1087, Lcid=1033, Description="Derived insights related entities")]
        Derivedinsightsrelatedentity = 11126,
        
        [EnumMember()]
        [OptionSetMetadata("Entity derived insights", Index=1033, Lcid=1033, Description="Entity derived insights")]
        Entityderivedinsights = 11127,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_rawinsight", Index=317, Lcid=1033, Description="")]
        msdyn_rawinsight = 11128,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_rawinsightentitylink", Index=318, Lcid=1033, Description="")]
        msdyn_rawinsightentitylink = 11129,
        
        [EnumMember()]
        [OptionSetMetadata("Sales Copilot Email Insight", Index=259, Lcid=1033, Description="Entity used to keep the actions derived from email")]
        SalesCopilotEmailInsight = 11130,
        
        [EnumMember()]
        [OptionSetMetadata("Sales Copilot Insight Card State", Index=289, Lcid=1033, Description="This entity used to store actions performed by users on the entity like snooze/di" +
            "smiss.")]
        SalesCopilotInsightCardState = 11131,
        
        [EnumMember()]
        [OptionSetMetadata("Copilot Interactions", Index=1274, Lcid=1033, Description="Data table of previous copilot interactions.")]
        CopilotInteractions = 11132,
        
        [EnumMember()]
        [OptionSetMetadata("Email Sentiment", Index=1028, Lcid=1033, Description="")]
        EmailSentiment = 11133,
        
        [EnumMember()]
        [OptionSetMetadata("Agent Group Language", Index=1259, Lcid=1033, Description="Represents the association of user groups with language")]
        AgentGroupLanguage = 11134,
        
        [EnumMember()]
        [OptionSetMetadata("Agent Group Region", Index=1258, Lcid=1033, Description="Represents the association of user groups with region")]
        AgentGroupRegion = 11135,
        
        [EnumMember()]
        [OptionSetMetadata("Agent Language", Index=1265, Lcid=1033, Description="Represents the association of users with language ")]
        AgentLanguage = 11136,
        
        [EnumMember()]
        [OptionSetMetadata("Agent Region", Index=1266, Lcid=1033, Description="Represents the association of users with region")]
        AgentRegion = 11137,
        
        [EnumMember()]
        [OptionSetMetadata("Language Hierarchy", Index=1135, Lcid=1033, Description="This entity is used to identify the language preference of end customers. Users a" +
            "nd user groups are decorated with language, and matched with conversations to ro" +
            "ute them. Users and user groups decoration also supports hierarchy")]
        LanguageHierarchy = 11138,
        
        [EnumMember()]
        [OptionSetMetadata("Region", Index=266, Lcid=1033, Description="This entity is used to identify the region of end customers. Users and user group" +
            "s are decorated with region, and matched with conversations to route them. Users" +
            " and user groups decoration also supports hierarchy. ")]
        Region = 11139,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_historicalcaseharvestbatch", Index=1154, Lcid=1033, Description="")]
        msdyn_historicalcaseharvestbatch = 11140,
        
        [EnumMember()]
        [OptionSetMetadata("msdyn_historicalcaseharvestrun", Index=1152, Lcid=1033, Description="")]
        msdyn_historicalcaseharvestrun = 11141,
        
        [EnumMember()]
        [OptionSetMetadata("Knowledge Harvest Job Record", Index=1099, Lcid=1033, Description="Tracking entity record used to trigger the harvesting process for knowledge artic" +
            "les")]
        KnowledgeHarvestJobRecord = 11142,
        
        [EnumMember()]
        [OptionSetMetadata("Transaction", Index=1239, Lcid=1033, Description="This table contains records of transaction information")]
        Transaction = 11143,
        
        [EnumMember()]
        [OptionSetMetadata("Invoice", Index=791, Lcid=1033, Description="This table contains records of invoice information")]
        Invoice = 11144,
        
        [EnumMember()]
        [OptionSetMetadata("Plan", Index=206, Lcid=1033, Description="Table that stores plan records.")]
        Plan = 11145,
        
        [EnumMember()]
        [OptionSetMetadata("Plan Artifact", Index=207, Lcid=1033, Description="Table that stores the artifact records for a plan.")]
        PlanArtifact = 11146,
        
        [EnumMember()]
        [OptionSetMetadata("Plan Attachment", Index=200, Lcid=1033, Description="")]
        PlanAttachment = 11147,
        
        [EnumMember()]
        [OptionSetMetadata("Data Workspace", Index=453, Lcid=1033, Description="Table that stores Data workspace records.")]
        DataWorkspace = 11151,
        
        [EnumMember()]
        [OptionSetMetadata("TextDataRecordsIndexingStatus", Index=451, Lcid=1033, Description="Stores information about unstructured / text data records indexing status")]
        TextDataRecordsIndexingStatus = 11152,
        
        [EnumMember()]
        [OptionSetMetadata("Auto Case Closure Agent Activity", Index=449, Lcid=1033, Description="")]
        AutoCaseClosureAgentActivity = 11153,
        
        [EnumMember()]
        [OptionSetMetadata("Auto Case Closure Agent Monitoring", Index=450, Lcid=1033, Description="")]
        AutoCaseClosureAgentMonitoring = 11154,
    }
    
    [DataContract()]
    public enum DuplicateRule_StatusCode {
        
        [EnumMember()]
        [OptionSetMetadata("Unpublished", Index=0, Lcid=1033)]
        Unpublished = 0,
        
        [EnumMember()]
        [OptionSetMetadata("Publishing", Index=1, Lcid=1033)]
        Publishing = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Published", Index=2, Lcid=1033)]
        Published = 2,
    }
    
    [DataContract()]
    public enum EnvironmentVariableDefinitionState {
        
        [EnumMember()]
        [OptionSetMetadata("Active", Index=0, Lcid=1033)]
        Active = 0,
        
        [EnumMember()]
        [OptionSetMetadata("Inactive", Index=1, Lcid=1033)]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum EnvironmentVariableDefinition_SecretStore {
        
        [EnumMember()]
        [OptionSetMetadata("Azure Key Vault", Index=0, Lcid=1033, Color="#0000ff")]
        AzureKeyVault = 0,
        
        [EnumMember()]
        [OptionSetMetadata("Microsoft Dataverse", Index=1, Lcid=1033, Color="#0000ff")]
        MicrosoftDataverse = 1,
    }
    
    [DataContract()]
    public enum EnvironmentVariableDefinition_Type {
        
        [EnumMember()]
        [OptionSetMetadata("String", Index=0, Lcid=1033, Color="#0000ff")]
        String = 100000000,
        
        [EnumMember()]
        [OptionSetMetadata("Number", Index=1, Lcid=1033, Color="#0000ff")]
        Number = 100000001,
        
        [EnumMember()]
        [OptionSetMetadata("Boolean", Index=2, Lcid=1033, Color="#0000ff")]
        Boolean = 100000002,
        
        [EnumMember()]
        [OptionSetMetadata("JSON", Index=3, Lcid=1033, Color="#0000ff")]
        JSON = 100000003,
        
        [EnumMember()]
        [OptionSetMetadata("Data Source", Index=4, Lcid=1033, Color="#0000ff")]
        DataSource = 100000004,
        
        [EnumMember()]
        [OptionSetMetadata("Secret", Index=5, Lcid=1033, Color="#0000ff")]
        Secret = 100000005,
    }
    
    [DataContract()]
    public enum EnvironmentVariableDefinition_statuscode {
        
        [EnumMember()]
        [OptionSetMetadata("Active", Index=0, Lcid=1033)]
        Active = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Inactive", Index=1, Lcid=1033)]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum EnvironmentVariableValueState {
        
        [EnumMember()]
        [OptionSetMetadata("Active", Index=0, Lcid=1033)]
        Active = 0,
        
        [EnumMember()]
        [OptionSetMetadata("Inactive", Index=1, Lcid=1033)]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum EnvironmentVariableValue_statuscode {
        
        [EnumMember()]
        [OptionSetMetadata("Active", Index=0, Lcid=1033)]
        Active = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Inactive", Index=1, Lcid=1033)]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum QueueState {
        
        [EnumMember()]
        [OptionSetMetadata("Active", Index=0, Lcid=1033)]
        Active = 0,
        
        [EnumMember()]
        [OptionSetMetadata("Inactive", Index=1, Lcid=1033)]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum Queue_EmailRouterAccessApproval {
        
        [EnumMember()]
        [OptionSetMetadata("Empty", Index=0, Lcid=1033)]
        Empty = 0,
        
        [EnumMember()]
        [OptionSetMetadata("Approved", Index=1, Lcid=1033)]
        Approved = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Pending Approval", Index=2, Lcid=1033)]
        PendingApproval = 2,
        
        [EnumMember()]
        [OptionSetMetadata("Rejected", Index=3, Lcid=1033)]
        Rejected = 3,
    }
    
    [DataContract()]
    public enum Queue_IncomingEmailDeliveryMethod {
        
        [EnumMember()]
        [OptionSetMetadata("None", Index=0, Lcid=1033)]
        None = 0,
        
        [EnumMember()]
        [OptionSetMetadata("Server-Side Synchronization or Email Router", Index=1, Lcid=1033)]
        ServerSideSynchronizationorEmailRouter = 2,
        
        [EnumMember()]
        [OptionSetMetadata("Forward Mailbox", Index=2, Lcid=1033)]
        ForwardMailbox = 3,
    }
    
    [DataContract()]
    public enum Queue_IncomingEmailFilteringMethod {
        
        [EnumMember()]
        [OptionSetMetadata("All email messages", Index=0, Lcid=1033)]
        Allemailmessages = 0,
        
        [EnumMember()]
        [OptionSetMetadata("Email messages in response to Dynamics 365 email", Index=1, Lcid=1033)]
        EmailmessagesinresponsetoDynamics365email = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Email messages from Dynamics 365 Leads, Contacts and Accounts", Index=2, Lcid=1033)]
        EmailmessagesfromDynamics365LeadsContactsandAccounts = 2,
        
        [EnumMember()]
        [OptionSetMetadata("Email messages from Dynamics 365 records that are email enabled", Index=3, Lcid=1033)]
        EmailmessagesfromDynamics365recordsthatareemailenabled = 3,
        
        [EnumMember()]
        [OptionSetMetadata("No email messages", Index=4, Lcid=1033)]
        Noemailmessages = 4,
    }
    
    [DataContract()]
    public enum Queue_OutgoingEmailDeliveryMethod {
        
        [EnumMember()]
        [OptionSetMetadata("None", Index=0, Lcid=1033)]
        None = 0,
        
        [EnumMember()]
        [OptionSetMetadata("Server-Side Synchronization or Email Router", Index=1, Lcid=1033)]
        ServerSideSynchronizationorEmailRouter = 2,
    }
    
    [DataContract()]
    public enum Queue_QueueTypeCode {
        
        [EnumMember()]
        [OptionSetMetadata("Default Value", Index=0, Lcid=1033)]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Queue_QueueViewType {
        
        [EnumMember()]
        [OptionSetMetadata("Public", Index=0, Lcid=1033)]
        Public = 0,
        
        [EnumMember()]
        [OptionSetMetadata("Private", Index=1, Lcid=1033)]
        Private = 1,
    }
    
    [DataContract()]
    public enum Queue_StatusCode {
        
        [EnumMember()]
        [OptionSetMetadata("Active", Index=1, Lcid=1033)]
        Active = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Inactive", Index=0, Lcid=1033)]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum SavedQueryState {
        
        [EnumMember()]
        [OptionSetMetadata("Active", Index=0, Lcid=1033)]
        Active = 0,
        
        [EnumMember()]
        [OptionSetMetadata("Inactive", Index=1, Lcid=1033)]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum SavedQuery_StatusCode {
        
        [EnumMember()]
        [OptionSetMetadata("Active", Index=0, Lcid=1033)]
        Active = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Inactive", Index=1, Lcid=1033)]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum SystemUser_AccessMode {
        
        [EnumMember()]
        [OptionSetMetadata("Read-Write", Index=0, Lcid=1033)]
        ReadWrite = 0,
        
        [EnumMember()]
        [OptionSetMetadata("Administrative", Index=1, Lcid=1033)]
        Administrative = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Read", Index=2, Lcid=1033)]
        Read = 2,
        
        [EnumMember()]
        [OptionSetMetadata("Support User", Index=3, Lcid=1033)]
        SupportUser = 3,
        
        [EnumMember()]
        [OptionSetMetadata("Non-interactive", Index=4, Lcid=1033)]
        Noninteractive = 4,
        
        [EnumMember()]
        [OptionSetMetadata("Delegated Admin", Index=5, Lcid=1033)]
        DelegatedAdmin = 5,
    }
    
    [DataContract()]
    public enum SystemUser_Address1_AddressTypeCode {
        
        [EnumMember()]
        [OptionSetMetadata("Default Value", Index=0, Lcid=1033)]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum SystemUser_Address1_ShippingMethodCode {
        
        [EnumMember()]
        [OptionSetMetadata("Default Value", Index=0, Lcid=1033)]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum SystemUser_Address2_AddressTypeCode {
        
        [EnumMember()]
        [OptionSetMetadata("Default Value", Index=0, Lcid=1033)]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum SystemUser_Address2_ShippingMethodCode {
        
        [EnumMember()]
        [OptionSetMetadata("Default Value", Index=0, Lcid=1033)]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum SystemUser_AzureState {
        
        [EnumMember()]
        [OptionSetMetadata("Exists", Index=0, Lcid=1033)]
        Exists = 0,
        
        [EnumMember()]
        [OptionSetMetadata("Soft deleted", Index=1, Lcid=1033)]
        Softdeleted = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Not found or hard deleted", Index=2, Lcid=1033)]
        Notfoundorharddeleted = 2,
    }
    
    [DataContract()]
    public enum SystemUser_CALType {
        
        [EnumMember()]
        [OptionSetMetadata("Professional", Index=0, Lcid=1033)]
        Professional = 0,
        
        [EnumMember()]
        [OptionSetMetadata("Administrative", Index=1, Lcid=1033)]
        Administrative = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Basic", Index=2, Lcid=1033)]
        Basic = 2,
        
        [EnumMember()]
        [OptionSetMetadata("Device Professional", Index=3, Lcid=1033)]
        DeviceProfessional = 3,
        
        [EnumMember()]
        [OptionSetMetadata("Device Basic", Index=4, Lcid=1033)]
        DeviceBasic = 4,
        
        [EnumMember()]
        [OptionSetMetadata("Essential", Index=5, Lcid=1033)]
        Essential = 5,
        
        [EnumMember()]
        [OptionSetMetadata("Device Essential", Index=6, Lcid=1033)]
        DeviceEssential = 6,
        
        [EnumMember()]
        [OptionSetMetadata("Enterprise", Index=7, Lcid=1033)]
        Enterprise = 7,
        
        [EnumMember()]
        [OptionSetMetadata("Device Enterprise", Index=8, Lcid=1033)]
        DeviceEnterprise = 8,
        
        [EnumMember()]
        [OptionSetMetadata("Sales", Index=9, Lcid=1033)]
        Sales = 9,
        
        [EnumMember()]
        [OptionSetMetadata("Service", Index=10, Lcid=1033)]
        Service = 10,
        
        [EnumMember()]
        [OptionSetMetadata("Field Service", Index=11, Lcid=1033)]
        FieldService = 11,
        
        [EnumMember()]
        [OptionSetMetadata("Project Service", Index=12, Lcid=1033)]
        ProjectService = 12,
    }
    
    [DataContract()]
    public enum SystemUser_DeletedState {
        
        [EnumMember()]
        [OptionSetMetadata("Not deleted", Index=0, Lcid=1033)]
        Notdeleted = 0,
        
        [EnumMember()]
        [OptionSetMetadata("Soft deleted", Index=1, Lcid=1033)]
        Softdeleted = 1,
    }
    
    [DataContract()]
    public enum SystemUser_EmailRouterAccessApproval {
        
        [EnumMember()]
        [OptionSetMetadata("Empty", Index=0, Lcid=1033)]
        Empty = 0,
        
        [EnumMember()]
        [OptionSetMetadata("Approved", Index=1, Lcid=1033)]
        Approved = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Pending Approval", Index=2, Lcid=1033)]
        PendingApproval = 2,
        
        [EnumMember()]
        [OptionSetMetadata("Rejected", Index=3, Lcid=1033)]
        Rejected = 3,
    }
    
    [DataContract()]
    public enum SystemUser_IncomingEmailDeliveryMethod {
        
        [EnumMember()]
        [OptionSetMetadata("None", Index=0, Lcid=1033)]
        None = 0,
        
        [EnumMember()]
        [OptionSetMetadata("Microsoft Dynamics 365 for Outlook", Index=1, Lcid=1033)]
        MicrosoftDynamics365forOutlook = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Server-Side Synchronization or Email Router", Index=2, Lcid=1033)]
        ServerSideSynchronizationorEmailRouter = 2,
        
        [EnumMember()]
        [OptionSetMetadata("Forward Mailbox", Index=3, Lcid=1033)]
        ForwardMailbox = 3,
    }
    
    [DataContract()]
    public enum SystemUser_InviteStatusCode {
        
        [EnumMember()]
        [OptionSetMetadata("Invitation Not Sent", Index=0, Lcid=1033)]
        InvitationNotSent = 0,
        
        [EnumMember()]
        [OptionSetMetadata("Invited", Index=1, Lcid=1033)]
        Invited = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Invitation Near Expired", Index=2, Lcid=1033)]
        InvitationNearExpired = 2,
        
        [EnumMember()]
        [OptionSetMetadata("Invitation Expired", Index=3, Lcid=1033)]
        InvitationExpired = 3,
        
        [EnumMember()]
        [OptionSetMetadata("Invitation Accepted", Index=4, Lcid=1033)]
        InvitationAccepted = 4,
        
        [EnumMember()]
        [OptionSetMetadata("Invitation Rejected", Index=5, Lcid=1033)]
        InvitationRejected = 5,
        
        [EnumMember()]
        [OptionSetMetadata("Invitation Revoked", Index=6, Lcid=1033)]
        InvitationRevoked = 6,
    }
    
    [DataContract()]
    public enum SystemUser_OutgoingEmailDeliveryMethod {
        
        [EnumMember()]
        [OptionSetMetadata("None", Index=0, Lcid=1033)]
        None = 0,
        
        [EnumMember()]
        [OptionSetMetadata("Microsoft Dynamics 365 for Outlook", Index=1, Lcid=1033)]
        MicrosoftDynamics365forOutlook = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Server-Side Synchronization or Email Router", Index=2, Lcid=1033)]
        ServerSideSynchronizationorEmailRouter = 2,
    }
    
    [DataContract()]
    public enum SystemUser_PreferredAddressCode {
        
        [EnumMember()]
        [OptionSetMetadata("Mailing Address", Index=0, Lcid=1033)]
        MailingAddress = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Other Address", Index=1, Lcid=1033)]
        OtherAddress = 2,
    }
    
    [DataContract()]
    public enum SystemUser_PreferredEmailCode {
        
        [EnumMember()]
        [OptionSetMetadata("Default Value", Index=0, Lcid=1033)]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum SystemUser_PreferredPhoneCode {
        
        [EnumMember()]
        [OptionSetMetadata("Main Phone", Index=0, Lcid=1033)]
        MainPhone = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Other Phone", Index=1, Lcid=1033)]
        OtherPhone = 2,
        
        [EnumMember()]
        [OptionSetMetadata("Home Phone", Index=2, Lcid=1033)]
        HomePhone = 3,
        
        [EnumMember()]
        [OptionSetMetadata("Mobile Phone", Index=3, Lcid=1033)]
        MobilePhone = 4,
    }
    
    [DataContract()]
    public enum SystemUser_SystemManagedUserType {
        
        [EnumMember()]
        [OptionSetMetadata("Entra User", Index=0, Lcid=1033)]
        EntraUser = 0,
        
        [EnumMember()]
        [OptionSetMetadata("C2 User", Index=1, Lcid=1033)]
        C2User = 1,
    }
    
    [DataContract()]
    public enum SystemUser_msdyn_AgentType {
        
        [EnumMember()]
        [OptionSetMetadata("Application user", Index=0, Lcid=1033, Color="#0000ff")]
        Applicationuser = 192350000,
        
        [EnumMember()]
        [OptionSetMetadata("Bot application user", Index=1, Lcid=1033, Color="#0000ff")]
        Botapplicationuser = 192350001,
    }
    
    [DataContract()]
    public enum SystemUser_msdyn_BotProvider {
        
        [EnumMember()]
        [OptionSetMetadata("Virtual Agent", Index=0, Lcid=1033, Description="CCI first party Bot", Color="#0000ff")]
        VirtualAgent = 192350000,
        
        [EnumMember()]
        [OptionSetMetadata("Other", Index=1, Lcid=1033, Description="Other type of bot", Color="#0000ff")]
        Other = 192350001,
        
        [EnumMember()]
        [OptionSetMetadata("None", Index=2, Lcid=1033, Description="Indicates that the user is not a bot", Color="#0000ff")]
        None = 192350002,
    }
    
    [DataContract()]
    public enum SystemUser_msdyn_UserType {
        
        [EnumMember()]
        [OptionSetMetadata("CRM User", Index=0, Lcid=1033, Color="#0000ff")]
        CRMUser = 192350000,
        
        [EnumMember()]
        [OptionSetMetadata("BOT User", Index=1, Lcid=1033, Color="#0000ff")]
        BOTUser = 192350001,
    }
    
    [DataContract()]
    public enum TaskState {
        
        [EnumMember()]
        [OptionSetMetadata("Open", Index=0, Lcid=1033)]
        Open = 0,
        
        [EnumMember()]
        [OptionSetMetadata("Completed", Index=1, Lcid=1033)]
        Completed = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Canceled", Index=2, Lcid=1033)]
        Canceled = 2,
    }
    
    [DataContract()]
    public enum Task_PriorityCode {
        
        [EnumMember()]
        [OptionSetMetadata("Low", Index=0, Lcid=1033)]
        Low = 0,
        
        [EnumMember()]
        [OptionSetMetadata("Normal", Index=1, Lcid=1033)]
        Normal = 1,
        
        [EnumMember()]
        [OptionSetMetadata("High", Index=2, Lcid=1033)]
        High = 2,
    }
    
    [DataContract()]
    public enum Task_StatusCode {
        
        [EnumMember()]
        [OptionSetMetadata("Not Started", Index=0, Lcid=1033)]
        NotStarted = 2,
        
        [EnumMember()]
        [OptionSetMetadata("In Progress", Index=1, Lcid=1033)]
        InProgress = 3,
        
        [EnumMember()]
        [OptionSetMetadata("Waiting on someone else", Index=2, Lcid=1033)]
        Waitingonsomeoneelse = 4,
        
        [EnumMember()]
        [OptionSetMetadata("Completed", Index=3, Lcid=1033)]
        Completed = 5,
        
        [EnumMember()]
        [OptionSetMetadata("Canceled", Index=4, Lcid=1033)]
        Canceled = 6,
        
        [EnumMember()]
        [OptionSetMetadata("Deferred", Index=5, Lcid=1033)]
        Deferred = 7,
    }
    
    [DataContract()]
    public enum Template_TemplateTypeCode {
        
        [EnumMember()]
        [OptionSetMetadata("Account", Index=0, Lcid=1033)]
        Account = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Contact", Index=1, Lcid=1033)]
        Contact = 2,
        
        [EnumMember()]
        [OptionSetMetadata("Opportunity", Index=10, Lcid=1033)]
        Opportunity = 3,
        
        [EnumMember()]
        [OptionSetMetadata("Lead", Index=4, Lcid=1033)]
        Lead = 4,
        
        [EnumMember()]
        [OptionSetMetadata("User", Index=3, Lcid=1033)]
        User = 8,
        
        [EnumMember()]
        [OptionSetMetadata("Case", Index=6, Lcid=1033)]
        Case = 112,
        
        [EnumMember()]
        [OptionSetMetadata("Contract", Index=7, Lcid=1033)]
        Contract = 1010,
        
        [EnumMember()]
        [OptionSetMetadata("Quote", Index=11, Lcid=1033)]
        Quote = 1084,
        
        [EnumMember()]
        [OptionSetMetadata("Order", Index=12, Lcid=1033)]
        Order = 1088,
        
        [EnumMember()]
        [OptionSetMetadata("Invoice", Index=13, Lcid=1033)]
        Invoice = 1090,
        
        [EnumMember()]
        [OptionSetMetadata("Service Activity", Index=8, Lcid=1033)]
        ServiceActivity = 4214,
        
        [EnumMember()]
        [OptionSetMetadata("Campaign Activity", Index=5, Lcid=1033)]
        CampaignActivity = 4402,
        
        [EnumMember()]
        [OptionSetMetadata("System Job", Index=2, Lcid=1033)]
        SystemJob = 4700,
        
        [EnumMember()]
        [OptionSetMetadata("Entitlement", Index=9, Lcid=1033)]
        Entitlement = 9700,
    }
    
    [DataContract()]
    public enum appnotification_IconType {
        
        [EnumMember()]
        [OptionSetMetadata("Info", Index=0, Lcid=1033, Color="#0000ff")]
        Info = 100000000,
        
        [EnumMember()]
        [OptionSetMetadata("Success", Index=1, Lcid=1033, Color="#0000ff")]
        Success = 100000001,
        
        [EnumMember()]
        [OptionSetMetadata("Failure", Index=2, Lcid=1033, Color="#0000ff")]
        Failure = 100000002,
        
        [EnumMember()]
        [OptionSetMetadata("Warning", Index=3, Lcid=1033, Color="#0000ff")]
        Warning = 100000003,
        
        [EnumMember()]
        [OptionSetMetadata("Mention", Index=4, Lcid=1033, Color="#0000ff")]
        Mention = 100000004,
        
        [EnumMember()]
        [OptionSetMetadata("Custom", Index=5, Lcid=1033, Color="#0000ff")]
        Custom = 100000005,
    }
    
    [DataContract()]
    public enum appnotification_Priority {
        
        [EnumMember()]
        [OptionSetMetadata("Normal", Index=0, Lcid=1033, Color="#0000ff")]
        Normal = 200000000,
        
        [EnumMember()]
        [OptionSetMetadata("High", Index=1, Lcid=1033, Color="#0000ff")]
        High = 200000001,
    }
    
    [DataContract()]
    public enum appnotification_ToastType {
        
        [EnumMember()]
        [OptionSetMetadata("Timed", Index=0, Lcid=1033, Description="Toast will fade out after the time out configured by the user", Color="#0000ff")]
        Timed = 200000000,
        
        [EnumMember()]
        [OptionSetMetadata("Hidden", Index=1, Lcid=1033, Description="Toast will not show but the notification will still be displayed in notification " +
            "center", Color="#0000ff")]
        Hidden = 200000001,
    }
    
    [DataContract()]
    public enum mgs_InvoiceState {
        
        [EnumMember()]
        [OptionSetMetadata("Active", Index=0, Lcid=1033)]
        Active = 0,
        
        [EnumMember()]
        [OptionSetMetadata("Inactive", Index=1, Lcid=1033)]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum mgs_Invoice_statuscode {
        
        [EnumMember()]
        [OptionSetMetadata("Active", Index=0, Lcid=1033)]
        Active = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Inactive", Index=1, Lcid=1033)]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum mgs_InvoiceCollectionState {
        
        [EnumMember()]
        [OptionSetMetadata("Active", Index=0, Lcid=1033)]
        Active = 0,
        
        [EnumMember()]
        [OptionSetMetadata("Inactive", Index=1, Lcid=1033)]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum mgs_InvoiceCollection_statuscode {
        
        [EnumMember()]
        [OptionSetMetadata("Draft", Index=0, Lcid=1033, Description="")]
        Draft = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Inactive", Index=1, Lcid=1033)]
        Inactive = 2,
        
        [EnumMember()]
        [OptionSetMetadata("Create Invoices", Index=2, Lcid=1033, Description="")]
        CreateInvoices = 862810001,
        
        [EnumMember()]
        [OptionSetMetadata("Invoices Created", Index=3, Lcid=1033, Description="")]
        InvoicesCreated = 862810002,
    }
    
    [DataContract()]
    public enum mgs_ProductState {
        
        [EnumMember()]
        [OptionSetMetadata("Active", Index=0, Lcid=1033)]
        Active = 0,
        
        [EnumMember()]
        [OptionSetMetadata("Inactive", Index=1, Lcid=1033)]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum mgs_Product_statuscode {
        
        [EnumMember()]
        [OptionSetMetadata("Active", Index=0, Lcid=1033)]
        Active = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Inactive", Index=1, Lcid=1033)]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum mgs_SubscriptionState {
        
        [EnumMember()]
        [OptionSetMetadata("Active", Index=0, Lcid=1033)]
        Active = 0,
        
        [EnumMember()]
        [OptionSetMetadata("Inactive", Index=1, Lcid=1033)]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum mgs_Subscription_statuscode {
        
        [EnumMember()]
        [OptionSetMetadata("Active", Index=0, Lcid=1033)]
        Active = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Inactive", Index=1, Lcid=1033)]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum mgs_TransactionState {
        
        [EnumMember()]
        [OptionSetMetadata("Active", Index=0, Lcid=1033)]
        Active = 0,
        
        [EnumMember()]
        [OptionSetMetadata("Inactive", Index=1, Lcid=1033)]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum mgs_Transaction_statuscode {
        
        [EnumMember()]
        [OptionSetMetadata("Active", Index=0, Lcid=1033)]
        Active = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Inactive", Index=1, Lcid=1033)]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum powerpagelanguages {
        
        [EnumMember()]
        [OptionSetMetadata("Arabic", Index=0, Lcid=1033, Description="", Color="#0000ff")]
        Arabic = 1025,
        
        [EnumMember()]
        [OptionSetMetadata("Bulgarian - Bulgaria", Index=2, Lcid=1033, Description="", Color="#0000ff")]
        BulgarianBulgaria = 1026,
        
        [EnumMember()]
        [OptionSetMetadata("Catalan - Catalan", Index=3, Lcid=1033, Description="", Color="#0000ff")]
        CatalanCatalan = 1027,
        
        [EnumMember()]
        [OptionSetMetadata("Chinese - Traditional", Index=6, Lcid=1033, Description="", Color="#0000ff")]
        ChineseTraditional = 1028,
        
        [EnumMember()]
        [OptionSetMetadata("Czech - Czech Republic", Index=8, Lcid=1033, Description="", Color="#0000ff")]
        CzechCzechRepublic = 1029,
        
        [EnumMember()]
        [OptionSetMetadata("Danish - Denmark", Index=9, Lcid=1033, Description="", Color="#0000ff")]
        DanishDenmark = 1030,
        
        [EnumMember()]
        [OptionSetMetadata("German - Germany", Index=16, Lcid=1033, Description="", Color="#0000ff")]
        GermanGermany = 1031,
        
        [EnumMember()]
        [OptionSetMetadata("Greek - Greece", Index=17, Lcid=1033, Description="", Color="#0000ff")]
        GreekGreece = 1032,
        
        [EnumMember()]
        [OptionSetMetadata("English", Index=11, Lcid=1033, Description="", Color="#0000ff")]
        English = 1033,
        
        [EnumMember()]
        [OptionSetMetadata("Finnish - Finland", Index=13, Lcid=1033, Description="", Color="#0000ff")]
        FinnishFinland = 1035,
        
        [EnumMember()]
        [OptionSetMetadata("French - France", Index=14, Lcid=1033, Description="", Color="#0000ff")]
        FrenchFrance = 1036,
        
        [EnumMember()]
        [OptionSetMetadata("Hebrew", Index=18, Lcid=1033, Description="", Color="#0000ff")]
        Hebrew = 1037,
        
        [EnumMember()]
        [OptionSetMetadata("Hungarian - Hungary", Index=20, Lcid=1033, Description="", Color="#0000ff")]
        HungarianHungary = 1038,
        
        [EnumMember()]
        [OptionSetMetadata("Italian - Italy", Index=22, Lcid=1033, Description="", Color="#0000ff")]
        ItalianItaly = 1040,
        
        [EnumMember()]
        [OptionSetMetadata("Japanese - Japan", Index=23, Lcid=1033, Description="", Color="#0000ff")]
        JapaneseJapan = 1041,
        
        [EnumMember()]
        [OptionSetMetadata("Korean - Korea", Index=25, Lcid=1033, Description="", Color="#0000ff")]
        KoreanKorea = 1042,
        
        [EnumMember()]
        [OptionSetMetadata("Dutch - Netherlands", Index=10, Lcid=1033, Description="", Color="#0000ff")]
        DutchNetherlands = 1043,
        
        [EnumMember()]
        [OptionSetMetadata("Norwegian (Bokmål) - Norway", Index=29, Lcid=1033, Description="", Color="#0000ff")]
        NorwegianBokmålNorway = 1044,
        
        [EnumMember()]
        [OptionSetMetadata("Polish - Poland", Index=30, Lcid=1033, Description="", Color="#0000ff")]
        PolishPoland = 1045,
        
        [EnumMember()]
        [OptionSetMetadata("Portuguese - Brazil", Index=31, Lcid=1033, Description="", Color="#0000ff")]
        PortugueseBrazil = 1046,
        
        [EnumMember()]
        [OptionSetMetadata("Romanian - Romania", Index=33, Lcid=1033, Description="", Color="#0000ff")]
        RomanianRomania = 1048,
        
        [EnumMember()]
        [OptionSetMetadata("Russian - Russia", Index=34, Lcid=1033, Description="", Color="#0000ff")]
        RussianRussia = 1049,
        
        [EnumMember()]
        [OptionSetMetadata("Croatian - Croatia", Index=7, Lcid=1033, Description="", Color="#0000ff")]
        CroatianCroatia = 1050,
        
        [EnumMember()]
        [OptionSetMetadata("Slovak - Slovakia", Index=37, Lcid=1033, Description="", Color="#0000ff")]
        SlovakSlovakia = 1051,
        
        [EnumMember()]
        [OptionSetMetadata("Swedish - Sweden", Index=40, Lcid=1033, Description="", Color="#0000ff")]
        SwedishSweden = 1053,
        
        [EnumMember()]
        [OptionSetMetadata("Thai - Thailand", Index=41, Lcid=1033, Description="", Color="#0000ff")]
        ThaiThailand = 1054,
        
        [EnumMember()]
        [OptionSetMetadata("Turkish - Türkiye", Index=42, Lcid=1033, Description="", Color="#0000ff")]
        TurkishTürkiye = 1055,
        
        [EnumMember()]
        [OptionSetMetadata("Indonesian - Indonesia", Index=21, Lcid=1033, Description="", Color="#0000ff")]
        IndonesianIndonesia = 1057,
        
        [EnumMember()]
        [OptionSetMetadata("Ukrainian - Ukraine", Index=43, Lcid=1033, Description="", Color="#0000ff")]
        UkrainianUkraine = 1058,
        
        [EnumMember()]
        [OptionSetMetadata("Slovenian - Slovenia", Index=38, Lcid=1033, Description="", Color="#0000ff")]
        SlovenianSlovenia = 1060,
        
        [EnumMember()]
        [OptionSetMetadata("Estonian - Estonia", Index=12, Lcid=1033, Description="", Color="#0000ff")]
        EstonianEstonia = 1061,
        
        [EnumMember()]
        [OptionSetMetadata("Latvian - Latvia", Index=26, Lcid=1033, Description="", Color="#0000ff")]
        LatvianLatvia = 1062,
        
        [EnumMember()]
        [OptionSetMetadata("Lithuanian - Lithuania", Index=27, Lcid=1033, Description="", Color="#0000ff")]
        LithuanianLithuania = 1063,
        
        [EnumMember()]
        [OptionSetMetadata("Vietnamese - Vietnam", Index=44, Lcid=1033, Description="", Color="#0000ff")]
        VietnameseVietnam = 1066,
        
        [EnumMember()]
        [OptionSetMetadata("Basque - Basque", Index=1, Lcid=1033, Description="", Color="#0000ff")]
        BasqueBasque = 1069,
        
        [EnumMember()]
        [OptionSetMetadata("Hindi - India", Index=19, Lcid=1033, Description="", Color="#0000ff")]
        HindiIndia = 1081,
        
        [EnumMember()]
        [OptionSetMetadata("Malay - Malaysia", Index=28, Lcid=1033, Description="", Color="#0000ff")]
        MalayMalaysia = 1086,
        
        [EnumMember()]
        [OptionSetMetadata("Kazakh - Kazakhstan", Index=24, Lcid=1033, Description="", Color="#0000ff")]
        KazakhKazakhstan = 1087,
        
        [EnumMember()]
        [OptionSetMetadata("Galician - Spain", Index=15, Lcid=1033, Description="", Color="#0000ff")]
        GalicianSpain = 1110,
        
        [EnumMember()]
        [OptionSetMetadata("Chinese - China", Index=4, Lcid=1033, Description="", Color="#0000ff")]
        ChineseChina = 2052,
        
        [EnumMember()]
        [OptionSetMetadata("Portuguese - Portugal", Index=32, Lcid=1033, Description="", Color="#0000ff")]
        PortuguesePortugal = 2070,
        
        [EnumMember()]
        [OptionSetMetadata("Serbian (Latin) - Serbia", Index=36, Lcid=1033, Description="", Color="#0000ff")]
        SerbianLatinSerbia = 2074,
        
        [EnumMember()]
        [OptionSetMetadata("Chinese - Hong Kong SAR", Index=5, Lcid=1033, Description="", Color="#0000ff")]
        ChineseHongKongSAR = 3076,
        
        [EnumMember()]
        [OptionSetMetadata("Spanish (Traditional Sort) - Spain", Index=39, Lcid=1033, Description="", Color="#0000ff")]
        SpanishTraditionalSortSpain = 3082,
        
        [EnumMember()]
        [OptionSetMetadata("Serbian (Cyrillic) - Serbia", Index=35, Lcid=1033, Description="", Color="#0000ff")]
        SerbianCyrillicSerbia = 3098,
    }
    
    [DataContract()]
    public enum componentstate {
        
        [EnumMember()]
        [OptionSetMetadata("Published", Index=0, Lcid=1033)]
        Published = 0,
        
        [EnumMember()]
        [OptionSetMetadata("Unpublished", Index=1, Lcid=1033)]
        Unpublished = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Deleted", Index=2, Lcid=1033)]
        Deleted = 2,
        
        [EnumMember()]
        [OptionSetMetadata("Deleted Unpublished", Index=3, Lcid=1033)]
        DeletedUnpublished = 3,
    }
    
    [DataContract()]
    public enum msdyn_queueassignmentstrategy {
        
        [EnumMember()]
        [OptionSetMetadata("Omnichannel Assignment", Index=0, Lcid=1033, Description="", Color="#0000ff")]
        OmnichannelAssignment = 192350000,
        
        [EnumMember()]
        [OptionSetMetadata("Round Robin", Index=1, Lcid=1033, Description="", Color="#0000ff")]
        RoundRobin = 192350001,
        
        [EnumMember()]
        [OptionSetMetadata("Custom Assignment Configuration", Index=2, Lcid=1033, Description="", Color="#0000ff")]
        CustomAssignmentConfiguration = 192350002,
        
        [EnumMember()]
        [OptionSetMetadata("Longest Idle", Index=3, Lcid=1033, Description="", Color="#0000ff")]
        LongestIdle = 192350003,
    }
    
    [DataContract()]
    public enum msdyn_queuetype {
        
        [EnumMember()]
        [OptionSetMetadata("Messaging", Index=0, Lcid=1033, Color="#0000ff")]
        Messaging = 192350000,
        
        [EnumMember()]
        [OptionSetMetadata("Entity", Index=1, Lcid=1033, Color="#0000ff")]
        Entity = 192350001,
    }
    
    [DataContract()]
    public enum activitypointer_activitytypecode {
        
        [EnumMember()]
        [OptionSetMetadata("Appointment", Index=4, Lcid=1033)]
        Appointment = 4201,
        
        [EnumMember()]
        [OptionSetMetadata("Email", Index=2, Lcid=1033)]
        Email = 4202,
        
        [EnumMember()]
        [OptionSetMetadata("Fax", Index=0, Lcid=1033)]
        Fax = 4204,
        
        [EnumMember()]
        [OptionSetMetadata("Case Resolution", Index=13, Lcid=1033)]
        CaseResolution = 4206,
        
        [EnumMember()]
        [OptionSetMetadata("Letter", Index=3, Lcid=1033)]
        Letter = 4207,
        
        [EnumMember()]
        [OptionSetMetadata("Opportunity Close", Index=15, Lcid=1033)]
        OpportunityClose = 4208,
        
        [EnumMember()]
        [OptionSetMetadata("Order Close", Index=16, Lcid=1033)]
        OrderClose = 4209,
        
        [EnumMember()]
        [OptionSetMetadata("Phone Call", Index=1, Lcid=1033)]
        PhoneCall = 4210,
        
        [EnumMember()]
        [OptionSetMetadata("Quote Close", Index=17, Lcid=1033)]
        QuoteClose = 4211,
        
        [EnumMember()]
        [OptionSetMetadata("Task", Index=5, Lcid=1033)]
        Task = 4212,
        
        [EnumMember()]
        [OptionSetMetadata("Service Activity", Index=14, Lcid=1033)]
        ServiceActivity = 4214,
        
        [EnumMember()]
        [OptionSetMetadata("Recurring Appointment", Index=6, Lcid=1033)]
        RecurringAppointment = 4251,
        
        [EnumMember()]
        [OptionSetMetadata("Campaign Response", Index=12, Lcid=1033)]
        CampaignResponse = 4401,
        
        [EnumMember()]
        [OptionSetMetadata("Campaign Activity", Index=11, Lcid=1033)]
        CampaignActivity = 4402,
        
        [EnumMember()]
        [OptionSetMetadata("Quick Campaign", Index=10, Lcid=1033)]
        QuickCampaign = 4406,
        
        [EnumMember()]
        [OptionSetMetadata("Teams chat", Index=7, Lcid=1033)]
        Teamschat = 10199,
        
        [EnumMember()]
        [OptionSetMetadata("Invite Redemption", Index=8, Lcid=1033)]
        InviteRedemption = 10329,
        
        [EnumMember()]
        [OptionSetMetadata("Portal Comment", Index=9, Lcid=1033)]
        PortalComment = 10330,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Voice alert", Index=18, Lcid=1033)]
        CustomerVoicealert = 10622,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Voice survey invite", Index=19, Lcid=1033)]
        CustomerVoicesurveyinvite = 10632,
        
        [EnumMember()]
        [OptionSetMetadata("Customer Voice survey response", Index=20, Lcid=1033)]
        CustomerVoicesurveyresponse = 10634,
        
        [EnumMember()]
        [OptionSetMetadata("Conversation", Index=21, Lcid=1033)]
        Conversation = 10717,
        
        [EnumMember()]
        [OptionSetMetadata("Session", Index=22, Lcid=1033)]
        Session = 10734,
        
        [EnumMember()]
        [OptionSetMetadata("Copilot Transcript", Index=23, Lcid=1033)]
        CopilotTranscript = 10919,
    }
    
    [DataContract()]
    public enum mgs_billinginterval {
        
        [EnumMember()]
        [OptionSetMetadata("Yearly", Index=0, Lcid=1033, Description="")]
        Yearly = 862810000,
        
        [EnumMember()]
        [OptionSetMetadata("Monthly", Index=1, Lcid=1033, Description="")]
        Monthly = 862810001,
    }
    
    [DataContract()]
    public enum mgs_transactiontype {
        
        [EnumMember()]
        [OptionSetMetadata("Product", Index=0, Lcid=1033, Description="")]
        Product = 862810000,
        
        [EnumMember()]
        [OptionSetMetadata("Credit", Index=1, Lcid=1033, Description="")]
        Credit = 862810001,
    }
}
